[
  {
    "name": "Map class",
    "page": "map",
    "children": ["Map"],
    "kind": "note",
    "description": {
      "type": "root",
      "children": []
    },
    "path": [
      {
        "name": "Map class",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "Map"
                  },
                  {
                    "type": "text",
                    "value": " object represents the map on your page. It exposes methods\nand properties that enable you to programmatically change the map,\nand fires events as users interact with it."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "You create a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "Map"
                  },
                  {
                    "type": "text",
                    "value": " by specifying a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "container"
                  },
                  {
                    "type": "text",
                    "value": " and other options.\nThen MapLibre GL JS initializes the map on the page and returns your "
                  },
                  {
                    "type": "inlineCode",
                    "value": "Map"
                  },
                  {
                    "type": "text",
                    "value": "\nobject."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 9,
              "type": null,
              "name": "Evented"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "The HTML element in which MapLibre GL JS will render the map, or the element's string `id`. The specified element must have no children.",
              "lineNumber": 11,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "HTMLElement"
                  },
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              },
              "name": "options.container"
            },
            {
              "title": "param",
              "description": "The minimum zoom level of the map (0-24).",
              "lineNumber": 12,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.minZoom",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The maximum zoom level of the map (0-24).",
              "lineNumber": 13,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.maxZoom",
              "default": "22"
            },
            {
              "title": "param",
              "description": "The minimum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.",
              "lineNumber": 14,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.minPitch",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The maximum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.",
              "lineNumber": 15,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.maxPitch",
              "default": "60"
            },
            {
              "title": "param",
              "description": "The map's MapLibre style. This must be an a JSON object conforming to\nthe schema described in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/), or a URL to\nsuch JSON.",
              "lineNumber": 16,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  ]
                }
              },
              "name": "options.style"
            },
            {
              "title": "param",
              "description": "If `true`, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\n  For example, `http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60`.\n  An additional string may optionally be provided to indicate a parameter-styled hash,\n  e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar, where foo\n  is a custom parameter and bar is an arbitrary hash distinct from the map hash.",
              "lineNumber": 21,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  ]
                }
              },
              "name": "options.hash",
              "default": "false"
            },
            {
              "title": "param",
              "description": "If `false`, no mouse, touch, or keyboard listeners will be attached to the map, so it will not respond to interaction.",
              "lineNumber": 26,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.interactive",
              "default": "true"
            },
            {
              "title": "param",
              "description": "The threshold, measured in degrees, that determines when the map's\n  bearing will snap to north. For example, with a `bearingSnap` of 7, if the user rotates\n  the map within 7 degrees of north, the map will automatically snap to exact north.",
              "lineNumber": 27,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.bearingSnap",
              "default": "7"
            },
            {
              "title": "param",
              "description": "If `false`, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.",
              "lineNumber": 30,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.pitchWithRotate",
              "default": "true"
            },
            {
              "title": "param",
              "description": "The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag).",
              "lineNumber": 31,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.clickTolerance",
              "default": "3"
            },
            {
              "title": "param",
              "description": "If `true`, an {@link AttributionControl} will be added to the map.",
              "lineNumber": 32,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.attributionControl",
              "default": "true"
            },
            {
              "title": "param",
              "description": "String or strings to show in an {@link AttributionControl}. Only applicable if `options.attributionControl` is `true`.",
              "lineNumber": 33,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  ]
                }
              },
              "name": "options.customAttribution"
            },
            {
              "title": "param",
              "description": "If `true`, the MapLibre logo will be shown",
              "lineNumber": 34,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.maplibreLogo",
              "default": "false"
            },
            {
              "title": "param",
              "description": "A string representing the position of the MapLibre wordmark on the map. Valid options are `top-left`,`top-right`, `bottom-left`, `bottom-right`.",
              "lineNumber": 35,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.logoPosition",
              "default": "'bottom-left'"
            },
            {
              "title": "param",
              "description": "If `true`, map creation will fail if the performance of MapLibre\n  GL JS would be dramatically worse than expected (i.e. a software renderer would be used).",
              "lineNumber": 36,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.failIfMajorPerformanceCaveat",
              "default": "false"
            },
            {
              "title": "param",
              "description": "If `true`, the map's canvas can be exported to a PNG using `map.getCanvas().toDataURL()`. This is `false` by default as a performance optimization.",
              "lineNumber": 38,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.preserveDrawingBuffer",
              "default": "false"
            },
            {
              "title": "param",
              "description": "If `true`, the gl context will be created with MSAA antialiasing, which can be useful for antialiasing custom layers. this is `false` by default as a performance optimization.",
              "lineNumber": 39,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.antialias"
            },
            {
              "title": "param",
              "description": "If `false`, the map won't attempt to re-request tiles once they expire per their HTTP `cacheControl`/`expires` headers.",
              "lineNumber": 40,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.refreshExpiredTiles",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If set, the map will be constrained to the given bounds.",
              "lineNumber": 41,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatBoundsLike"
                }
              },
              "name": "options.maxBounds"
            },
            {
              "title": "param",
              "description": "If `true`, the \"scroll to zoom\" interaction is enabled. An `Object` value is passed as options to {@link ScrollZoomHandler#enable}.",
              "lineNumber": 42,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              },
              "name": "options.scrollZoom",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"box zoom\" interaction is enabled (see {@link BoxZoomHandler}).",
              "lineNumber": 43,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.boxZoom",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"drag to rotate\" interaction is enabled (see {@link DragRotateHandler}).",
              "lineNumber": 44,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.dragRotate",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"drag to pan\" interaction is enabled. An `Object` value is passed as options to {@link DragPanHandler#enable}.",
              "lineNumber": 45,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              },
              "name": "options.dragPan",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, keyboard shortcuts are enabled (see {@link KeyboardHandler}).",
              "lineNumber": 46,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.keyboard",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"double click to zoom\" interaction is enabled (see {@link DoubleClickZoomHandler}).",
              "lineNumber": 47,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.doubleClickZoom",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"pinch to rotate and zoom\" interaction is enabled. An `Object` value is passed as options to {@link TouchZoomRotateHandler#enable}.",
              "lineNumber": 48,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              },
              "name": "options.touchZoomRotate",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the \"drag to pitch\" interaction is enabled. An `Object` value is passed as options to {@link TouchPitchHandler#enable}.",
              "lineNumber": 49,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              },
              "name": "options.touchPitch",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the map will automatically resize when the browser window resizes.",
              "lineNumber": 50,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.trackResize",
              "default": "true"
            },
            {
              "title": "param",
              "description": "The initial geographical centerpoint of the map. If `center` is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to `[0, 0]` Note: MapLibre GL uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON.",
              "lineNumber": 51,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatLike"
                }
              },
              "name": "options.center",
              "default": "[0,0]"
            },
            {
              "title": "param",
              "description": "The initial zoom level of the map. If `zoom` is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to `0`.",
              "lineNumber": 52,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.zoom",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The initial bearing (rotation) of the map, measured in degrees counter-clockwise from north. If `bearing` is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to `0`.",
              "lineNumber": 53,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.bearing",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The initial pitch (tilt) of the map, measured in degrees away from the plane of the screen (0-85). If `pitch` is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to `0`. Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.",
              "lineNumber": 54,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.pitch",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The initial bounds of the map. If `bounds` is specified, it overrides `center` and `zoom` constructor options.",
              "lineNumber": 55,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatBoundsLike"
                }
              },
              "name": "options.bounds"
            },
            {
              "title": "param",
              "description": "A {@link Map#fitBounds} options object to use _only_ when fitting the initial `bounds` provided above.",
              "lineNumber": 56,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.fitBoundsOptions"
            },
            {
              "title": "param",
              "description": "If `true`, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to `false`:\n- When the map is zoomed out far enough that a single representation of the world does not fill the map's entire\ncontainer, there will be blank space beyond 180 and -180 degrees longitude.\n- Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the\nmap and the other on the left edge of the map) at every zoom level.",
              "lineNumber": 57,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.renderWorldCopies",
              "default": "true"
            },
            {
              "title": "param",
              "description": "The maximum number of tiles stored in the tile cache for a given source. If omitted, the cache will be dynamically sized based on the current viewport.",
              "lineNumber": 62,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.maxTileCacheSize",
              "default": "null"
            },
            {
              "title": "param",
              "description": "Defines a CSS\n  font-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges.\n  In these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n  Set to `false`, to enable font settings from the map's style for these glyph ranges.\n  The purpose of this option is to avoid bandwidth-intensive glyph server requests. (See [Use locally generated ideographs](https://maplibre.org/maplibre-gl-js-docs/example/local-ideographs).)",
              "lineNumber": 63,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.localIdeographFontFamily",
              "default": "'sans-serif'"
            },
            {
              "title": "param",
              "description": "A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\n  Expected to return an object with a `url` property and optionally `headers` and `credentials` properties.",
              "lineNumber": 68,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "RequestTransformFunction"
                }
              },
              "name": "options.transformRequest",
              "default": "null"
            },
            {
              "title": "param",
              "description": "If `true`, Resource Timing API information will be collected for requests made by GeoJSON and Vector Tile web workers (this information is normally inaccessible from the main Javascript thread). Information will be returned in a `resourceTiming` property of relevant `data` events.",
              "lineNumber": 70,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.collectResourceTiming",
              "default": "false"
            },
            {
              "title": "param",
              "description": "Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds. This setting affects all symbol layers. This setting does not affect the duration of runtime styling transitions or raster tile cross-fading.",
              "lineNumber": 71,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.fadeDuration",
              "default": "300"
            },
            {
              "title": "param",
              "description": "If `true`, symbols from multiple sources can collide with each other during collision detection. If `false`, collision detection is run separately for the symbols in each source.",
              "lineNumber": 72,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.crossSourceCollisions",
              "default": "true"
            },
            {
              "title": "param",
              "description": "A patch to apply to the default localization table for UI strings, e.g. control tooltips. The `locale` object maps namespaced UI string IDs to translated strings in the target language; see `src/ui/default_locale.js` for an example with all supported string IDs. The object may specify all UI strings (thereby adding support for a new translation) or only a subset of strings (thereby patching the default translation table).",
              "lineNumber": 73,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.locale",
              "default": "null"
            },
            {
              "title": "param",
              "description": "The pixel ratio. The canvas' `width` attribute will be `container.clientWidth * pixelRatio` and its `height` attribute will be `container.clientHeight * pixelRatio`. Defaults to `devicePixelRatio` if not specified.",
              "lineNumber": 74,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.pixelRatio"
            },
            {
              "title": "example",
              "description": "var map = new maplibregl.Map({\n  container: 'map',\n  center: [-122.420679, 37.772537],\n  zoom: 13,\n  style: style_object,\n  hash: true,\n  transformRequest: (url, resourceType)=> {\n    if(resourceType === 'Source' && url.startsWith('http://myHost')) {\n      return {\n       url: url.replace('http', 'https'),\n       headers: { 'my-custom-header': true},\n       credentials: 'include'  // Include cookies for cross-origin requests\n     }\n    }\n  }\n});",
              "lineNumber": 75
            },
            {
              "title": "see",
              "description": "[Display a map](https://maplibre.org/maplibre-gl-js-docs/example/simple-map/)",
              "lineNumber": 92
            }
          ],
          "loc": {
            "start": {
              "line": 169,
              "column": 0
            },
            "end": {
              "line": 262,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 263,
                "column": 0
              },
              "end": {
                "line": 2830,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L263-L2830",
              "path": "src/ui/map.ts"
            }
          },
          "augments": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 9,
              "type": null,
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "var map = new maplibregl.Map({\n  container: 'map',\n  center: [-122.420679, 37.772537],\n  zoom: 13,\n  style: style_object,\n  hash: true,\n  transformRequest: (url, resourceType)=> {\n    if(resourceType === 'Source' && url.startsWith('http://myHost')) {\n      return {\n       url: url.replace('http', 'https'),\n       headers: { 'my-custom-header': true},\n       credentials: 'include'  // Include cookies for cross-origin requests\n     }\n    }\n  }\n});"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.container",
                  "lineNumber": 11,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The HTML element in which MapLibre GL JS will render the map, or the element's string "
                          },
                          {
                            "type": "inlineCode",
                            "value": "id"
                          },
                          {
                            "type": "text",
                            "value": ". The specified element must have no children."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "HTMLElement"
                      },
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                },
                {
                  "title": "param",
                  "name": "options.minZoom",
                  "lineNumber": 12,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The minimum zoom level of the map (0-24)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.maxZoom",
                  "lineNumber": 13,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The maximum zoom level of the map (0-24)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "22"
                },
                {
                  "title": "param",
                  "name": "options.minPitch",
                  "lineNumber": 14,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The minimum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.maxPitch",
                  "lineNumber": 15,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The maximum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "60"
                },
                {
                  "title": "param",
                  "name": "options.style",
                  "lineNumber": 16,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The map's MapLibre style. This must be an a JSON object conforming to\nthe schema described in the "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
                            "children": [
                              {
                                "type": "text",
                                "value": "MapLibre Style Specification"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ", or a URL to\nsuch JSON."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        },
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.hash",
                  "lineNumber": 21,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\nFor example, "
                          },
                          {
                            "type": "inlineCode",
                            "value": "http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60"
                          },
                          {
                            "type": "text",
                            "value": ".\nAn additional string may optionally be provided to indicate a parameter-styled hash,\ne.g. "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar",
                            "children": [
                              {
                                "type": "text",
                                "value": "http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ", where foo\nis a custom parameter and bar is an arbitrary hash distinct from the map hash."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "boolean"
                      },
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.interactive",
                  "lineNumber": 26,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", no mouse, touch, or keyboard listeners will be attached to the map, so it will not respond to interaction."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.bearingSnap",
                  "lineNumber": 27,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The threshold, measured in degrees, that determines when the map's\nbearing will snap to north. For example, with a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bearingSnap"
                          },
                          {
                            "type": "text",
                            "value": " of 7, if the user rotates\nthe map within 7 degrees of north, the map will automatically snap to exact north."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "7"
                },
                {
                  "title": "param",
                  "name": "options.pitchWithRotate",
                  "lineNumber": 30,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.clickTolerance",
                  "lineNumber": 31,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "3"
                },
                {
                  "title": "param",
                  "name": "options.attributionControl",
                  "lineNumber": 32,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", an "
                          },
                          {
                            "type": "link",
                            "url": "AttributionControl",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "AttributionControl"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " will be added to the map."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.customAttribution",
                  "lineNumber": 33,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "String or strings to show in an "
                          },
                          {
                            "type": "link",
                            "url": "AttributionControl",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "AttributionControl"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ". Only applicable if "
                          },
                          {
                            "type": "inlineCode",
                            "value": "options.attributionControl"
                          },
                          {
                            "type": "text",
                            "value": " is "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "string"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.maplibreLogo",
                  "lineNumber": 34,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the MapLibre logo will be shown."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.logoPosition",
                  "lineNumber": 35,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A string representing the position of the MapLibre wordmark on the map. Valid options are "
                          },
                          {
                            "type": "inlineCode",
                            "value": "top-left"
                          },
                          {
                            "type": "text",
                            "value": ","
                          },
                          {
                            "type": "inlineCode",
                            "value": "top-right"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bottom-left"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bottom-right"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'bottom-left'"
                },
                {
                  "title": "param",
                  "name": "options.failIfMajorPerformanceCaveat",
                  "lineNumber": 36,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", map creation will fail if the performance of MapLibre\nGL JS would be dramatically worse than expected (i.e. a software renderer would be used)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.preserveDrawingBuffer",
                  "lineNumber": 38,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the map's canvas can be exported to a PNG using "
                          },
                          {
                            "type": "inlineCode",
                            "value": "map.getCanvas().toDataURL()"
                          },
                          {
                            "type": "text",
                            "value": ". This is "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": " by default as a performance optimization."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.antialias",
                  "lineNumber": 39,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the gl context will be created with MSAA antialiasing, which can be useful for antialiasing custom layers. this is "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": " by default as a performance optimization."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.refreshExpiredTiles",
                  "lineNumber": 40,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", the map won't attempt to re-request tiles once they expire per their HTTP "
                          },
                          {
                            "type": "inlineCode",
                            "value": "cacheControl"
                          },
                          {
                            "type": "text",
                            "value": "/"
                          },
                          {
                            "type": "inlineCode",
                            "value": "expires"
                          },
                          {
                            "type": "text",
                            "value": " headers."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.maxBounds",
                  "lineNumber": 41,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If set, the map will be constrained to the given bounds."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.scrollZoom",
                  "lineNumber": 42,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"scroll to zoom\" interaction is enabled. An "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Object"
                          },
                          {
                            "type": "text",
                            "value": " value is passed as options to "
                          },
                          {
                            "type": "link",
                            "url": "ScrollZoomHandler#enable",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "ScrollZoomHandler#enable"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "boolean"
                      },
                      {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    ]
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.boxZoom",
                  "lineNumber": 43,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"box zoom\" interaction is enabled (see "
                          },
                          {
                            "type": "link",
                            "url": "BoxZoomHandler",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "BoxZoomHandler"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ")."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.dragRotate",
                  "lineNumber": 44,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"drag to rotate\" interaction is enabled (see "
                          },
                          {
                            "type": "link",
                            "url": "DragRotateHandler",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "DragRotateHandler"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ")."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.dragPan",
                  "lineNumber": 45,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"drag to pan\" interaction is enabled. An "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Object"
                          },
                          {
                            "type": "text",
                            "value": " value is passed as options to "
                          },
                          {
                            "type": "link",
                            "url": "DragPanHandler#enable",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "DragPanHandler#enable"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "boolean"
                      },
                      {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    ]
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.keyboard",
                  "lineNumber": 46,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", keyboard shortcuts are enabled (see "
                          },
                          {
                            "type": "link",
                            "url": "KeyboardHandler",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "KeyboardHandler"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ")."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.doubleClickZoom",
                  "lineNumber": 47,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"double click to zoom\" interaction is enabled (see "
                          },
                          {
                            "type": "link",
                            "url": "DoubleClickZoomHandler",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "DoubleClickZoomHandler"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ")."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.touchZoomRotate",
                  "lineNumber": 48,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"pinch to rotate and zoom\" interaction is enabled. An "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Object"
                          },
                          {
                            "type": "text",
                            "value": " value is passed as options to "
                          },
                          {
                            "type": "link",
                            "url": "TouchZoomRotateHandler#enable",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "TouchZoomRotateHandler#enable"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "boolean"
                      },
                      {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    ]
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.touchPitch",
                  "lineNumber": 49,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the \"drag to pitch\" interaction is enabled. An "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Object"
                          },
                          {
                            "type": "text",
                            "value": " value is passed as options to "
                          },
                          {
                            "type": "link",
                            "url": "TouchPitchHandler#enable",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "TouchPitchHandler#enable"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "UnionType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "boolean"
                      },
                      {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    ]
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.trackResize",
                  "lineNumber": 50,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the map will automatically resize when the browser window resizes."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.center",
                  "lineNumber": 51,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The initial geographical centerpoint of the map. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "center"
                          },
                          {
                            "type": "text",
                            "value": " is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "[0, 0]"
                          },
                          {
                            "type": "text",
                            "value": " Note: MapLibre GL uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "LngLatLike"
                  },
                  "default": "[0,0]"
                },
                {
                  "title": "param",
                  "name": "options.zoom",
                  "lineNumber": 52,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The initial zoom level of the map. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "zoom"
                          },
                          {
                            "type": "text",
                            "value": " is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "0"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.bearing",
                  "lineNumber": 53,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The initial bearing (rotation) of the map, measured in degrees counter-clockwise from north. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bearing"
                          },
                          {
                            "type": "text",
                            "value": " is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "0"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.pitch",
                  "lineNumber": 54,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The initial pitch (tilt) of the map, measured in degrees away from the plane of the screen (0-85). If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "pitch"
                          },
                          {
                            "type": "text",
                            "value": " is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "0"
                          },
                          {
                            "type": "text",
                            "value": ". Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.bounds",
                  "lineNumber": 55,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The initial bounds of the map. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bounds"
                          },
                          {
                            "type": "text",
                            "value": " is specified, it overrides "
                          },
                          {
                            "type": "inlineCode",
                            "value": "center"
                          },
                          {
                            "type": "text",
                            "value": " and "
                          },
                          {
                            "type": "inlineCode",
                            "value": "zoom"
                          },
                          {
                            "type": "text",
                            "value": " constructor options."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.fitBoundsOptions",
                  "lineNumber": 56,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A "
                          },
                          {
                            "type": "link",
                            "url": "Map#fitBounds",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "Map#fitBounds"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " options object to use "
                          },
                          {
                            "type": "emphasis",
                            "children": [
                              {
                                "type": "text",
                                "value": "only"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " when fitting the initial "
                          },
                          {
                            "type": "inlineCode",
                            "value": "bounds"
                          },
                          {
                            "type": "text",
                            "value": " provided above."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.renderWorldCopies",
                  "lineNumber": 57,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ":"
                          }
                        ]
                      },
                      {
                        "type": "list",
                        "ordered": false,
                        "start": null,
                        "spread": false,
                        "children": [
                          {
                            "type": "listItem",
                            "spread": false,
                            "checked": null,
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "When the map is zoomed out far enough that a single representation of the world does not fill the map's entire"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "container, there will be blank space beyond 180 and -180 degrees longitude."
                          }
                        ]
                      },
                      {
                        "type": "list",
                        "ordered": false,
                        "start": null,
                        "spread": false,
                        "children": [
                          {
                            "type": "listItem",
                            "spread": false,
                            "checked": null,
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "map and the other on the left edge of the map) at every zoom level."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.maxTileCacheSize",
                  "lineNumber": 62,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The maximum number of tiles stored in the tile cache for a given source. If omitted, the cache will be dynamically sized based on the current viewport."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "null"
                },
                {
                  "title": "param",
                  "name": "options.localIdeographFontFamily",
                  "lineNumber": 63,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Defines a CSS\nfont-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges.\nIn these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\nSet to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", to enable font settings from the map's style for these glyph ranges.\nThe purpose of this option is to avoid bandwidth-intensive glyph server requests. (See "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://maplibre.org/maplibre-gl-js-docs/example/local-ideographs",
                            "children": [
                              {
                                "type": "text",
                                "value": "Use locally generated ideographs"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ".)"
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'sans-serif'"
                },
                {
                  "title": "param",
                  "name": "options.transformRequest",
                  "lineNumber": 68,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\nExpected to return an object with a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "url"
                          },
                          {
                            "type": "text",
                            "value": " property and optionally "
                          },
                          {
                            "type": "inlineCode",
                            "value": "headers"
                          },
                          {
                            "type": "text",
                            "value": " and "
                          },
                          {
                            "type": "inlineCode",
                            "value": "credentials"
                          },
                          {
                            "type": "text",
                            "value": " properties."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "RequestTransformFunction"
                  },
                  "default": "null"
                },
                {
                  "title": "param",
                  "name": "options.collectResourceTiming",
                  "lineNumber": 70,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", Resource Timing API information will be collected for requests made by GeoJSON and Vector Tile web workers (this information is normally inaccessible from the main Javascript thread). Information will be returned in a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "resourceTiming"
                          },
                          {
                            "type": "text",
                            "value": " property of relevant "
                          },
                          {
                            "type": "inlineCode",
                            "value": "data"
                          },
                          {
                            "type": "text",
                            "value": " events."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.fadeDuration",
                  "lineNumber": 71,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds. This setting affects all symbol layers. This setting does not affect the duration of runtime styling transitions or raster tile cross-fading."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "300"
                },
                {
                  "title": "param",
                  "name": "options.crossSourceCollisions",
                  "lineNumber": 72,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", symbols from multiple sources can collide with each other during collision detection. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", collision detection is run separately for the symbols in each source."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.locale",
                  "lineNumber": 73,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A patch to apply to the default localization table for UI strings, e.g. control tooltips. The "
                          },
                          {
                            "type": "inlineCode",
                            "value": "locale"
                          },
                          {
                            "type": "text",
                            "value": " object maps namespaced UI string IDs to translated strings in the target language; see "
                          },
                          {
                            "type": "inlineCode",
                            "value": "src/ui/default_locale.js"
                          },
                          {
                            "type": "text",
                            "value": " for an example with all supported string IDs. The object may specify all UI strings (thereby adding support for a new translation) or only a subset of strings (thereby patching the default translation table)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "null"
                },
                {
                  "title": "param",
                  "name": "options.pixelRatio",
                  "lineNumber": 74,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The pixel ratio. The canvas' "
                          },
                          {
                            "type": "inlineCode",
                            "value": "width"
                          },
                          {
                            "type": "text",
                            "value": " attribute will be "
                          },
                          {
                            "type": "inlineCode",
                            "value": "container.clientWidth * pixelRatio"
                          },
                          {
                            "type": "text",
                            "value": " and its "
                          },
                          {
                            "type": "inlineCode",
                            "value": "height"
                          },
                          {
                            "type": "text",
                            "value": " attribute will be "
                          },
                          {
                            "type": "inlineCode",
                            "value": "container.clientHeight * pixelRatio"
                          },
                          {
                            "type": "text",
                            "value": ". Defaults to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "devicePixelRatio"
                          },
                          {
                            "type": "text",
                            "value": " if not specified."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/simple-map/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display a map"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "Map",
          "kind": "class",
          "path": [
            {
              "name": "Map",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds an "
                        },
                        {
                          "type": "link",
                          "url": "IControl",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "IControl"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " to the map, calling "
                        },
                        {
                          "type": "inlineCode",
                          "value": "control.onAdd(this)"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The {@link IControl} to add.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    },
                    "name": "control"
                  },
                  {
                    "title": "param",
                    "description": "position on the map to which the control will be added.\nValid values are `'top-left'`, `'top-right'`, `'bottom-left'`, and `'bottom-right'`. Defaults to `'top-right'`.",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "position"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Add zoom and rotation controls to the map.\nmap.addControl(new maplibregl.NavigationControl());",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Display map navigation controls](https://maplibre.org/maplibre-gl-js-docs/example/navigation/)",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 499,
                    "column": 4
                  },
                  "end": {
                    "line": 510,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 511,
                      "column": 4
                    },
                    "end": {
                      "line": 533,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L511-L533",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Add zoom and rotation controls to the map.\nmap.addControl(new maplibregl.NavigationControl());"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "control",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "link",
                              "url": "IControl",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "IControl"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " to add."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    }
                  },
                  {
                    "title": "param",
                    "name": "position",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "position on the map to which the control will be added.\nValid values are "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'top-left'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'top-right'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'bottom-left'"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'bottom-right'"
                            },
                            {
                              "type": "text",
                              "value": ". Defaults to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'top-right'"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/navigation/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display map navigation controls"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addControl",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "addControl",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#addControl"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Add an image to the style. This image can be displayed on the map like any other icon in the style's\nsprite using the image's ID with\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layout-symbol-icon-image",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "icon-image"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-background-background-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "background-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-fill-fill-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "fill-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\nor "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-line-line-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "line-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ".\nA "
                        },
                        {
                          "type": "link",
                          "url": "Map.event:error",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:error"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event will be fired if there is not enough space in the sprite to add this image."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the image.",
                    "lineNumber": 9,
                    "type": null,
                    "name": "id"
                  },
                  {
                    "title": "param",
                    "description": "The image as an `HTMLImageElement`, `ImageData`, `ImageBitmap` or object with `width`, `height`, and `data`\nproperties with the same format as `ImageData`.",
                    "lineNumber": 10,
                    "type": null,
                    "name": "image"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 12,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "The ratio of pixels in the image to physical pixels on the screen",
                    "lineNumber": 13,
                    "type": null,
                    "name": "options.pixelRatio"
                  },
                  {
                    "title": "param",
                    "description": "Whether the image should be interpreted as an SDF image",
                    "lineNumber": 14,
                    "type": null,
                    "name": "options.sdf"
                  },
                  {
                    "title": "param",
                    "description": "`[x1, y1, x2, y2]`  If `icon-text-fit` is used in a layer with this image, this option defines the part of the image that can be covered by the content in `text-field`.",
                    "lineNumber": 15,
                    "type": null,
                    "name": "options.content"
                  },
                  {
                    "title": "param",
                    "description": "`[[x1, x2], ...]` If `icon-text-fit` is used in a layer with this image, this option defines the part(s) of the image that can be stretched horizontally.",
                    "lineNumber": 16,
                    "type": null,
                    "name": "options.stretchX"
                  },
                  {
                    "title": "param",
                    "description": "`[[y1, y2], ...]` If `icon-text-fit` is used in a layer with this image, this option defines the part(s) of the image that can be stretched vertically.",
                    "lineNumber": 17,
                    "type": null,
                    "name": "options.stretchY"
                  },
                  {
                    "title": "example",
                    "description": "// If the style's sprite does not already contain an image with ID 'cat',\n// add the image 'cat-icon.png' to the style's sprite with the ID 'cat'.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/400px-Cat_silhouette.svg.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('cat')) map.addImage('cat', image);\n});\n\n\n// Add a stretchable image that can be used with `icon-text-fit`\n// In this example, the image is 600px wide by 400px high.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/8/89/Black_and_White_Boxed_%28bordered%29.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('border-image')) {\n     map.addImage('border-image', image, {\n         content: [16, 16, 300, 384], // place text over left half of image, avoiding the 16px border\n         stretchX: [[16, 584]], // stretch everything horizontally except the 16px border\n         stretchY: [[16, 384]], // stretch everything vertically except the 16px border\n     });\n   }\n});",
                    "lineNumber": 19
                  },
                  {
                    "title": "see",
                    "description": "Use `HTMLImageElement`: [Add an icon to the map](https://maplibre.org/maplibre-gl-js-docs/example/add-image/)",
                    "lineNumber": 42
                  },
                  {
                    "title": "see",
                    "description": "Use `ImageData`: [Add a generated icon to the map](https://maplibre.org/maplibre-gl-js-docs/example/add-image-generated/)",
                    "lineNumber": 43
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1647,
                    "column": 4
                  },
                  "end": {
                    "line": 1691,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1692,
                      "column": 4
                    },
                    "end": {
                      "line": 1734,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1692-L1734",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// If the style's sprite does not already contain an image with ID 'cat',\n// add the image 'cat-icon.png' to the style's sprite with the ID 'cat'.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/400px-Cat_silhouette.svg.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('cat')) map.addImage('cat', image);\n});\n\n\n// Add a stretchable image that can be used with `icon-text-fit`\n// In this example, the image is 600px wide by 400px high.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/8/89/Black_and_White_Boxed_%28bordered%29.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('border-image')) {\n     map.addImage('border-image', image, {\n         content: [16, 16, 300, 384], // place text over left half of image, avoiding the 16px border\n         stretchX: [[16, 584]], // stretch everything horizontally except the 16px border\n         stretchY: [[16, 384]], // stretch everything vertically except the 16px border\n     });\n   }\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the image."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "image",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The image as an "
                            },
                            {
                              "type": "inlineCode",
                              "value": "HTMLImageElement"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageData"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageBitmap"
                            },
                            {
                              "type": "text",
                              "value": " or object with "
                            },
                            {
                              "type": "inlineCode",
                              "value": "width"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "height"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "data"
                            },
                            {
                              "type": "text",
                              "value": "\nproperties with the same format as "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageData"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "HTMLImageElement"
                        },
                        {
                          "type": "NameExpression",
                          "name": "ImageBitmap"
                        },
                        {
                          "type": "NameExpression",
                          "name": "ImageData"
                        },
                        {
                          "type": "RecordType",
                          "fields": [
                            {
                              "type": "FieldType",
                              "key": "width",
                              "value": {
                                "type": "NameExpression",
                                "name": "number"
                              }
                            },
                            {
                              "type": "FieldType",
                              "key": "height",
                              "value": {
                                "type": "NameExpression",
                                "name": "number"
                              }
                            },
                            {
                              "type": "FieldType",
                              "key": "data",
                              "value": {
                                "type": "UnionType",
                                "elements": [
                                  {
                                    "type": "NameExpression",
                                    "name": "Uint8Array"
                                  },
                                  {
                                    "type": "NameExpression",
                                    "name": "Uint8ClampedArray"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        {
                          "type": "NameExpression",
                          "name": "StyleImageInterface"
                        }
                      ]
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.pixelRatio",
                        "lineNumber": 13,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The ratio of pixels in the image to physical pixels on the screen"
                                }
                              ]
                            }
                          ]
                        },
                        "default": "1"
                      },
                      {
                        "title": "param",
                        "name": "options.sdf",
                        "lineNumber": 14,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether the image should be interpreted as an SDF image"
                                }
                              ]
                            }
                          ]
                        },
                        "default": "false"
                      },
                      {
                        "title": "param",
                        "name": "options.stretchX",
                        "lineNumber": 16,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "[[x1, x2], ...]"
                                },
                                {
                                  "type": "text",
                                  "value": " If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "icon-text-fit"
                                },
                                {
                                  "type": "text",
                                  "value": " is used in a layer with this image, this option defines the part(s) of the image that can be stretched horizontally."
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.stretchY",
                        "lineNumber": 17,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "[[y1, y2], ...]"
                                },
                                {
                                  "type": "text",
                                  "value": " If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "icon-text-fit"
                                },
                                {
                                  "type": "text",
                                  "value": " is used in a layer with this image, this option defines the part(s) of the image that can be stretched vertically."
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.content",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "[x1, y1, x2, y2]"
                                },
                                {
                                  "type": "text",
                                  "value": "  If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "icon-text-fit"
                                },
                                {
                                  "type": "text",
                                  "value": " is used in a layer with this image, this option defines the part of the image that can be covered by the content in "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "text-field"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Partial"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "StyleImageMetadata"
                        }
                      ]
                    },
                    "default": "{}"
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Use "
                            },
                            {
                              "type": "inlineCode",
                              "value": "HTMLImageElement"
                            },
                            {
                              "type": "text",
                              "value": ": "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add an icon to the map"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Use "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageData"
                            },
                            {
                              "type": "text",
                              "value": ": "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image-generated/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add a generated icon to the map"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addImage",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "addImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#addImage"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layers",
                          "children": [
                            {
                              "type": "text",
                              "value": "MapLibre style layer"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "\nto the map's style."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "A layer defines how data from a specified source will be styled. Read more about layer types\nand available paint and layout properties in the "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layers",
                          "children": [
                            {
                              "type": "text",
                              "value": "MapLibre Style Specification"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The layer to add, conforming to either the MapLibre Style Specification's [layer definition](https://maplibre.org/maplibre-gl-js-docs/style-spec/#layers) or, less commonly, the {@link CustomLayerInterface} specification.\nThe MapLibre Style Specification's layer definition is appropriate for most layers.",
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        },
                        {
                          "type": "NameExpression",
                          "name": "CustomLayerInterface"
                        }
                      ]
                    },
                    "name": "layer"
                  },
                  {
                    "title": "param",
                    "description": "A unique identifer that you define.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layer.id"
                  },
                  {
                    "title": "param",
                    "description": "The type of layer (for example `fill` or `symbol`).\nA list of layer types is available in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#type).\n\n(This can also be `custom`. For more information, see {@link CustomLayerInterface}.)",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layer.type"
                  },
                  {
                    "title": "param",
                    "description": "The data source for the layer.\nReference a source that has _already been defined_ using the source's unique id.\nReference a _new source_ using a source object (as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/)) directly.\nThis is **required** for all `layer.type` options _except_ for `custom`.",
                    "lineNumber": 15,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "string"
                          },
                          {
                            "type": "NameExpression",
                            "name": "Object"
                          }
                        ]
                      }
                    },
                    "name": "layer.source"
                  },
                  {
                    "title": "param",
                    "description": "(optional) The name of the source layer within the specified `layer.source` to use for this style layer.\nThis is only applicable for vector tile sources and is **required** when `layer.source` is of the type `vector`.",
                    "lineNumber": 19,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "layer.sourceLayer"
                  },
                  {
                    "title": "param",
                    "description": "(optional) An expression specifying conditions on source features.\nOnly features that match the filter are displayed.\nThe MapLibre Style Specification includes more information on the limitations of the [`filter`](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter) parameter\nand a complete list of available [expressions](https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/).\nIf no filter is provided, all features in the source (or source layer for vector tilesets) will be displayed.",
                    "lineNumber": 21,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "array"
                      }
                    },
                    "name": "layer.filter"
                  },
                  {
                    "title": "param",
                    "description": "(optional) Paint properties for the layer.\nAvailable paint properties vary by `layer.type`.\nA full list of paint properties for each layer type is available in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/).\nIf no paint properties are specified, default values will be used.",
                    "lineNumber": 26,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "layer.paint"
                  },
                  {
                    "title": "param",
                    "description": "(optional) Layout properties for the layer.\nAvailable layout properties vary by `layer.type`.\nA full list of layout properties for each layer type is available in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/).\nIf no layout properties are specified, default values will be used.",
                    "lineNumber": 30,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "layer.layout"
                  },
                  {
                    "title": "param",
                    "description": "(optional) The maximum zoom level for the layer.\nAt zoom levels equal to or greater than the maxzoom, the layer will be hidden.\nThe value can be any number between `0` and `24` (inclusive).\nIf no maxzoom is provided, the layer will be visible at all zoom levels for which there are tiles available.",
                    "lineNumber": 34,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "layer.maxzoom"
                  },
                  {
                    "title": "param",
                    "description": "(optional) The minimum zoom level for the layer.\nAt zoom levels less than the minzoom, the layer will be hidden.\nThe value can be any number between `0` and `24` (inclusive).\nIf no minzoom is provided, the layer will be visible at all zoom levels for which there are tiles available.",
                    "lineNumber": 38,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "layer.minzoom"
                  },
                  {
                    "title": "param",
                    "description": "(optional) Arbitrary properties useful to track with the layer, but do not influence rendering.",
                    "lineNumber": 42,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "layer.metadata"
                  },
                  {
                    "title": "param",
                    "description": "This is only applicable for layers with the type `custom`.\nSee {@link CustomLayerInterface} for more information.",
                    "lineNumber": 43,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "layer.renderingMode"
                  },
                  {
                    "title": "param",
                    "description": "The ID of an existing layer to insert the new layer before,\nresulting in the new layer appearing visually beneath the existing layer.\nIf this argument is not specified, the layer will be appended to the end of the layers array\nand appear visually above all other layers.",
                    "lineNumber": 45,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "beforeId"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 50,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Add a circle layer with a vector source\nmap.addLayer({\n  id: 'points-of-interest',\n  source: {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n  },\n  'source-layer': 'poi_label',\n  type: 'circle',\n  paint: {\n    // MapLibre Style Specification paint properties\n  },\n  layout: {\n    // MapLibre Style Specification layout properties\n  }\n});",
                    "lineNumber": 52
                  },
                  {
                    "title": "example",
                    "description": "// Define a source before using it to create a new layer\nmap.addSource('state-data', {\n  type: 'geojson',\n  data: 'path/to/data.geojson'\n});\n\nmap.addLayer({\n  id: 'states',\n  // References the GeoJSON source defined above\n  // and does not require a `source-layer`\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n});",
                    "lineNumber": 70
                  },
                  {
                    "title": "example",
                    "description": "// Add a new symbol layer before an existing layer\nmap.addLayer({\n  id: 'states',\n  // References a source that's already been defined\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n// Add the layer before the existing `cities` layer\n}, 'cities');",
                    "lineNumber": 90
                  },
                  {
                    "title": "see",
                    "description": "[Create and style clusters](https://maplibre.org/maplibre-gl-js-docs/example/cluster/)",
                    "lineNumber": 105
                  },
                  {
                    "title": "see",
                    "description": "[Add a vector tile source](https://maplibre.org/maplibre-gl-js-docs/example/vector-source/)",
                    "lineNumber": 106
                  },
                  {
                    "title": "see",
                    "description": "[Add a WMS source](https://maplibre.org/maplibre-gl-js-docs/example/wms/)",
                    "lineNumber": 107
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1862,
                    "column": 4
                  },
                  "end": {
                    "line": 1970,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1971,
                      "column": 4
                    },
                    "end": {
                      "line": 1975,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1971-L1975",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Add a circle layer with a vector source\nmap.addLayer({\n  id: 'points-of-interest',\n  source: {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n  },\n  'source-layer': 'poi_label',\n  type: 'circle',\n  paint: {\n    // MapLibre Style Specification paint properties\n  },\n  layout: {\n    // MapLibre Style Specification layout properties\n  }\n});"
                  },
                  {
                    "description": "// Define a source before using it to create a new layer\nmap.addSource('state-data', {\n  type: 'geojson',\n  data: 'path/to/data.geojson'\n});\n\nmap.addLayer({\n  id: 'states',\n  // References the GeoJSON source defined above\n  // and does not require a `source-layer`\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n});"
                  },
                  {
                    "description": "// Add a new symbol layer before an existing layer\nmap.addLayer({\n  id: 'states',\n  // References a source that's already been defined\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n// Add the layer before the existing `cities` layer\n}, 'cities');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layer",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The layer to add, conforming to either the MapLibre Style Specification's "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layers",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "layer definition"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or, less commonly, the "
                            },
                            {
                              "type": "link",
                              "url": "CustomLayerInterface",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "CustomLayerInterface"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " specification.\nThe MapLibre Style Specification's layer definition is appropriate for most layers."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        },
                        {
                          "type": "NameExpression",
                          "name": "CustomLayerInterface"
                        }
                      ]
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "layer.id",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "A unique identifer that you define."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.type",
                        "lineNumber": 11,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The type of layer (for example "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "fill"
                                },
                                {
                                  "type": "text",
                                  "value": " or "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "symbol"
                                },
                                {
                                  "type": "text",
                                  "value": ").\nA list of layer types is available in the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#type",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "MapLibre Style Specification"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(This can also be "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "custom"
                                },
                                {
                                  "type": "text",
                                  "value": ". For more information, see "
                                },
                                {
                                  "type": "link",
                                  "url": "CustomLayerInterface",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "CustomLayerInterface"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ".)"
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.source",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The data source for the layer.\nReference a source that has "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "already been defined"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " using the source's unique id.\nReference a "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "new source"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " using a source object (as defined in the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "MapLibre Style Specification"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ") directly.\nThis is "
                                },
                                {
                                  "type": "strong",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "required"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for all "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "layer.type"
                                },
                                {
                                  "type": "text",
                                  "value": " options "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "except"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "custom"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "UnionType",
                            "elements": [
                              {
                                "type": "NameExpression",
                                "name": "string"
                              },
                              {
                                "type": "NameExpression",
                                "name": "Object"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.sourceLayer",
                        "lineNumber": 19,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) The name of the source layer within the specified "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "layer.source"
                                },
                                {
                                  "type": "text",
                                  "value": " to use for this style layer.\nThis is only applicable for vector tile sources and is "
                                },
                                {
                                  "type": "strong",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "required"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " when "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "layer.source"
                                },
                                {
                                  "type": "text",
                                  "value": " is of the type "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "vector"
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.filter",
                        "lineNumber": 21,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) An expression specifying conditions on source features.\nOnly features that match the filter are displayed.\nThe MapLibre Style Specification includes more information on the limitations of the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter",
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "filter"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " parameter\nand a complete list of available "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "expressions"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ".\nIf no filter is provided, all features in the source (or source layer for vector tilesets) will be displayed."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "array"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.paint",
                        "lineNumber": 26,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) Paint properties for the layer.\nAvailable paint properties vary by "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "layer.type"
                                },
                                {
                                  "type": "text",
                                  "value": ".\nA full list of paint properties for each layer type is available in the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "MapLibre Style Specification"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ".\nIf no paint properties are specified, default values will be used."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Object"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.layout",
                        "lineNumber": 30,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) Layout properties for the layer.\nAvailable layout properties vary by "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "layer.type"
                                },
                                {
                                  "type": "text",
                                  "value": ".\nA full list of layout properties for each layer type is available in the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "MapLibre Style Specification"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ".\nIf no layout properties are specified, default values will be used."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Object"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.maxzoom",
                        "lineNumber": 34,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) The maximum zoom level for the layer.\nAt zoom levels equal to or greater than the maxzoom, the layer will be hidden.\nThe value can be any number between "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "0"
                                },
                                {
                                  "type": "text",
                                  "value": " and "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "24"
                                },
                                {
                                  "type": "text",
                                  "value": " (inclusive).\nIf no maxzoom is provided, the layer will be visible at all zoom levels for which there are tiles available."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.minzoom",
                        "lineNumber": 38,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) The minimum zoom level for the layer.\nAt zoom levels less than the minzoom, the layer will be hidden.\nThe value can be any number between "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "0"
                                },
                                {
                                  "type": "text",
                                  "value": " and "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "24"
                                },
                                {
                                  "type": "text",
                                  "value": " (inclusive).\nIf no minzoom is provided, the layer will be visible at all zoom levels for which there are tiles available."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.metadata",
                        "lineNumber": 42,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) Arbitrary properties useful to track with the layer, but do not influence rendering."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Object"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "layer.renderingMode",
                        "lineNumber": 43,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "This is only applicable for layers with the type "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "custom"
                                },
                                {
                                  "type": "text",
                                  "value": ".\nSee "
                                },
                                {
                                  "type": "link",
                                  "url": "CustomLayerInterface",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "CustomLayerInterface"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for more information."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "param",
                    "name": "beforeId",
                    "lineNumber": 45,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of an existing layer to insert the new layer before,\nresulting in the new layer appearing visually beneath the existing layer.\nIf this argument is not specified, the layer will be appended to the end of the layers array\nand appear visually above all other layers."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/cluster/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create and style clusters"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/vector-source/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add a vector tile source"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/wms/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add a WMS source"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addLayer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "addLayer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#addLayer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a source to the map's style."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the source to add. Must not conflict with existing sources.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "param",
                    "description": "The source object, conforming to the\nMapLibre Style Specification's [source definition](https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources) or\n{@link CanvasSourceOptions}.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "source"
                  },
                  {
                    "title": "fires",
                    "description": "source.add",
                    "lineNumber": 7
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.addSource('my-data', {\n  type: 'vector',\n  url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});",
                    "lineNumber": 9
                  },
                  {
                    "title": "example",
                    "description": "map.addSource('my-data', {\n  \"type\": \"geojson\",\n  \"data\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-77.0323, 38.9131]\n    },\n    \"properties\": {\n      \"title\": \"Mapbox DC\",\n      \"marker-symbol\": \"monument\"\n    }\n  }\n});",
                    "lineNumber": 14
                  },
                  {
                    "title": "see",
                    "description": "GeoJSON source: [Add live realtime data](https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/)",
                    "lineNumber": 29
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1519,
                    "column": 4
                  },
                  "end": {
                    "line": 1549,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1550,
                      "column": 4
                    },
                    "end": {
                      "line": 1554,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1550-L1554",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.addSource('my-data', {\n  type: 'vector',\n  url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});"
                  },
                  {
                    "description": "map.addSource('my-data', {\n  \"type\": \"geojson\",\n  \"data\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-77.0323, 38.9131]\n    },\n    \"properties\": {\n      \"title\": \"Mapbox DC\",\n      \"marker-symbol\": \"monument\"\n    }\n  }\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the source to add. Must not conflict with existing sources."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "source",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The source object, conforming to the\nMapLibre Style Specification's "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "source definition"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or\n"
                            },
                            {
                              "type": "link",
                              "url": "CanvasSourceOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "CanvasSourceOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "GeoJSON source: "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add live realtime data"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addSource",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "addSource",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#addSource"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether all tiles in the viewport from all sources on\nthe style are loaded."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "A Boolean indicating whether all tiles are loaded.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var tilesLoaded = map.areTilesLoaded();",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1574,
                    "column": 4
                  },
                  "end": {
                    "line": 1581,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1583,
                      "column": 4
                    },
                    "end": {
                      "line": 1594,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1583-L1594",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var tilesLoaded = map.areTilesLoaded();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A Boolean indicating whether all tiles are loaded."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "areTilesLoaded",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "areTilesLoaded",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#areTilesLoaded"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "BoxZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "BoxZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which implements zooming using a drag gesture with the Shift key pressed.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "boxZoom"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "BoxZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "BoxZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 315,
                    "column": 4
                  },
                  "end": {
                    "line": 318,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 319,
                      "column": 4
                    },
                    "end": {
                      "line": 319,
                      "column": 28
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L319-L319",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "boxZoom",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "BoxZoomHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "boxZoom",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#boxZoom"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 1
                  },
                  {
                    "title": "param",
                    "description": "Calculate the center for these bounds in the viewport and use\n     the highest zoom level up to and including `Map#getMaxZoom()` that fits\n     in the viewport. LngLatBounds represent a box that is always axis-aligned with bearing 0.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    },
                    "name": "bounds"
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 5,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "The amount of padding in pixels to add to the given bounds.",
                    "lineNumber": 6,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "number"
                          },
                          {
                            "type": "NameExpression",
                            "name": "PaddingOptions"
                          }
                        ]
                      }
                    },
                    "name": "options.padding"
                  },
                  {
                    "title": "param",
                    "description": "Desired map bearing at end of animation, in degrees.",
                    "lineNumber": 7,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.bearing",
                    "default": "0"
                  },
                  {
                    "title": "param",
                    "description": "The center of the given bounds relative to the map's center, measured in pixels.",
                    "lineNumber": 8,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "PointLike"
                      }
                    },
                    "name": "options.offset",
                    "default": "[0,0]"
                  },
                  {
                    "title": "param",
                    "description": "The maximum zoom level to allow when the camera would transition to the specified bounds.",
                    "lineNumber": 9,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.maxZoom"
                  },
                  {
                    "title": "returns",
                    "description": "If map is able to fit to provided bounds, returns `center`, `zoom`, and `bearing`.\n     If map is unable to fit, method will warn and return undefined.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "CenterZoomBearing"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var bbox = [[-79, 43], [-73, 45]];\nvar newCameraTransform = map.cameraForBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 489,
                    "column": 4
                  },
                  "end": {
                    "line": 506,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 507,
                      "column": 4
                    },
                    "end": {
                      "line": 511,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L507-L511",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var bbox = [[-79, 43], [-73, 45]];\nvar newCameraTransform = map.cameraForBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "bounds",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Calculate the center for these bounds in the viewport and use\nthe highest zoom level up to and including "
                            },
                            {
                              "type": "inlineCode",
                              "value": "Map#getMaxZoom()"
                            },
                            {
                              "type": "text",
                              "value": " that fits\nin the viewport. LngLatBounds represent a box that is always axis-aligned with bearing 0."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.padding",
                        "lineNumber": 6,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The amount of padding in pixels to add to the given bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "UnionType",
                            "elements": [
                              {
                                "type": "NameExpression",
                                "name": "number"
                              },
                              {
                                "type": "NameExpression",
                                "name": "PaddingOptions"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.bearing",
                        "lineNumber": 7,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Desired map bearing at end of animation, in degrees."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "0"
                      },
                      {
                        "title": "param",
                        "name": "options.offset",
                        "lineNumber": 8,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The center of the given bounds relative to the map's center, measured in pixels."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "PointLike"
                        },
                        "default": "[0,0]"
                      },
                      {
                        "title": "param",
                        "name": "options.maxZoom",
                        "lineNumber": 9,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The maximum zoom level to allow when the camera would transition to the specified bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      }
                    ],
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "CameraForBoundsOptions"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "If map is able to fit to provided bounds, returns "
                            },
                            {
                              "type": "inlineCode",
                              "value": "center"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "zoom"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "bearing"
                            },
                            {
                              "type": "text",
                              "value": ".\nIf map is unable to fit, method will warn and return undefined."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "CenterZoomBearing"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "cameraForBounds",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "cameraForBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#cameraForBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "DoubleClickZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DoubleClickZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which allows the user to zoom by double clicking.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "doubleClickZoom"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "DoubleClickZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DoubleClickZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 340,
                    "column": 4
                  },
                  "end": {
                    "line": 343,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 344,
                      "column": 4
                    },
                    "end": {
                      "line": 344,
                      "column": 44
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L344-L344",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "doubleClickZoom",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "DoubleClickZoomHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "doubleClickZoom",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#doubleClickZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "DragPanHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragPanHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which implements dragging the map with a mouse or touch gesture.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dragPan"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "DragPanHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragPanHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 328,
                    "column": 4
                  },
                  "end": {
                    "line": 331,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 332,
                      "column": 4
                    },
                    "end": {
                      "line": 332,
                      "column": 28
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L332-L332",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "dragPan",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "DragPanHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dragPan",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#dragPan"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "DragRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which implements rotating the map while dragging with the right\nmouse button or with the Control key pressed. Find more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dragRotate"
                        },
                        {
                          "type": "text",
                          "value": "\nin the "
                        },
                        {
                          "type": "link",
                          "url": "DragRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 321,
                    "column": 4
                  },
                  "end": {
                    "line": 325,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 326,
                      "column": 4
                    },
                    "end": {
                      "line": 326,
                      "column": 34
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L326-L326",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "dragRotate",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "DragRotateHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dragRotate",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#dragRotate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Changes any combination of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "center"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "zoom"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "bearing"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "pitch"
                        },
                        {
                          "type": "text",
                          "value": ", and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "padding"
                        },
                        {
                          "type": "text",
                          "value": " with an animated transition\nbetween old and new values. The map will retain its current values for any\ndetails not specified in "
                        },
                        {
                          "type": "inlineCode",
                          "value": "options"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Note: The transition will happen instantly if the user has enabled\nthe "
                        },
                        {
                          "type": "inlineCode",
                          "value": "reduced motion"
                        },
                        {
                          "type": "text",
                          "value": " accesibility feature enabled in their operating system,\nunless "
                        },
                        {
                          "type": "inlineCode",
                          "value": "options"
                        },
                        {
                          "type": "text",
                          "value": " includes "
                        },
                        {
                          "type": "inlineCode",
                          "value": "essential: true"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 9
                  },
                  {
                    "title": "param",
                    "description": "Options describing the destination and animation of the transition.\n           Accepts {@link CameraOptions} and {@link AnimationOptions}.",
                    "lineNumber": 10,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 12,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 13
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 14
                  },
                  {
                    "title": "fires",
                    "description": "pitchstart",
                    "lineNumber": 15
                  },
                  {
                    "title": "fires",
                    "description": "rotate",
                    "lineNumber": 16
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 17
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 18
                  },
                  {
                    "title": "fires",
                    "description": "pitch",
                    "lineNumber": 19
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 20
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 21
                  },
                  {
                    "title": "fires",
                    "description": "pitchend",
                    "lineNumber": 22
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 23,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "see",
                    "description": "[Navigate the map with game-like controls](https://maplibre.org/maplibre-gl-js-docs/example/game-controls/)",
                    "lineNumber": 24
                  }
                ],
                "loc": {
                  "start": {
                    "line": 778,
                    "column": 4
                  },
                  "end": {
                    "line": 803,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 804,
                      "column": 4
                    },
                    "end": {
                      "line": 897,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L804-L897",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options describing the destination and animation of the transition.\nAccepts "
                            },
                            {
                              "type": "link",
                              "url": "CameraOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "CameraOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "link",
                              "url": "AnimationOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "AnimationOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "AllLiteral"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/game-controls/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Navigate the map with game-like controls"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "easeTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "easeTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#easeTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pans and zooms the map to contain its visible area within the specified geographical bounds.\nThis function will also reset the map's bearing to 0 if bearing is nonzero."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 4
                  },
                  {
                    "title": "param",
                    "description": "Center these bounds in the viewport and use the highest\n     zoom level up to and including `Map#getMaxZoom()` that fits them in the viewport.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "bounds"
                  },
                  {
                    "title": "param",
                    "description": "Options supports all properties from {@link AnimationOptions} and {@link CameraOptions} in addition to the fields below.",
                    "lineNumber": 7,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "FitBoundsOptions"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "The amount of padding in pixels to add to the given bounds.",
                    "lineNumber": 8,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "number"
                          },
                          {
                            "type": "NameExpression",
                            "name": "PaddingOptions"
                          }
                        ]
                      }
                    },
                    "name": "options.padding"
                  },
                  {
                    "title": "param",
                    "description": "If `true`, the map transitions using\n    {@link Map#easeTo}. If `false`, the map transitions using {@link Map#flyTo}. See\n    those functions and {@link AnimationOptions} for information about options available.",
                    "lineNumber": 9,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.linear",
                    "default": "false"
                  },
                  {
                    "title": "param",
                    "description": "An easing function for the animated transition. See {@link AnimationOptions}.",
                    "lineNumber": 12,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Function"
                      }
                    },
                    "name": "options.easing"
                  },
                  {
                    "title": "param",
                    "description": "The center of the given bounds relative to the map's center, measured in pixels.",
                    "lineNumber": 13,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "PointLike"
                      }
                    },
                    "name": "options.offset",
                    "default": "[0,0]"
                  },
                  {
                    "title": "param",
                    "description": "The maximum zoom level to allow when the map view transitions to the specified bounds.",
                    "lineNumber": 14,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.maxZoom"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 15,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 16
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 17
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 18,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});",
                    "lineNumber": 19
                  },
                  {
                    "title": "see",
                    "description": "[Fit a map to a bounding box](https://maplibre.org/maplibre-gl-js-docs/example/fitbounds/)",
                    "lineNumber": 24
                  }
                ],
                "loc": {
                  "start": {
                    "line": 605,
                    "column": 4
                  },
                  "end": {
                    "line": 630,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 631,
                      "column": 4
                    },
                    "end": {
                      "line": 636,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L631-L636",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "bounds",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Center these bounds in the viewport and use the highest\nzoom level up to and including "
                            },
                            {
                              "type": "inlineCode",
                              "value": "Map#getMaxZoom()"
                            },
                            {
                              "type": "text",
                              "value": " that fits them in the viewport."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options supports all properties from "
                            },
                            {
                              "type": "link",
                              "url": "AnimationOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "AnimationOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "link",
                              "url": "CameraOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "CameraOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " in addition to the fields below."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "FitBoundsOptions"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.padding",
                        "lineNumber": 8,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The amount of padding in pixels to add to the given bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "UnionType",
                            "elements": [
                              {
                                "type": "NameExpression",
                                "name": "number"
                              },
                              {
                                "type": "NameExpression",
                                "name": "PaddingOptions"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.linear",
                        "lineNumber": 9,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "true"
                                },
                                {
                                  "type": "text",
                                  "value": ", the map transitions using\n"
                                },
                                {
                                  "type": "link",
                                  "url": "Map#easeTo",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Map#easeTo"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "false"
                                },
                                {
                                  "type": "text",
                                  "value": ", the map transitions using "
                                },
                                {
                                  "type": "link",
                                  "url": "Map#flyTo",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Map#flyTo"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". See\nthose functions and "
                                },
                                {
                                  "type": "link",
                                  "url": "AnimationOptions",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "AnimationOptions"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for information about options available."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "false"
                      },
                      {
                        "title": "param",
                        "name": "options.easing",
                        "lineNumber": 12,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "An easing function for the animated transition. See "
                                },
                                {
                                  "type": "link",
                                  "url": "AnimationOptions",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "AnimationOptions"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Function"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.offset",
                        "lineNumber": 13,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The center of the given bounds relative to the map's center, measured in pixels."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "PointLike"
                        },
                        "default": "[0,0]"
                      },
                      {
                        "title": "param",
                        "name": "options.maxZoom",
                        "lineNumber": 14,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The maximum zoom level to allow when the map view transitions to the specified bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 15,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/fitbounds/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Fit a map to a bounding box"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "fitBounds",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "fitBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#fitBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pans, rotates and zooms the map to to fit the box made by points p0 and p1\nonce the map is rotated to the specified bearing. To zoom without rotating,\npass in the current map bearing."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 5
                  },
                  {
                    "title": "param",
                    "description": "First point on screen, in pixel coordinates",
                    "lineNumber": 6,
                    "type": null,
                    "name": "p0"
                  },
                  {
                    "title": "param",
                    "description": "Second point on screen, in pixel coordinates",
                    "lineNumber": 7,
                    "type": null,
                    "name": "p1"
                  },
                  {
                    "title": "param",
                    "description": "Desired map bearing at end of animation, in degrees",
                    "lineNumber": 8,
                    "type": null,
                    "name": "bearing"
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 9,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "The amount of padding in pixels to add to the given bounds.",
                    "lineNumber": 10,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "number"
                          },
                          {
                            "type": "NameExpression",
                            "name": "PaddingOptions"
                          }
                        ]
                      }
                    },
                    "name": "options.padding"
                  },
                  {
                    "title": "param",
                    "description": "If `true`, the map transitions using\n    {@link Map#easeTo}. If `false`, the map transitions using {@link Map#flyTo}. See\n    those functions and {@link AnimationOptions} for information about options available.",
                    "lineNumber": 11,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.linear",
                    "default": "false"
                  },
                  {
                    "title": "param",
                    "description": "An easing function for the animated transition. See {@link AnimationOptions}.",
                    "lineNumber": 14,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Function"
                      }
                    },
                    "name": "options.easing"
                  },
                  {
                    "title": "param",
                    "description": "The center of the given bounds relative to the map's center, measured in pixels.",
                    "lineNumber": 15,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "PointLike"
                      }
                    },
                    "name": "options.offset",
                    "default": "[0,0]"
                  },
                  {
                    "title": "param",
                    "description": "The maximum zoom level to allow when the map view transitions to the specified bounds.",
                    "lineNumber": 16,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.maxZoom"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 17,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 18
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 19
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 20,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var p0 = [220, 400];\nvar p1 = [500, 900];\nmap.fitScreenCoordinates(p0, p1, map.getBearing(), {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});",
                    "lineNumber": 21
                  },
                  {
                    "title": "see",
                    "description": "Used by {@link BoxZoomHandler}",
                    "lineNumber": 27
                  }
                ],
                "loc": {
                  "start": {
                    "line": 638,
                    "column": 4
                  },
                  "end": {
                    "line": 666,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 667,
                      "column": 4
                    },
                    "end": {
                      "line": 676,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L667-L676",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var p0 = [220, 400];\nvar p1 = [500, 900];\nmap.fitScreenCoordinates(p0, p1, map.getBearing(), {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "p0",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "First point on screen, in pixel coordinates"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "p1",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Second point on screen, in pixel coordinates"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "bearing",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Desired map bearing at end of animation, in degrees"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.padding",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The amount of padding in pixels to add to the given bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "UnionType",
                            "elements": [
                              {
                                "type": "NameExpression",
                                "name": "number"
                              },
                              {
                                "type": "NameExpression",
                                "name": "PaddingOptions"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.linear",
                        "lineNumber": 11,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "true"
                                },
                                {
                                  "type": "text",
                                  "value": ", the map transitions using\n"
                                },
                                {
                                  "type": "link",
                                  "url": "Map#easeTo",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Map#easeTo"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "false"
                                },
                                {
                                  "type": "text",
                                  "value": ", the map transitions using "
                                },
                                {
                                  "type": "link",
                                  "url": "Map#flyTo",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Map#flyTo"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". See\nthose functions and "
                                },
                                {
                                  "type": "link",
                                  "url": "AnimationOptions",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "AnimationOptions"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for information about options available."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "false"
                      },
                      {
                        "title": "param",
                        "name": "options.easing",
                        "lineNumber": 14,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "An easing function for the animated transition. See "
                                },
                                {
                                  "type": "link",
                                  "url": "AnimationOptions",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "AnimationOptions"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Function"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.offset",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The center of the given bounds relative to the map's center, measured in pixels."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "PointLike"
                        },
                        "default": "[0,0]"
                      },
                      {
                        "title": "param",
                        "name": "options.maxZoom",
                        "lineNumber": 16,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The maximum zoom level to allow when the map view transitions to the specified bounds."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      }
                    ],
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "FitBoundsOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 17,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Used by "
                            },
                            {
                              "type": "link",
                              "url": "BoxZoomHandler",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "BoxZoomHandler"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "fitScreenCoordinates",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "fitScreenCoordinates",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#fitScreenCoordinates"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Changes any combination of center, zoom, bearing, and pitch, animating the transition along a curve that\nevokes flight. The animation seamlessly incorporates zooming and panning to help\nthe user maintain her bearings even after traversing a great distance."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Note: The animation will be skipped, and this will behave equivalently to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo"
                        },
                        {
                          "type": "text",
                          "value": "\nif the user has the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "reduced motion"
                        },
                        {
                          "type": "text",
                          "value": " accesibility feature enabled in their operating system,\nunless 'options' includes "
                        },
                        {
                          "type": "inlineCode",
                          "value": "essential: true"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 9
                  },
                  {
                    "title": "param",
                    "description": "Options describing the destination and animation of the transition.\n    Accepts {@link CameraOptions}, {@link AnimationOptions},\n    and the following additional options.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "FlyToOptions"
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "The zooming \"curve\" that will occur along the\n    flight path. A high value maximizes zooming for an exaggerated animation, while a low\n    value minimizes zooming for an effect closer to {@link Map#easeTo}. 1.42 is the average\n    value selected by participants in the user study discussed in\n    [van Wijk (2003)](https://www.win.tue.nl/~vanwijk/zoompan.pdf). A value of\n    `Math.pow(6, 0.25)` would be equivalent to the root mean squared average velocity. A\n    value of 1 would produce a circular motion.",
                    "lineNumber": 13,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.curve",
                    "default": "1.42"
                  },
                  {
                    "title": "param",
                    "description": "The zero-based zoom level at the peak of the flight path. If\n    `options.curve` is specified, this option is ignored.",
                    "lineNumber": 20,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.minZoom"
                  },
                  {
                    "title": "param",
                    "description": "The average speed of the animation defined in relation to\n    `options.curve`. A speed of 1.2 means that the map appears to move along the flight path\n    by 1.2 times `options.curve` screenfuls every second. A _screenful_ is the map's visible span.\n    It does not correspond to a fixed physical distance, but varies by zoom level.",
                    "lineNumber": 22,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.speed",
                    "default": "1.2"
                  },
                  {
                    "title": "param",
                    "description": "The average speed of the animation measured in screenfuls\n    per second, assuming a linear timing curve. If `options.speed` is specified, this option is ignored.",
                    "lineNumber": 26,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.screenSpeed"
                  },
                  {
                    "title": "param",
                    "description": "The animation's maximum duration, measured in milliseconds.\n    If duration exceeds maximum duration, it resets to 0.",
                    "lineNumber": 28,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.maxDuration"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 30,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 31
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 32
                  },
                  {
                    "title": "fires",
                    "description": "pitchstart",
                    "lineNumber": 33
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 34
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 35
                  },
                  {
                    "title": "fires",
                    "description": "rotate",
                    "lineNumber": 36
                  },
                  {
                    "title": "fires",
                    "description": "pitch",
                    "lineNumber": 37
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 38
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 39
                  },
                  {
                    "title": "fires",
                    "description": "pitchend",
                    "lineNumber": 40
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 41,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// fly with default options to null island\nmap.flyTo({center: [0, 0], zoom: 9});\n// using flyTo options\nmap.flyTo({\n  center: [0, 0],\n  zoom: 9,\n  speed: 0.2,\n  curve: 1,\n  easing(t) {\n    return t;\n  }\n});",
                    "lineNumber": 42
                  },
                  {
                    "title": "see",
                    "description": "[Fly to a location](https://maplibre.org/maplibre-gl-js-docs/example/flyto/)",
                    "lineNumber": 55
                  },
                  {
                    "title": "see",
                    "description": "[Slowly fly to a location](https://maplibre.org/maplibre-gl-js-docs/example/flyto-options/)",
                    "lineNumber": 56
                  },
                  {
                    "title": "see",
                    "description": "[Fly to a location based on scroll position](https://maplibre.org/maplibre-gl-js-docs/example/scroll-fly-to/)",
                    "lineNumber": 57
                  }
                ],
                "loc": {
                  "start": {
                    "line": 958,
                    "column": 4
                  },
                  "end": {
                    "line": 1016,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1017,
                      "column": 4
                    },
                    "end": {
                      "line": 1173,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L1017-L1173",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// fly with default options to null island\nmap.flyTo({center: [0, 0], zoom: 9});\n// using flyTo options\nmap.flyTo({\n  center: [0, 0],\n  zoom: 9,\n  speed: 0.2,\n  curve: 1,\n  easing(t) {\n    return t;\n  }\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options describing the destination and animation of the transition.\nAccepts "
                            },
                            {
                              "type": "link",
                              "url": "CameraOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "CameraOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "link",
                              "url": "AnimationOptions",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "AnimationOptions"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ",\nand the following additional options."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "FlyToOptions"
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.curve",
                        "lineNumber": 13,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The zooming \"curve\" that will occur along the\nflight path. A high value maximizes zooming for an exaggerated animation, while a low\nvalue minimizes zooming for an effect closer to "
                                },
                                {
                                  "type": "link",
                                  "url": "Map#easeTo",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Map#easeTo"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". 1.42 is the average\nvalue selected by participants in the user study discussed in\n"
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://www.win.tue.nl/~vanwijk/zoompan.pdf",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "van Wijk (2003)"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": ". A value of\n"
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "Math.pow(6, 0.25)"
                                },
                                {
                                  "type": "text",
                                  "value": " would be equivalent to the root mean squared average velocity. A\nvalue of 1 would produce a circular motion."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "1.42"
                      },
                      {
                        "title": "param",
                        "name": "options.minZoom",
                        "lineNumber": 20,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The zero-based zoom level at the peak of the flight path. If\n"
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "options.curve"
                                },
                                {
                                  "type": "text",
                                  "value": " is specified, this option is ignored."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.speed",
                        "lineNumber": 22,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The average speed of the animation defined in relation to\n"
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "options.curve"
                                },
                                {
                                  "type": "text",
                                  "value": ". A speed of 1.2 means that the map appears to move along the flight path\nby 1.2 times "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "options.curve"
                                },
                                {
                                  "type": "text",
                                  "value": " screenfuls every second. A "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "screenful"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " is the map's visible span.\nIt does not correspond to a fixed physical distance, but varies by zoom level."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "1.2"
                      },
                      {
                        "title": "param",
                        "name": "options.screenSpeed",
                        "lineNumber": 26,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The average speed of the animation measured in screenfuls\nper second, assuming a linear timing curve. If "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "options.speed"
                                },
                                {
                                  "type": "text",
                                  "value": " is specified, this option is ignored."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.maxDuration",
                        "lineNumber": 28,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The animation's maximum duration, measured in milliseconds.\nIf duration exceeds maximum duration, it resets to 0."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "number"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 30,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/flyto/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Fly to a location"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/flyto-options/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Slowly fly to a location"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/scroll-fly-to/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Fly to a location based on scroll position"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "flyTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "flyTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#flyTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's current bearing. The bearing is the compass direction that is \"up\"; for example, a bearing\nof 90° orients the map so that east is up."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 4
                  },
                  {
                    "title": "returns",
                    "description": "The map's current bearing.",
                    "lineNumber": 5,
                    "type": null
                  },
                  {
                    "title": "see",
                    "description": "[Navigate the map with game-like controls](https://maplibre.org/maplibre-gl-js-docs/example/game-controls/)",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 336,
                    "column": 4
                  },
                  "end": {
                    "line": 343,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 344,
                      "column": 4
                    },
                    "end": {
                      "line": 344,
                      "column": 59
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L344-L344",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's current bearing."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/game-controls/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Navigate the map with game-like controls"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "getBearing",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getBearing",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getBearing"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not\nan axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The geographical bounds of the map as {@link LngLatBounds}.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var bounds = map.getBounds();",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 640,
                    "column": 4
                  },
                  "end": {
                    "line": 646,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 647,
                      "column": 4
                    },
                    "end": {
                      "line": 649,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L647-L649",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var bounds = map.getBounds();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The geographical bounds of the map as "
                            },
                            {
                              "type": "link",
                              "url": "LngLatBounds",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLatBounds"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getBounds",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "<canvas>"
                        },
                        {
                          "type": "text",
                          "value": " element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The map's `<canvas>` element.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLCanvasElement"
                    }
                  },
                  {
                    "title": "see",
                    "description": "[Measure distances](https://maplibre.org/maplibre-gl-js-docs/example/measure/)",
                    "lineNumber": 4
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on hover](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
                    "lineNumber": 5
                  },
                  {
                    "title": "see",
                    "description": "[Center the map on a clicked symbol](https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/)",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2335,
                    "column": 4
                  },
                  "end": {
                    "line": 2342,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2343,
                      "column": 4
                    },
                    "end": {
                      "line": 2345,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2343-L2345",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<canvas>"
                            },
                            {
                              "type": "text",
                              "value": " element."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLCanvasElement"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/measure/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Measure distances"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on hover"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Center the map on a clicked symbol"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getCanvas",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getCanvas",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getCanvas"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the HTML element containing the map's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "<canvas>"
                        },
                        {
                          "type": "text",
                          "value": " element."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If you want to add non-GL overlays to the map, you should append them to this element."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This is the element to which event bindings for map interactivity (such as panning and zooming) are\nattached. It will receive bubbled events from child elements such as the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "<canvas>"
                        },
                        {
                          "type": "text",
                          "value": ", but not from\nmap controls."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The container of the map's `<canvas>`.",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2319,
                    "column": 4
                  },
                  "end": {
                    "line": 2330,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2331,
                      "column": 4
                    },
                    "end": {
                      "line": 2333,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2331-L2333",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The container of the map's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "<canvas>"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getCanvasContainer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getCanvasContainer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getCanvasContainer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's geographical centerpoint."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "The map's geographical centerpoint.",
                    "lineNumber": 4,
                    "type": null
                  },
                  {
                    "title": "example",
                    "description": "// return a LngLat object such as {lng: 0, lat: 0}\nvar center = map.getCenter();\n// access longitude and latitude values directly\nvar {lng, lat} = map.getCenter();",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 162,
                    "column": 4
                  },
                  "end": {
                    "line": 172,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 173,
                      "column": 4
                    },
                    "end": {
                      "line": 173,
                      "column": 100
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L173-L173",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// return a LngLat object such as {lng: 0, lat: 0}\nvar center = map.getCenter();\n// access longitude and latitude values directly\nvar {lng, lat} = map.getCenter();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's geographical centerpoint."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "getCenter",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getCenter",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getCenter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's containing HTML element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The map's container.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2310,
                    "column": 4
                  },
                  "end": {
                    "line": 2314,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2315,
                      "column": 4
                    },
                    "end": {
                      "line": 2317,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2315-L2317",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's container."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getContainer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getContainer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getContainer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Gets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " of a feature.\nA feature's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " is a set of user-defined key-value pairs that are assigned to a feature at runtime.\nFeatures are identified by their "
                        },
                        {
                          "type": "inlineCode",
                          "value": "feature.id"
                        },
                        {
                          "type": "text",
                          "value": " attribute, which can be any number or string."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "emphasis",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note: To access the values in a feature's state object for the purposes of styling the feature, use the "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/#feature-state",
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "feature-state"
                                },
                                {
                                  "type": "text",
                                  "value": " expression"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Feature identifier. Feature objects returned from\n{@link Map#queryRenderedFeatures} or event handlers can be used as feature identifiers.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "feature"
                  },
                  {
                    "title": "param",
                    "description": "Unique id of the feature.",
                    "lineNumber": 9,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    },
                    "name": "feature.id"
                  },
                  {
                    "title": "param",
                    "description": "The id of the vector or GeoJSON source for the feature.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "feature.source"
                  },
                  {
                    "title": "param",
                    "description": "(optional) *For vector tile sources, `sourceLayer` is required.*",
                    "lineNumber": 11,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "feature.sourceLayer"
                  },
                  {
                    "title": "returns",
                    "description": "The state of the feature: a set of key-value pairs that was assigned to the feature at runtime.",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// When the mouse moves over the `my-layer` layer,\n// get the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length > 0) {\n    map.getFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id\n    });\n  }\n});",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2277,
                    "column": 4
                  },
                  "end": {
                    "line": 2305,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2306,
                      "column": 4
                    },
                    "end": {
                      "line": 2308,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2306-L2308",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// When the mouse moves over the `my-layer` layer,\n// get the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length > 0) {\n    map.getFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id\n    });\n  }\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "feature",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Feature identifier. Feature objects returned from\n"
                            },
                            {
                              "type": "link",
                              "url": "Map#queryRenderedFeatures",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Map#queryRenderedFeatures"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or event handlers can be used as feature identifiers."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "feature.id",
                        "lineNumber": 9,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Unique id of the feature."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "UnionType",
                          "elements": [
                            {
                              "type": "NameExpression",
                              "name": "string"
                            },
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      },
                      {
                        "title": "param",
                        "name": "feature.source",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The id of the vector or GeoJSON source for the feature."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      },
                      {
                        "title": "param",
                        "name": "feature.sourceLayer",
                        "lineNumber": 11,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "For vector tile sources, "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "sourceLayer"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is required."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The state of the feature: a set of key-value pairs that was assigned to the feature at runtime."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getFeatureState",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getFeatureState",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getFeatureState"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the filter applied to the specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the style layer whose filter to get.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "returns",
                    "description": "The layer's filter.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Array"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2088,
                    "column": 4
                  },
                  "end": {
                    "line": 2093,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2094,
                      "column": 4
                    },
                    "end": {
                      "line": 2096,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2094-L2096",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the style layer whose filter to get."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The layer's filter."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Array"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getFilter",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getFilter",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getFilter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the layer with the specified ID in the map's style."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to get.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "returns",
                    "description": "The layer with the specified ID, or `undefined`\n  if the ID corresponds to no existing layers.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "StyleLayer"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var stateDataLayer = map.getLayer('state-data');",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Filter symbols by toggling a list](https://maplibre.org/maplibre-gl-js-docs/example/filter-markers/)",
                    "lineNumber": 10
                  },
                  {
                    "title": "see",
                    "description": "[Filter symbols by text input](https://maplibre.org/maplibre-gl-js-docs/example/filter-markers-by-input/)",
                    "lineNumber": 11
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2011,
                    "column": 4
                  },
                  "end": {
                    "line": 2023,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2024,
                      "column": 4
                    },
                    "end": {
                      "line": 2026,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2024-L2026",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var stateDataLayer = map.getLayer('state-data');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to get."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The layer with the specified ID, or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": "\nif the ID corresponds to no existing layers."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "StyleLayer"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/filter-markers/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Filter symbols by toggling a list"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/filter-markers-by-input/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Filter symbols by text input"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getLayer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getLayer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getLayer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the value of a layout property in the specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to get the layout property from.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The name of the layout property to get.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "name"
                  },
                  {
                    "title": "returns",
                    "description": "The value of the specified layout property.",
                    "lineNumber": 5,
                    "type": {
                      "type": "AllLiteral"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2146,
                    "column": 4
                  },
                  "end": {
                    "line": 2152,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2153,
                      "column": 4
                    },
                    "end": {
                      "line": 2155,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2153-L2155",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to get the layout property from."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "name",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The name of the layout property to get."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the specified layout property."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "AllLiteral"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getLayoutProperty",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getLayoutProperty",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getLayoutProperty"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the value of the light object."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "light Light properties of the style.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2173,
                    "column": 4
                  },
                  "end": {
                    "line": 2177,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2178,
                      "column": 4
                    },
                    "end": {
                      "line": 2180,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2178-L2180",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "light Light properties of the style."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getLight",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getLight",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getLight"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the maximum geographical bounds the map is constrained to, or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "null"
                        },
                        {
                          "type": "text",
                          "value": " if none set."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The map object.",
                    "lineNumber": 2,
                    "type": null
                  },
                  {
                    "title": "example",
                    "description": "var maxBounds = map.getMaxBounds();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 651,
                    "column": 4
                  },
                  "end": {
                    "line": 656,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 657,
                      "column": 4
                    },
                    "end": {
                      "line": 659,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L657-L659",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var maxBounds = map.getMaxBounds();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "LngLatBounds"
                        },
                        {
                          "type": "NullLiteral"
                        }
                      ]
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMaxBounds",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getMaxBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getMaxBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's maximum allowable pitch."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "maxPitch",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 825,
                    "column": 4
                  },
                  "end": {
                    "line": 829,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 830,
                      "column": 4
                    },
                    "end": {
                      "line": 830,
                      "column": 53
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L830-L830",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "maxPitch"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMaxPitch",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getMaxPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getMaxPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's maximum allowable zoom level."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "maxZoom",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var maxZoom = map.getMaxZoom();",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 753,
                    "column": 4
                  },
                  "end": {
                    "line": 759,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 760,
                      "column": 4
                    },
                    "end": {
                      "line": 760,
                      "column": 51
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L760-L760",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var maxZoom = map.getMaxZoom();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "maxZoom"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMaxZoom",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getMaxZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getMaxZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's minimum allowable pitch."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "minPitch",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 790,
                    "column": 4
                  },
                  "end": {
                    "line": 794,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 795,
                      "column": 4
                    },
                    "end": {
                      "line": 795,
                      "column": 53
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L795-L795",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "minPitch"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMinPitch",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getMinPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getMinPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's minimum allowable zoom level."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "minZoom",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var minZoom = map.getMinZoom();",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 718,
                    "column": 4
                  },
                  "end": {
                    "line": 724,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 725,
                      "column": 4
                    },
                    "end": {
                      "line": 725,
                      "column": 51
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L725-L725",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var minZoom = map.getMinZoom();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "minZoom"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMinZoom",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getMinZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getMinZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the current padding applied around the map viewport."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "The current padding around the map viewport.",
                    "lineNumber": 4,
                    "type": null
                  }
                ],
                "loc": {
                  "start": {
                    "line": 367,
                    "column": 4
                  },
                  "end": {
                    "line": 372,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 373,
                      "column": 4
                    },
                    "end": {
                      "line": 373,
                      "column": 67
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L373-L373",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The current padding around the map viewport."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "getPadding",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getPadding",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getPadding"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the value of a paint property in the specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to get the paint property from.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The name of a paint property to get.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "name"
                  },
                  {
                    "title": "returns",
                    "description": "The value of the specified paint property.",
                    "lineNumber": 5,
                    "type": {
                      "type": "AllLiteral"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2118,
                    "column": 4
                  },
                  "end": {
                    "line": 2124,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2125,
                      "column": 4
                    },
                    "end": {
                      "line": 2127,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2125-L2127",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to get the paint property from."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "name",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The name of a paint property to get."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the specified paint property."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "AllLiteral"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getPaintProperty",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getPaintProperty",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getPaintProperty"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's current pitch (tilt)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "The map's current pitch, measured in degrees away from the plane of the screen.",
                    "lineNumber": 4,
                    "type": null
                  }
                ],
                "loc": {
                  "start": {
                    "line": 465,
                    "column": 4
                  },
                  "end": {
                    "line": 470,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 471,
                      "column": 4
                    },
                    "end": {
                      "line": 471,
                      "column": 55
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L471-L471",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's current pitch, measured in degrees away from the plane of the screen."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "getPitch",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's pixel ratio."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The pixel ratio.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 617,
                    "column": 4
                  },
                  "end": {
                    "line": 620,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 621,
                      "column": 4
                    },
                    "end": {
                      "line": 623,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L621-L623",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The pixel ratio."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getPixelRatio",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getPixelRatio",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getPixelRatio"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the state of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "renderWorldCopies"
                        },
                        {
                          "type": "text",
                          "value": ". If "
                        },
                        {
                          "type": "inlineCode",
                          "value": "true"
                        },
                        {
                          "type": "text",
                          "value": ", multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "false"
                        },
                        {
                          "type": "text",
                          "value": ":"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "When the map is zoomed out far enough that a single representation of the world does not fill the map's entire"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "container, there will be blank space beyond 180 and -180 degrees longitude."
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "map and the other on the left edge of the map) at every zoom level."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "renderWorldCopies",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var worldCopiesRendered = map.getRenderWorldCopies();",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Render world copies](https://maplibre.org/maplibre-gl-js-docs/example/render-world-copies/)",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 832,
                    "column": 4
                  },
                  "end": {
                    "line": 842,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 843,
                      "column": 4
                    },
                    "end": {
                      "line": 843,
                      "column": 71
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L843-L843",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var worldCopiesRendered = map.getRenderWorldCopies();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "renderWorldCopies"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/render-world-copies/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Render world copies"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getRenderWorldCopies",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getRenderWorldCopies",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getRenderWorldCopies"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the source with the specified ID in the map's style."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This method is often used to update a source using the instance members for the relevant\nsource type as defined in "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "#sources",
                          "children": [
                            {
                              "type": "text",
                              "value": "Sources"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ".\nFor example, setting the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "data"
                        },
                        {
                          "type": "text",
                          "value": " for a GeoJSON source or updating the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "url"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "coordinates"
                        },
                        {
                          "type": "text",
                          "value": "\nof an image source."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the source to get.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "returns",
                    "description": "The style source with the specified ID or `undefined` if the ID\ncorresponds to no existing sources.\nThe shape of the object varies by source type.\nA list of options for each source type is available on the MapLibre Style Specification's\n[Sources](https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/) page.",
                    "lineNumber": 9,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Source"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "var sourceObject = map.getSource('points');",
                    "lineNumber": 14
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 16
                  },
                  {
                    "title": "see",
                    "description": "[Animate a point](https://maplibre.org/maplibre-gl-js-docs/example/animate-point-along-line/)",
                    "lineNumber": 17
                  },
                  {
                    "title": "see",
                    "description": "[Add live realtime data](https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/)",
                    "lineNumber": 18
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1622,
                    "column": 4
                  },
                  "end": {
                    "line": 1641,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1642,
                      "column": 4
                    },
                    "end": {
                      "line": 1644,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1642-L1644",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var sourceObject = map.getSource('points');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the source to get."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The style source with the specified ID or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " if the ID\ncorresponds to no existing sources.\nThe shape of the object varies by source type.\nA list of options for each source type is available on the MapLibre Style Specification's\n"
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Sources"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " page."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Source"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/animate-point-along-line/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Animate a point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add live realtime data"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getSource",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getSource",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getSource"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's MapLibre style object, a JSON object which can be used to recreate the map's style."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The map's style JSON object.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var styleJson = map.getStyle();",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1491,
                    "column": 4
                  },
                  "end": {
                    "line": 1499,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1500,
                      "column": 4
                    },
                    "end": {
                      "line": 1504,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1500-L1504",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var styleJson = map.getStyle();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's style JSON object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getStyle",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getStyle",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getStyle"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the map's current zoom level."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "The map's current zoom level.",
                    "lineNumber": 4,
                    "type": null
                  },
                  {
                    "title": "example",
                    "description": "map.getZoom();",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 231,
                    "column": 4
                  },
                  "end": {
                    "line": 238,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 4
                    },
                    "end": {
                      "line": 239,
                      "column": 53
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L239-L239",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.getZoom();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's current zoom level."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "getZoom",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "getZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#getZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Checks if a control exists on the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The {@link IControl} to check.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    },
                    "name": "control"
                  },
                  {
                    "title": "returns",
                    "description": "True if map contains control.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Check that the navigation control exists on the map.\nmap.hasControl(navigation);",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 559,
                    "column": 4
                  },
                  "end": {
                    "line": 571,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 572,
                      "column": 4
                    },
                    "end": {
                      "line": 574,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L572-L574",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Check that the navigation control exists on the map.\nmap.hasControl(navigation);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "control",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "link",
                              "url": "IControl",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "IControl"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " to check."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if map contains control."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "hasControl",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "hasControl",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#hasControl"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Check whether or not an image with a specific ID exists in the style. This checks both images\nin the style's original sprite and any images\nthat have been added at runtime using "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the image.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "id"
                  },
                  {
                    "title": "returns",
                    "description": "A Boolean indicating whether the image exists.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Check if an image with the ID 'cat' exists in\n// the style's sprite.\nvar catIconExists = map.hasImage('cat');",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1788,
                    "column": 4
                  },
                  "end": {
                    "line": 1800,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1801,
                      "column": 4
                    },
                    "end": {
                      "line": 1808,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1801-L1808",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Check if an image with the ID 'cat' exists in\n// the style's sprite.\nvar catIconExists = map.hasImage('cat');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the image."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A Boolean indicating whether the image exists."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "hasImage",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "hasImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#hasImage"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the map is panning, zooming, rotating, or pitching due to a camera animation or user gesture."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "True if the map is moving.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var isMoving = map.isMoving();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 895,
                    "column": 4
                  },
                  "end": {
                    "line": 900,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 901,
                      "column": 4
                    },
                    "end": {
                      "line": 903,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L901-L903",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var isMoving = map.isMoving();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if the map is moving."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isMoving",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "isMoving",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#isMoving"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the map is rotating due to a camera animation or user gesture."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "True if the map is rotating.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.isRotating();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 915,
                    "column": 4
                  },
                  "end": {
                    "line": 920,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 921,
                      "column": 4
                    },
                    "end": {
                      "line": 923,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L921-L923",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.isRotating();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if the map is rotating."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isRotating",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "isRotating",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#isRotating"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the source is loaded. Returns "
                        },
                        {
                          "type": "inlineCode",
                          "value": "true"
                        },
                        {
                          "type": "text",
                          "value": " if the source with\nthe given ID in the map's style has no outstanding network requests, otherwise "
                        },
                        {
                          "type": "inlineCode",
                          "value": "false"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the source to be checked.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "returns",
                    "description": "A Boolean indicating whether the source is loaded.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var sourceLoaded = map.isSourceLoaded('bathymetry-data');",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1556,
                    "column": 4
                  },
                  "end": {
                    "line": 1564,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1565,
                      "column": 4
                    },
                    "end": {
                      "line": 1572,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1565-L1572",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var sourceLoaded = map.isSourceLoaded('bathymetry-data');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the source to be checked."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A Boolean indicating whether the source is loaded."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isSourceLoaded",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "isSourceLoaded",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#isSourceLoaded"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the map's style is fully loaded."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "A Boolean indicating whether the style is fully loaded.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var styleLoadStatus = map.isStyleLoaded();",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1506,
                    "column": 4
                  },
                  "end": {
                    "line": 1513,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1514,
                      "column": 4
                    },
                    "end": {
                      "line": 1517,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1514-L1517",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var styleLoadStatus = map.isStyleLoaded();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A Boolean indicating whether the style is fully loaded."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isStyleLoaded",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "isStyleLoaded",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#isStyleLoaded"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the map is zooming due to a camera animation or user gesture."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "True if the map is zooming.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var isZooming = map.isZooming();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 905,
                    "column": 4
                  },
                  "end": {
                    "line": 910,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 911,
                      "column": 4
                    },
                    "end": {
                      "line": 913,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L911-L913",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var isZooming = map.isZooming();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if the map is zooming."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isZooming",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "isZooming",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#isZooming"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Changes any combination of center, zoom, bearing, and pitch, without\nan animated transition. The map will retain its current values for any\ndetails not specified in "
                        },
                        {
                          "type": "inlineCode",
                          "value": "options"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 5
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 6,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "pitchstart",
                    "lineNumber": 10
                  },
                  {
                    "title": "fires",
                    "description": "rotate",
                    "lineNumber": 11
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 12
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 13
                  },
                  {
                    "title": "fires",
                    "description": "pitch",
                    "lineNumber": 14
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 15
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 16
                  },
                  {
                    "title": "fires",
                    "description": "pitchend",
                    "lineNumber": 17
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 18,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// jump to coordinates at current zoom\nmap.jumpTo({center: [0, 0]});\n// jump with zoom, pitch, and bearing options\nmap.jumpTo({\n  center: [0, 0],\n  zoom: 8,\n  pitch: 45,\n  bearing: 90\n});",
                    "lineNumber": 19
                  },
                  {
                    "title": "see",
                    "description": "[Jump to a series of locations](https://maplibre.org/maplibre-gl-js-docs/example/jump-to/)",
                    "lineNumber": 29
                  },
                  {
                    "title": "see",
                    "description": "[Update a feature in realtime](https://maplibre.org/maplibre-gl-js-docs/example/live-update-feature/)",
                    "lineNumber": 30
                  }
                ],
                "loc": {
                  "start": {
                    "line": 691,
                    "column": 4
                  },
                  "end": {
                    "line": 722,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 723,
                      "column": 4
                    },
                    "end": {
                      "line": 776,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L723-L776",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// jump to coordinates at current zoom\nmap.jumpTo({center: [0, 0]});\n// jump with zoom, pitch, and bearing options\nmap.jumpTo({\n  center: [0, 0],\n  zoom: 8,\n  pitch: 45,\n  bearing: 90\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "JumpToOptions"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/jump-to/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Jump to a series of locations"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/live-update-feature/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Update a feature in realtime"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "jumpTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "jumpTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#jumpTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "KeyboardHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "KeyboardHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which allows the user to zoom, rotate, and pan the map using keyboard\nshortcuts. Find more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "keyboard"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "KeyboardHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "KeyboardHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 334,
                    "column": 4
                  },
                  "end": {
                    "line": 337,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 338,
                      "column": 4
                    },
                    "end": {
                      "line": 338,
                      "column": 30
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L338-L338",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "keyboard",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "KeyboardHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "keyboard",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#keyboard"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns an Array of strings containing the IDs of all images currently available in the map.\nThis includes both images from the style's original sprite\nand any images that have been added at runtime using "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "An Array of strings containing the names of all sprites/images currently available in the map.",
                    "lineNumber": 5,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "var allImages = map.listImages();",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1847,
                    "column": 4
                  },
                  "end": {
                    "line": 1857,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1858,
                      "column": 4
                    },
                    "end": {
                      "line": 1860,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1858-L1860",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var allImages = map.listImages();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An Array of strings containing the names of all sprites/images currently available in the map."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "listImages",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "listImages",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#listImages"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the map is fully loaded."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns "
                        },
                        {
                          "type": "inlineCode",
                          "value": "false"
                        },
                        {
                          "type": "text",
                          "value": " if the style is not yet fully loaded,\nor if there has been a change to the sources or style that\nhas not yet fully loaded."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "A Boolean indicating whether the map is fully loaded.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2442,
                    "column": 4
                  },
                  "end": {
                    "line": 2450,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2451,
                      "column": 4
                    },
                    "end": {
                      "line": 2453,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2451-L2453",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A Boolean indicating whether the map is fully loaded."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "loaded",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "loaded",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#loaded"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Load an image from an external URL to be used with "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ". External\ndomains must support "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS",
                          "children": [
                            {
                              "type": "text",
                              "value": "CORS"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The URL of the image file. Image file must be in png, webp, or jpg format.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "url"
                  },
                  {
                    "title": "param",
                    "description": "Expecting `callback(error, data)`. Called when the image has loaded or with an error argument if there is an error.",
                    "lineNumber": 5,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Callback"
                      },
                      "applications": [
                        {
                          "type": "UnionType",
                          "elements": [
                            {
                              "type": "NameExpression",
                              "name": "HTMLImageElement"
                            },
                            {
                              "type": "NameExpression",
                              "name": "ImageBitmap"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "callback"
                  },
                  {
                    "title": "example",
                    "description": "// Load an image from an external URL.\nmap.loadImage('http://placekitten.com/50/50', function(error, image) {\n  if (error) throw error;\n  // Add the loaded image to the style's sprite with the ID 'kitten'.\n  map.addImage('kitten', image);\n});",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Add an icon to the map](https://maplibre.org/maplibre-gl-js-docs/example/add-image/)",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1826,
                    "column": 4
                  },
                  "end": {
                    "line": 1842,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1843,
                      "column": 4
                    },
                    "end": {
                      "line": 1845,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1843-L1845",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Load an image from an external URL.\nmap.loadImage('http://placekitten.com/50/50', function(error, image) {\n  if (error) throw error;\n  // Add the loaded image to the style's sprite with the ID 'kitten'.\n  map.addImage('kitten', image);\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "url",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The URL of the image file. Image file must be in png, webp, or jpg format."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "callback",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Expecting "
                            },
                            {
                              "type": "inlineCode",
                              "value": "callback(error, data)"
                            },
                            {
                              "type": "text",
                              "value": ". Called when the image has loaded or with an error argument if there is an error."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Callback"
                      },
                      "applications": [
                        {
                          "type": "UnionType",
                          "elements": [
                            {
                              "type": "NameExpression",
                              "name": "HTMLImageElement"
                            },
                            {
                              "type": "NameExpression",
                              "name": "ImageBitmap"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add an icon to the map"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "loadImage",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "loadImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#loadImage"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Moves a layer to a different z-position."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to move.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "param",
                    "description": "The ID of an existing layer to insert the new layer before. When viewing the map, the `id` layer will appear beneath the `beforeId` layer. If `beforeId` is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map.",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "beforeId"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Move a layer with ID 'polygon' before the layer with ID 'country-label'. The `polygon` layer will appear beneath the `country-label` layer on the map.\nmap.moveLayer('polygon', 'country-label');",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1977,
                    "column": 4
                  },
                  "end": {
                    "line": 1987,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1988,
                      "column": 4
                    },
                    "end": {
                      "line": 1991,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1988-L1991",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Move a layer with ID 'polygon' before the layer with ID 'country-label'. The `polygon` layer will appear beneath the `country-label` layer on the map.\nmap.moveLayer('polygon', 'country-label');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to move."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "beforeId",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of an existing layer to insert the new layer before. When viewing the map, the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "id"
                            },
                            {
                              "type": "text",
                              "value": " layer will appear beneath the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "beforeId"
                            },
                            {
                              "type": "text",
                              "value": " layer. If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "beforeId"
                            },
                            {
                              "type": "text",
                              "value": " is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "moveLayer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "moveLayer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#moveLayer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes an event listener previously added with "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map#on"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "method",
                    "description": null,
                    "lineNumber": 3,
                    "name": null
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "off"
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "param",
                    "description": "The event type previously used to install the listener.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The function previously installed as a listener.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1155,
                    "column": 4
                  },
                  "end": {
                    "line": 1165,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1175,
                      "column": 4
                    },
                    "end": {
                      "line": 1179,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1175-L1179",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type previously used to install the listener."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function previously installed as a listener."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "name": "off",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "off",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#off"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes an event listener for layer-specific events previously added with "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map#on"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type previously used to install the listener.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The layer ID or listener previously used to install the listener.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerIdOrListener"
                  },
                  {
                    "title": "param",
                    "description": "The function previously installed as a listener.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1167,
                    "column": 4
                  },
                  "end": {
                    "line": 1174,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1175,
                      "column": 4
                    },
                    "end": {
                      "line": 1179,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1175-L1179",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type previously used to install the listener."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layer",
                    "lineNumber": 1177,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function previously installed as a listener."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layerIdOrListener",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The layer ID or listener previously used to install the listener."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "off",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "off",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#off"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a listener for events of a specified type, optionally limited to features in a specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type to listen for. Events compatible with the optional `layerId` parameter are triggered\nwhen the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas.\n\n| Event                                                     | Compatible with `layerId` |\n|-----------------------------------------------------------|---------------------------|\n| [`mousedown`](#map.event:mousedown)                       | yes                       |\n| [`mouseup`](#map.event:mouseup)                           | yes                       |\n| [`mouseover`](#map.event:mouseover)                       | yes                       |\n| [`mouseout`](#map.event:mouseout)                         | yes                       |\n| [`mousemove`](#map.event:mousemove)                       | yes                       |\n| [`mouseenter`](#map.event:mouseenter)                     | yes (required)            |\n| [`mouseleave`](#map.event:mouseleave)                     | yes (required)            |\n| [`click`](#map.event:click)                               | yes                       |\n| [`dblclick`](#map.event:dblclick)                         | yes                       |\n| [`contextmenu`](#map.event:contextmenu)                   | yes                       |\n| [`touchstart`](#map.event:touchstart)                     | yes                       |\n| [`touchend`](#map.event:touchend)                         | yes                       |\n| [`touchcancel`](#map.event:touchcancel)                   | yes                       |\n| [`wheel`](#map.event:wheel)                               |                           |\n| [`resize`](#map.event:resize)                             |                           |\n| [`remove`](#map.event:remove)                             |                           |\n| [`touchmove`](#map.event:touchmove)                       |                           |\n| [`movestart`](#map.event:movestart)                       |                           |\n| [`move`](#map.event:move)                                 |                           |\n| [`moveend`](#map.event:moveend)                           |                           |\n| [`dragstart`](#map.event:dragstart)                       |                           |\n| [`drag`](#map.event:drag)                                 |                           |\n| [`dragend`](#map.event:dragend)                           |                           |\n| [`zoomstart`](#map.event:zoomstart)                       |                           |\n| [`zoom`](#map.event:zoom)                                 |                           |\n| [`zoomend`](#map.event:zoomend)                           |                           |\n| [`rotatestart`](#map.event:rotatestart)                   |                           |\n| [`rotate`](#map.event:rotate)                             |                           |\n| [`rotateend`](#map.event:rotateend)                       |                           |\n| [`pitchstart`](#map.event:pitchstart)                     |                           |\n| [`pitch`](#map.event:pitch)                               |                           |\n| [`pitchend`](#map.event:pitchend)                         |                           |\n| [`boxzoomstart`](#map.event:boxzoomstart)                 |                           |\n| [`boxzoomend`](#map.event:boxzoomend)                     |                           |\n| [`boxzoomcancel`](#map.event:boxzoomcancel)               |                           |\n| [`webglcontextlost`](#map.event:webglcontextlost)         |                           |\n| [`webglcontextrestored`](#map.event:webglcontextrestored) |                           |\n| [`load`](#map.event:load)                                 |                           |\n| [`render`](#map.event:render)                             |                           |\n| [`idle`](#map.event:idle)                                 |                           |\n| [`error`](#map.event:error)                               |                           |\n| [`data`](#map.event:data)                                 |                           |\n| [`styledata`](#map.event:styledata)                       |                           |\n| [`sourcedata`](#map.event:sourcedata)                     |                           |\n| [`dataloading`](#map.event:dataloading)                   |                           |\n| [`styledataloading`](#map.event:styledataloading)         |                           |\n| [`sourcedataloading`](#map.event:sourcedataloading)       |                           |\n| [`styleimagemissing`](#map.event:styleimagemissing)       |                           |\n| [`dataabort`](#map.event:dataabort)                       |                           |\n| [`sourcedataabort`](#map.event:sourcedataabort)           |                           |",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The ID of a style layer or a listener if no ID is provided. Event will only be triggered if its location\nis within a visible feature in this layer. The event will have a `features` property containing\nan array of the matching features. If `layerIdOrListener` is not supplied, the event will not have a `features` property.\nPlease note that many event types are not compatible with the optional `layerIdOrListener` parameter.",
                    "lineNumber": 59,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "Listener"
                        }
                      ]
                    },
                    "name": "layerIdOrListener"
                  },
                  {
                    "title": "param",
                    "description": "The function to be called when the event is fired.",
                    "lineNumber": 63,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 64,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Set an event listener that will fire\n// when the map has finished loading\nmap.on('load', function() {\n  // Once the map has finished loading,\n  // add a new layer\n  map.addLayer({\n    id: 'points-of-interest',\n    source: {\n      type: 'vector',\n      url: 'https://maplibre.org/maplibre-gl-js-docs/style-spec/'\n    },\n    'source-layer': 'poi_label',\n    type: 'circle',\n    paint: {\n      // MapLibre Style Specification paint properties\n    },\n    layout: {\n      // MapLibre Style Specification layout properties\n    }\n  });\n});",
                    "lineNumber": 65
                  },
                  {
                    "title": "example",
                    "description": "// Set an event listener that will fire\n// when a feature on the countries layer of the map is clicked\nmap.on('click', 'countries', function(e) {\n  new maplibregl.Popup()\n    .setLngLat(e.lngLat)\n    .setHTML(`Country name: ${e.features[0].properties.name}`)\n    .addTo(map);\n});",
                    "lineNumber": 87
                  },
                  {
                    "title": "see",
                    "description": "[Display popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
                    "lineNumber": 96
                  },
                  {
                    "title": "see",
                    "description": "[Center the map on a clicked symbol](https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/)",
                    "lineNumber": 97
                  },
                  {
                    "title": "see",
                    "description": "[Create a hover effect](https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/)",
                    "lineNumber": 98
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable marker](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 99
                  }
                ],
                "loc": {
                  "start": {
                    "line": 978,
                    "column": 4
                  },
                  "end": {
                    "line": 1078,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1079,
                      "column": 4
                    },
                    "end": {
                      "line": 1083,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1079-L1083",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Set an event listener that will fire\n// when the map has finished loading\nmap.on('load', function() {\n  // Once the map has finished loading,\n  // add a new layer\n  map.addLayer({\n    id: 'points-of-interest',\n    source: {\n      type: 'vector',\n      url: 'https://maplibre.org/maplibre-gl-js-docs/style-spec/'\n    },\n    'source-layer': 'poi_label',\n    type: 'circle',\n    paint: {\n      // MapLibre Style Specification paint properties\n    },\n    layout: {\n      // MapLibre Style Specification layout properties\n    }\n  });\n});"
                  },
                  {
                    "description": "// Set an event listener that will fire\n// when a feature on the countries layer of the map is clicked\nmap.on('click', 'countries', function(e) {\n  new maplibregl.Popup()\n    .setLngLat(e.lngLat)\n    .setHTML(`Country name: ${e.features[0].properties.name}`)\n    .addTo(map);\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to listen for. Events compatible with the optional "
                            },
                            {
                              "type": "inlineCode",
                              "value": "layerId"
                            },
                            {
                              "type": "text",
                              "value": " parameter are triggered\nwhen the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas."
                            }
                          ]
                        },
                        {
                          "type": "table",
                          "align": [null, null],
                          "children": [
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Event"
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Compatible with "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "layerId"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mousedown",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mousedown"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mouseup",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mouseup"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mouseover",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mouseover"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mouseout",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mouseout"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mousemove",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mousemove"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mouseenter",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mouseenter"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes (required)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:mouseleave",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "mouseleave"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes (required)"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:click",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "click"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:dblclick",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "dblclick"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:contextmenu",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "contextmenu"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:touchstart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "touchstart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:touchend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "touchend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:touchcancel",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "touchcancel"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "yes"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:wheel",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "wheel"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:resize",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "resize"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:remove",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "remove"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:touchmove",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "touchmove"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:movestart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "movestart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:move",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "move"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:moveend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "moveend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:dragstart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "dragstart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:drag",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "drag"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:dragend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "dragend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:zoomstart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "zoomstart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:zoom",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "zoom"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:zoomend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "zoomend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:rotatestart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "rotatestart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:rotate",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "rotate"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:rotateend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "rotateend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:pitchstart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "pitchstart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:pitch",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "pitch"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:pitchend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "pitchend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:boxzoomstart",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "boxzoomstart"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:boxzoomend",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "boxzoomend"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:boxzoomcancel",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "boxzoomcancel"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:webglcontextlost",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "webglcontextlost"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:webglcontextrestored",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "webglcontextrestored"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:load",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "load"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:render",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "render"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:idle",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "idle"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:error",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "error"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:data",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "data"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:styledata",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "styledata"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:sourcedata",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "sourcedata"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:dataloading",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "dataloading"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:styledataloading",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "styledataloading"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:sourcedataloading",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "sourcedataloading"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:styleimagemissing",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "styleimagemissing"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:dataabort",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "dataabort"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "tableRow",
                              "children": [
                                {
                                  "type": "tableCell",
                                  "children": [
                                    {
                                      "type": "link",
                                      "title": null,
                                      "url": "#map.event:sourcedataabort",
                                      "children": [
                                        {
                                          "type": "inlineCode",
                                          "value": "sourcedataabort"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "tableCell",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layer",
                    "lineNumber": 1081,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 63,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function to be called when the event is fired."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layerIdOrListener",
                    "lineNumber": 59,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of a style layer or a listener if no ID is provided. Event will only be triggered if its location\nis within a visible feature in this layer. The event will have a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "features"
                            },
                            {
                              "type": "text",
                              "value": " property containing\nan array of the matching features. If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "layerIdOrListener"
                            },
                            {
                              "type": "text",
                              "value": " is not supplied, the event will not have a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "features"
                            },
                            {
                              "type": "text",
                              "value": " property.\nPlease note that many event types are not compatible with the optional "
                            },
                            {
                              "type": "inlineCode",
                              "value": "layerIdOrListener"
                            },
                            {
                              "type": "text",
                              "value": " parameter."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "Listener"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display popup on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Center the map on a clicked symbol"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a hover effect"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable marker"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "on",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "on",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#on"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a listener that will be called only once to a specified event type."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "method",
                    "description": null,
                    "lineNumber": 3,
                    "name": null
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "once"
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "param",
                    "description": "The event type to add a listener for.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The function to be called when the event is fired.\n  The listener function is called with the data object passed to `fire`,\n  extended with `target` and `type` properties.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1104,
                    "column": 4
                  },
                  "end": {
                    "line": 1116,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1133,
                      "column": 4
                    },
                    "end": {
                      "line": 1137,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1133-L1137",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to add a listener for."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function to be called when the event is fired.\nThe listener function is called with the data object passed to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "fire"
                            },
                            {
                              "type": "text",
                              "value": ",\nextended with "
                            },
                            {
                              "type": "inlineCode",
                              "value": "target"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "type"
                            },
                            {
                              "type": "text",
                              "value": " properties."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "name": "once",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "once",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#once"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a listener that will be called only once to a specified event type occurring on features in a specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type to listen for; one of `'mousedown'`, `'mouseup'`, `'click'`, `'dblclick'`,\n`'mousemove'`, `'mouseenter'`, `'mouseleave'`, `'mouseover'`, `'mouseout'`, `'contextmenu'`, `'touchstart'`,\n`'touchend'`, or `'touchcancel'`. `mouseenter` and `mouseover` events are triggered when the cursor enters\na visible portion of the specified layer from outside that layer or outside the map canvas. `mouseleave`\nand `mouseout` events are triggered when the cursor leaves a visible portion of the specified layer, or leaves\nthe map canvas.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The ID of a style layer or a listener if no ID is provided. Only events whose location is within a visible\nfeature in this layer will trigger the listener. The event will have a `features` property containing\nan array of the matching features.",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerIdOrListener"
                  },
                  {
                    "title": "param",
                    "description": "The function to be called when the event is fired.",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1118,
                    "column": 4
                  },
                  "end": {
                    "line": 1132,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1133,
                      "column": 4
                    },
                    "end": {
                      "line": 1137,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1133-L1137",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to listen for; one of "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mousedown'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mouseup'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'click'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'dblclick'"
                            },
                            {
                              "type": "text",
                              "value": ",\n"
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mousemove'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mouseenter'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mouseleave'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mouseover'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'mouseout'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'contextmenu'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'touchstart'"
                            },
                            {
                              "type": "text",
                              "value": ",\n"
                            },
                            {
                              "type": "inlineCode",
                              "value": "'touchend'"
                            },
                            {
                              "type": "text",
                              "value": ", or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'touchcancel'"
                            },
                            {
                              "type": "text",
                              "value": ". "
                            },
                            {
                              "type": "inlineCode",
                              "value": "mouseenter"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "mouseover"
                            },
                            {
                              "type": "text",
                              "value": " events are triggered when the cursor enters\na visible portion of the specified layer from outside that layer or outside the map canvas. "
                            },
                            {
                              "type": "inlineCode",
                              "value": "mouseleave"
                            },
                            {
                              "type": "text",
                              "value": "\nand "
                            },
                            {
                              "type": "inlineCode",
                              "value": "mouseout"
                            },
                            {
                              "type": "text",
                              "value": " events are triggered when the cursor leaves a visible portion of the specified layer, or leaves\nthe map canvas."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layer",
                    "lineNumber": 1135,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function to be called when the event is fired."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  },
                  {
                    "title": "param",
                    "name": "layerIdOrListener",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of a style layer or a listener if no ID is provided. Only events whose location is within a visible\nfeature in this layer will trigger the listener. The event will have a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "features"
                            },
                            {
                              "type": "text",
                              "value": " property containing\nan array of the matching features."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "once",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "once",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#once"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pans the map by the specified offset."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "`x` and `y` coordinates by which to pan the map.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "offset"
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 5,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 6,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 8
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "see",
                    "description": "[Navigate the map with game-like controls](https://maplibre.org/maplibre-gl-js-docs/example/game-controls/)",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 191,
                    "column": 4
                  },
                  "end": {
                    "line": 202,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 203,
                      "column": 4
                    },
                    "end": {
                      "line": 206,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L203-L206",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "offset",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "x"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "y"
                            },
                            {
                              "type": "text",
                              "value": " coordinates by which to pan the map."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/game-controls/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Navigate the map with game-like controls"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "panBy",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "panBy",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#panBy"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pans the map to the specified location with an animated transition."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "The location to pan the map to.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "lnglat"
                  },
                  {
                    "title": "param",
                    "description": "Options describing the destination and animation of the transition.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 6,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 8
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.panTo([-74, 38]);",
                    "lineNumber": 10
                  },
                  {
                    "title": "example",
                    "description": "// Specify that the panTo animation should last 5000 milliseconds.\nmap.panTo([-74, 38], {duration: 5000});",
                    "lineNumber": 12
                  },
                  {
                    "title": "see",
                    "description": "[Update a feature in realtime](https://maplibre.org/maplibre-gl-js-docs/example/live-update-feature/)",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 208,
                    "column": 4
                  },
                  "end": {
                    "line": 224,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 225,
                      "column": 4
                    },
                    "end": {
                      "line": 229,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L225-L229",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.panTo([-74, 38]);"
                  },
                  {
                    "description": "// Specify that the panTo animation should last 5000 milliseconds.\nmap.panTo([-74, 38], {duration: 5000});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lnglat",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The location to pan the map to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options describing the destination and animation of the transition."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/live-update-feature/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Update a feature in realtime"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "panTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "panTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#panTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://github.com/mapbox/point-geometry",
                          "children": [
                            {
                              "type": "text",
                              "value": "Point"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " representing pixel coordinates, relative to the map's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "container"
                        },
                        {
                          "type": "text",
                          "value": ",\nthat correspond to the specified geographical location."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The geographical location to project.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "lnglat"
                  },
                  {
                    "title": "returns",
                    "description": "The [Point](https://github.com/mapbox/point-geometry) corresponding to `lnglat`, relative to the map's `container`.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var coordinate = [-122.420679, 37.772537];\nvar point = map.project(coordinate);",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 865,
                    "column": 4
                  },
                  "end": {
                    "line": 874,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 875,
                      "column": 4
                    },
                    "end": {
                      "line": 877,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L875-L877",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var coordinate = [-122.420679, 37.772537];\nvar point = map.project(coordinate);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lnglat",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The geographical location to project."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://github.com/mapbox/point-geometry",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Point"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " corresponding to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "lnglat"
                            },
                            {
                              "type": "text",
                              "value": ", relative to the map's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "container"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "project",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "project",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#project"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns an array of MapGeoJSONFeature objects\nrepresenting visible features that satisfy the query parameters."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The geometry of the query region:\neither a single point or southwest and northeast points describing a bounding box.\nOmitting this parameter (i.e. calling {@link Map#queryRenderedFeatures} with zero arguments,\nor with only a `options` argument) is equivalent to passing a bounding box encompassing the entire\nmap viewport.",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "PointLike"
                          },
                          {
                            "type": "TypeApplication",
                            "expression": {
                              "type": "NameExpression",
                              "name": "Array"
                            },
                            "applications": [
                              {
                                "type": "NameExpression",
                                "name": "PointLike"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "name": "geometry"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 9,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "An array of [style layer IDs](https://maplibre.org/maplibre-gl-js-docs/style-spec/#layer-id) for the query to inspect.\n  Only features within these layers will be returned. If this parameter is undefined, all layers will be checked.",
                    "lineNumber": 10,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "TypeApplication",
                        "expression": {
                          "type": "NameExpression",
                          "name": "Array"
                        },
                        "applications": [
                          {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    "name": "options.layers"
                  },
                  {
                    "title": "param",
                    "description": "A [filter](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter)\n  to limit query results.",
                    "lineNumber": 12,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      }
                    },
                    "name": "options.filter"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if the [options.filter] conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 14,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "An array of MapGeoJSONFeature objects.\n\nThe `properties` value of each returned feature object contains the properties of its source feature. For GeoJSON sources, only\nstring and numeric property values are supported (i.e. `null`, `Array`, and `Object` values are not supported).\n\nEach feature includes top-level `layer`, `source`, and `sourceLayer` properties. The `layer` property is an object\nrepresenting the style layer to  which the feature belongs. Layout and paint properties in this object contain values\nwhich are fully evaluated for the given zoom level and feature.\n\nOnly features that are currently rendered are included. Some features will **not** be included, like:\n\n- Features from layers whose `visibility` property is `\"none\"`.\n- Features from layers whose zoom range excludes the current zoom level.\n- Symbol features that have been hidden due to text or icon collision.\n\nFeatures from all other layers are included, including features that may have no visible\ncontribution to the rendered result; for example, because the layer's opacity or color alpha component is set to\n0.\n\nThe topmost rendered feature appears first in the returned array, and subsequent features are sorted by\ndescending z-order. Features that are rendered multiple times (due to wrapping across the antimeridian at low\nzoom levels) are returned only once (though subject to the following caveat).\n\nBecause features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature\ngeometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple\ntimes in query results. For example, suppose there is a highway running through the bounding rectangle of a query.\nThe results of the query will be those parts of the highway that lie within the map tiles covering the bounding\nrectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile\nwill be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple\ntiles due to tile buffering.",
                    "lineNumber": 16,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "MapGeoJSONFeature"
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Find all features at a point\nvar features = map.queryRenderedFeatures(\n  [20, 35],\n  { layers: ['my-layer-name'] }\n);",
                    "lineNumber": 47
                  },
                  {
                    "title": "example",
                    "description": "// Find all features within a static bounding box\nvar features = map.queryRenderedFeatures(\n  [[10, 20], [30, 50]],\n  { layers: ['my-layer-name'] }\n);",
                    "lineNumber": 54
                  },
                  {
                    "title": "example",
                    "description": "// Find all features within a bounding box around a point\nvar width = 10;\nvar height = 20;\nvar features = map.queryRenderedFeatures([\n  [point.x - width / 2, point.y - height / 2],\n  [point.x + width / 2, point.y + height / 2]\n], { layers: ['my-layer-name'] });",
                    "lineNumber": 61
                  },
                  {
                    "title": "example",
                    "description": "// Query all rendered features from a single layer\nvar features = map.queryRenderedFeatures({ layers: ['my-layer-name'] });",
                    "lineNumber": 70
                  },
                  {
                    "title": "see",
                    "description": "[Get features under the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/queryrenderedfeatures/)",
                    "lineNumber": 73
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1208,
                    "column": 4
                  },
                  "end": {
                    "line": 1282,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1283,
                      "column": 4
                    },
                    "end": {
                      "line": 1315,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1283-L1315",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Find all features at a point\nvar features = map.queryRenderedFeatures(\n  [20, 35],\n  { layers: ['my-layer-name'] }\n);"
                  },
                  {
                    "description": "// Find all features within a static bounding box\nvar features = map.queryRenderedFeatures(\n  [[10, 20], [30, 50]],\n  { layers: ['my-layer-name'] }\n);"
                  },
                  {
                    "description": "// Find all features within a bounding box around a point\nvar width = 10;\nvar height = 20;\nvar features = map.queryRenderedFeatures([\n  [point.x - width / 2, point.y - height / 2],\n  [point.x + width / 2, point.y + height / 2]\n], { layers: ['my-layer-name'] });"
                  },
                  {
                    "description": "// Query all rendered features from a single layer\nvar features = map.queryRenderedFeatures({ layers: ['my-layer-name'] });"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "geometry",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The geometry of the query region:\neither a single point or southwest and northeast points describing a bounding box.\nOmitting this parameter (i.e. calling "
                            },
                            {
                              "type": "link",
                              "url": "Map#queryRenderedFeatures",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Map#queryRenderedFeatures"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " with zero arguments,\nor with only a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "options"
                            },
                            {
                              "type": "text",
                              "value": " argument) is equivalent to passing a bounding box encompassing the entire\nmap viewport."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "PointLike"
                          },
                          {
                            "type": "TypeApplication",
                            "expression": {
                              "type": "NameExpression",
                              "name": "Array"
                            },
                            "applications": [
                              {
                                "type": "NameExpression",
                                "name": "PointLike"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.layers",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "An array of "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layer-id",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "style layer IDs"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " for the query to inspect.\nOnly features within these layers will be returned. If this parameter is undefined, all layers will be checked."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "TypeApplication",
                            "expression": {
                              "type": "NameExpression",
                              "name": "Array"
                            },
                            "applications": [
                              {
                                "type": "NameExpression",
                                "name": "string"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.filter",
                        "lineNumber": 12,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "A "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "filter"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": "\nto limit query results."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.validate",
                        "lineNumber": 14,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if the [options.filter] conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An array of MapGeoJSONFeature objects."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "properties"
                            },
                            {
                              "type": "text",
                              "value": " value of each returned feature object contains the properties of its source feature. For GeoJSON sources, only\nstring and numeric property values are supported (i.e. "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "Array"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "Object"
                            },
                            {
                              "type": "text",
                              "value": " values are not supported)."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Each feature includes top-level "
                            },
                            {
                              "type": "inlineCode",
                              "value": "layer"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "source"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "sourceLayer"
                            },
                            {
                              "type": "text",
                              "value": " properties. The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "layer"
                            },
                            {
                              "type": "text",
                              "value": " property is an object\nrepresenting the style layer to  which the feature belongs. Layout and paint properties in this object contain values\nwhich are fully evaluated for the given zoom level and feature."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Only features that are currently rendered are included. Some features will "
                            },
                            {
                              "type": "strong",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "not"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " be included, like:"
                            }
                          ]
                        },
                        {
                          "type": "list",
                          "ordered": false,
                          "start": null,
                          "spread": false,
                          "children": [
                            {
                              "type": "listItem",
                              "spread": false,
                              "checked": null,
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Features from layers whose "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "visibility"
                                    },
                                    {
                                      "type": "text",
                                      "value": " property is "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "\"none\""
                                    },
                                    {
                                      "type": "text",
                                      "value": "."
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "listItem",
                              "spread": false,
                              "checked": null,
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Features from layers whose zoom range excludes the current zoom level."
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "listItem",
                              "spread": false,
                              "checked": null,
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Symbol features that have been hidden due to text or icon collision."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Features from all other layers are included, including features that may have no visible\ncontribution to the rendered result; for example, because the layer's opacity or color alpha component is set to\n0."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The topmost rendered feature appears first in the returned array, and subsequent features are sorted by\ndescending z-order. Features that are rendered multiple times (due to wrapping across the antimeridian at low\nzoom levels) are returned only once (though subject to the following caveat)."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature\ngeometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple\ntimes in query results. For example, suppose there is a highway running through the bounding rectangle of a query.\nThe results of the query will be those parts of the highway that lie within the map tiles covering the bounding\nrectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile\nwill be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple\ntiles due to tile buffering."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "MapGeoJSONFeature"
                        }
                      ]
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/queryrenderedfeatures/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Get features under the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "queryRenderedFeatures",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "queryRenderedFeatures",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#queryRenderedFeatures"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns an array of MapGeoJSONFeature objects\nrepresenting features within the specified vector tile or GeoJSON source that satisfy the query parameters."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the vector tile or GeoJSON source to query.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "sourceId"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 5,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "parameters"
                  },
                  {
                    "title": "param",
                    "description": "The name of the source layer\n  to query. *For vector tile sources, this parameter is required.* For GeoJSON sources, it is ignored.",
                    "lineNumber": 6,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "parameters.sourceLayer"
                  },
                  {
                    "title": "param",
                    "description": "A [filter](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter)\n  to limit query results.",
                    "lineNumber": 8,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      }
                    },
                    "name": "parameters.filter"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if the [parameters.filter] conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 10,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "parameters.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "An array of MapGeoJSONFeature objects.\n\nIn contrast to {@link Map#queryRenderedFeatures}, this function returns all features matching the query parameters,\nwhether or not they are rendered by the current style (i.e. visible). The domain of the query includes all currently-loaded\nvector tiles and GeoJSON source tiles: this function does not check tiles outside the currently\nvisible viewport.\n\nBecause features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature\ngeometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple\ntimes in query results. For example, suppose there is a highway running through the bounding rectangle of a query.\nThe results of the query will be those parts of the highway that lie within the map tiles covering the bounding\nrectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile\nwill be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple\ntiles due to tile buffering.",
                    "lineNumber": 12,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "MapGeoJSONFeature"
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Find all features in one source layer in a vector source\nvar features = map.querySourceFeatures('your-source-id', {\n  sourceLayer: 'your-source-layer'\n});",
                    "lineNumber": 27
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1317,
                    "column": 4
                  },
                  "end": {
                    "line": 1350,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1351,
                      "column": 4
                    },
                    "end": {
                      "line": 1357,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1351-L1357",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Find all features in one source layer in a vector source\nvar features = map.querySourceFeatures('your-source-id', {\n  sourceLayer: 'your-source-layer'\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "sourceId",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the vector tile or GeoJSON source to query."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "parameters",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "parameters.sourceLayer",
                        "lineNumber": 6,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The name of the source layer\nto query. "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "For vector tile sources, this parameter is required."
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " For GeoJSON sources, it is ignored."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "parameters.filter",
                        "lineNumber": 8,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "A "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "filter"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": "\nto limit query results."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "parameters.validate",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if the [parameters.filter] conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An array of MapGeoJSONFeature objects."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "In contrast to "
                            },
                            {
                              "type": "link",
                              "url": "Map#queryRenderedFeatures",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Map#queryRenderedFeatures"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ", this function returns all features matching the query parameters,\nwhether or not they are rendered by the current style (i.e. visible). The domain of the query includes all currently-loaded\nvector tiles and GeoJSON source tiles: this function does not check tiles outside the currently\nvisible viewport."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature\ngeometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple\ntimes in query results. For example, suppose there is a highway running through the bounding rectangle of a query.\nThe results of the query will be those parts of the highway that lie within the map tiles covering the bounding\nrectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile\nwill be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple\ntiles due to tile buffering."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "MapGeoJSONFeature"
                        }
                      ]
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "querySourceFeatures",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "querySourceFeatures",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#querySourceFeatures"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Force a synchronous redraw of the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.redraw();",
                    "lineNumber": 2
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2633,
                    "column": 4
                  },
                  "end": {
                    "line": 2638,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2639,
                      "column": 4
                    },
                    "end": {
                      "line": 2649,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2639-L2649",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.redraw();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "redraw",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "redraw",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#redraw"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Clean up and release all internal resources associated with this map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This includes DOM elements, event bindings, web workers, and WebGL resources."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Use this method when you are done using the map and wish to ensure that it no\nlonger consumes browser resources. Afterwards, you must not call any other\nmethods on the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 2651,
                    "column": 4
                  },
                  "end": {
                    "line": 2659,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2660,
                      "column": 4
                    },
                    "end": {
                      "line": 2693,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2660-L2693",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "remove",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "remove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#remove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes the control from the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The {@link IControl} to remove.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    },
                    "name": "control"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Remove zoom and rotation controls from the map.\nmap.removeControl(navigation);",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 535,
                    "column": 4
                  },
                  "end": {
                    "line": 547,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 548,
                      "column": 4
                    },
                    "end": {
                      "line": 557,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L548-L557",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Define a new navigation control.\nvar navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Remove zoom and rotation controls from the map.\nmap.removeControl(navigation);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "control",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "link",
                              "url": "IControl",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "IControl"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " to remove."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "IControl"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeControl",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "removeControl",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#removeControl"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " of a feature, setting it back to the default behavior.\nIf only a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "target.source"
                        },
                        {
                          "type": "text",
                          "value": " is specified, it will remove the state for all features from that source.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "target.id"
                        },
                        {
                          "type": "text",
                          "value": " is also specified, it will remove all keys for that feature's state.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "key"
                        },
                        {
                          "type": "text",
                          "value": " is also specified, it removes only that key from that feature's state.\nFeatures are identified by their "
                        },
                        {
                          "type": "inlineCode",
                          "value": "feature.id"
                        },
                        {
                          "type": "text",
                          "value": " attribute, which can be any number or string."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Identifier of where to remove state. It can be a source, a feature, or a specific key of feature.\nFeature objects returned from {@link Map#queryRenderedFeatures} or event handlers can be used as feature identifiers.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "target"
                  },
                  {
                    "title": "param",
                    "description": "(optional) Unique id of the feature. Optional if key is not specified.",
                    "lineNumber": 9,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    },
                    "name": "target.id"
                  },
                  {
                    "title": "param",
                    "description": "The id of the vector or GeoJSON source for the feature.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "target.source"
                  },
                  {
                    "title": "param",
                    "description": "(optional) *For vector tile sources, `sourceLayer` is required.*",
                    "lineNumber": 11,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "target.sourceLayer"
                  },
                  {
                    "title": "param",
                    "description": "(optional) The key in the feature state to reset.",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "key"
                  },
                  {
                    "title": "example",
                    "description": "// Reset the entire state object for all features\n// in the `my-source` source\nmap.removeFeatureState({\n  source: 'my-source'\n});",
                    "lineNumber": 14
                  },
                  {
                    "title": "example",
                    "description": "// When the mouse leaves the `my-layer` layer,\n// reset the entire state object for the\n// feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  });\n});",
                    "lineNumber": 21
                  },
                  {
                    "title": "example",
                    "description": "// When the mouse leaves the `my-layer` layer,\n// reset only the `hover` key-value pair in the\n// state for the feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  }, 'hover');\n});",
                    "lineNumber": 33
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2226,
                    "column": 4
                  },
                  "end": {
                    "line": 2271,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2272,
                      "column": 4
                    },
                    "end": {
                      "line": 2275,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2272-L2275",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Reset the entire state object for all features\n// in the `my-source` source\nmap.removeFeatureState({\n  source: 'my-source'\n});"
                  },
                  {
                    "description": "// When the mouse leaves the `my-layer` layer,\n// reset the entire state object for the\n// feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  });\n});"
                  },
                  {
                    "description": "// When the mouse leaves the `my-layer` layer,\n// reset only the `hover` key-value pair in the\n// state for the feature under the mouse\nmap.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  }, 'hover');\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "target",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Identifier of where to remove state. It can be a source, a feature, or a specific key of feature.\nFeature objects returned from "
                            },
                            {
                              "type": "link",
                              "url": "Map#queryRenderedFeatures",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Map#queryRenderedFeatures"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or event handlers can be used as feature identifiers."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "target.id",
                        "lineNumber": 9,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) Unique id of the feature. Optional if key is not specified."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "UnionType",
                          "elements": [
                            {
                              "type": "NameExpression",
                              "name": "string"
                            },
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      },
                      {
                        "title": "param",
                        "name": "target.source",
                        "lineNumber": 10,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The id of the vector or GeoJSON source for the feature."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      },
                      {
                        "title": "param",
                        "name": "target.sourceLayer",
                        "lineNumber": 11,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "For vector tile sources, "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "sourceLayer"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is required."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "param",
                    "name": "key",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "(optional) The key in the feature state to reset."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeFeatureState",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "removeFeatureState",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#removeFeatureState"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Remove an image from a style. This can be an image from the style's original\nsprite or any images\nthat have been added at runtime using "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the image.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "id"
                  },
                  {
                    "title": "example",
                    "description": "// If an image with the ID 'cat' exists in\n// the style's sprite, remove it.\nif (map.hasImage('cat')) map.removeImage('cat');",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1810,
                    "column": 4
                  },
                  "end": {
                    "line": 1821,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1822,
                      "column": 4
                    },
                    "end": {
                      "line": 1824,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1822-L1824",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// If an image with the ID 'cat' exists in\n// the style's sprite, remove it.\nif (map.hasImage('cat')) map.removeImage('cat');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the image."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeImage",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "removeImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#removeImage"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes the layer with the given ID from the map's style."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If no such layer exists, an "
                        },
                        {
                          "type": "inlineCode",
                          "value": "error"
                        },
                        {
                          "type": "text",
                          "value": " event is fired."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "id of the layer to remove",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "fires",
                    "description": "error",
                    "lineNumber": 6
                  },
                  {
                    "title": "example",
                    "description": "// If a layer with ID 'state-data' exists, remove it.\nif (map.getLayer('state-data')) map.removeLayer('state-data');",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1994,
                    "column": 4
                  },
                  "end": {
                    "line": 2005,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2006,
                      "column": 4
                    },
                    "end": {
                      "line": 2009,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2006-L2009",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// If a layer with ID 'state-data' exists, remove it.\nif (map.getLayer('state-data')) map.removeLayer('state-data');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "id of the layer to remove"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeLayer",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "removeLayer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#removeLayer"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes a source from the map's style."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the source to remove.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.removeSource('bathymetry-data');",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1609,
                    "column": 4
                  },
                  "end": {
                    "line": 1616,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1617,
                      "column": 4
                    },
                    "end": {
                      "line": 1620,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1617-L1620",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.removeSource('bathymetry-data');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the source to remove."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeSource",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "removeSource",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#removeSource"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Gets and sets a Boolean indicating whether the map will\ncontinuously repaint. This information is useful for analyzing performance."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "repaint"
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2806,
                    "column": 4
                  },
                  "end": {
                    "line": 2814,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2815,
                      "column": 4
                    },
                    "end": {
                      "line": 2815,
                      "column": 54
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2815-L2815",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "repaint",
                "type": {
                  "type": "NameExpression",
                  "name": "boolean"
                },
                "scope": "instance",
                "memberof": "Map",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "repaint",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#repaint"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Rotates the map so that north is up (0° bearing), with an animated transition."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 4,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 7
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 413,
                    "column": 4
                  },
                  "end": {
                    "line": 422,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 423,
                      "column": 4
                    },
                    "end": {
                      "line": 426,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L423-L426",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "resetNorth",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "resetNorth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#resetNorth"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Rotates and pitches the map so that north is up (0° bearing) and pitch is 0°, with an animated transition."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 4,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 7
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 428,
                    "column": 4
                  },
                  "end": {
                    "line": 437,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 438,
                      "column": 4
                    },
                    "end": {
                      "line": 445,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L438-L445",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "resetNorthPitch",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "resetNorthPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#resetNorthPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Resizes the map according to the dimensions of its\n"
                        },
                        {
                          "type": "inlineCode",
                          "value": "container"
                        },
                        {
                          "type": "text",
                          "value": " element."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Checks if the map container size changed and updates the map if it has changed.\nThis method must be called after the map's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "container"
                        },
                        {
                          "type": "text",
                          "value": " is resized programmatically\nor when the map is shown after being initially hidden with CSS."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Additional properties to be passed to `movestart`, `move`, `resize`, and `moveend`\n  events that get triggered as a result of resize. This can be useful for differentiating the\n  source of an event (for example, user-initiated or programmatically-triggered events).",
                    "lineNumber": 8,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Resize the map when the map container is shown\n// after being initially hidden with CSS.\nvar mapDiv = document.getElementById('map');\nif (mapDiv.style.visibility === true) map.resize();",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 576,
                    "column": 4
                  },
                  "end": {
                    "line": 593,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 594,
                      "column": 4
                    },
                    "end": {
                      "line": 615,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L594-L615",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Resize the map when the map container is shown\n// after being initially hidden with CSS.\nvar mapDiv = document.getElementById('map');\nif (mapDiv.style.visibility === true) map.resize();"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be passed to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "movestart"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "move"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "resize"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "moveend"
                            },
                            {
                              "type": "text",
                              "value": "\nevents that get triggered as a result of resize. This can be useful for differentiating the\nsource of an event (for example, user-initiated or programmatically-triggered events)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "resize",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "resize",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#resize"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Rotates the map to the specified bearing, with an animated transition. The bearing is the compass direction\nthat is \"up\"; for example, a bearing of 90° orients the map so that east is up."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 4
                  },
                  {
                    "title": "param",
                    "description": "The desired bearing.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "bearing"
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 6,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 9
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 395,
                    "column": 4
                  },
                  "end": {
                    "line": 406,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 407,
                      "column": 4
                    },
                    "end": {
                      "line": 411,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L407-L411",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "bearing",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The desired bearing."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "rotateTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "rotateTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#rotateTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "ScrollZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "ScrollZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which implements zooming in and out with a scroll wheel or trackpad.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "scrollZoom"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "ScrollZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "ScrollZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 309,
                    "column": 4
                  },
                  "end": {
                    "line": 312,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 313,
                      "column": 4
                    },
                    "end": {
                      "line": 313,
                      "column": 34
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L313-L313",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "scrollZoom",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "ScrollZoomHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "scrollZoom",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#scrollZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the map's bearing (rotation). The bearing is the compass direction that is \"up\"; for example, a bearing\nof 90° orients the map so that east is up."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Equivalent to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo({bearing: bearing})"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 6
                  },
                  {
                    "title": "param",
                    "description": "The desired bearing.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "bearing"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 8,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 10
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// rotate the map to 90 degrees\nmap.setBearing(90);",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 346,
                    "column": 4
                  },
                  "end": {
                    "line": 361,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 362,
                      "column": 4
                    },
                    "end": {
                      "line": 365,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L362-L365",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// rotate the map to 90 degrees\nmap.setBearing(90);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "bearing",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The desired bearing."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "setBearing",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setBearing",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setBearing"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the map's geographical centerpoint. Equivalent to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo({center: center})"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "The centerpoint to set.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "center"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 7
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setCenter([-74, 38]);",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 175,
                    "column": 4
                  },
                  "end": {
                    "line": 186,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 187,
                      "column": 4
                    },
                    "end": {
                      "line": 189,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L187-L189",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setCenter([-74, 38]);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "center",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The centerpoint to set."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "setCenter",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setCenter",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setCenter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " of a feature.\nA feature's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " is a set of user-defined key-value pairs that are assigned to a feature at runtime.\nWhen using this method, the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "state"
                        },
                        {
                          "type": "text",
                          "value": " object is merged with any existing key-value pairs in the feature's state.\nFeatures are identified by their "
                        },
                        {
                          "type": "inlineCode",
                          "value": "feature.id"
                        },
                        {
                          "type": "text",
                          "value": " attribute, which can be any number or string."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This method can only be used with sources that have a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "feature.id"
                        },
                        {
                          "type": "text",
                          "value": " attribute. The "
                        },
                        {
                          "type": "inlineCode",
                          "value": "feature.id"
                        },
                        {
                          "type": "text",
                          "value": " attribute can be defined in three ways:"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "For vector or GeoJSON sources, including an "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "id"
                                },
                                {
                                  "type": "text",
                                  "value": " attribute in the original data file."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "For vector or GeoJSON sources, using the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/#vector-promoteId",
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "promoteId"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " option at the time the source is defined."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "For GeoJSON sources, using the "
                                },
                                {
                                  "type": "link",
                                  "title": null,
                                  "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/#geojson-generateId",
                                  "children": [
                                    {
                                      "type": "inlineCode",
                                      "value": "generateId"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "value": " option to auto-assign an "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "id"
                                },
                                {
                                  "type": "text",
                                  "value": " based on the feature's index in the source data. If you change feature data using "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "map.getSource('some id').setData(..)"
                                },
                                {
                                  "type": "text",
                                  "value": ", you may need to re-apply state taking into account updated "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "id"
                                },
                                {
                                  "type": "text",
                                  "value": " values."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "emphasis",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note: You can use the "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/#feature-state",
                              "children": [
                                {
                                  "type": "inlineCode",
                                  "value": "feature-state"
                                },
                                {
                                  "type": "text",
                                  "value": " expression"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " to access the values in a feature's state object for the purposes of styling."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Feature identifier. Feature objects returned from\n{@link Map#queryRenderedFeatures} or event handlers can be used as feature identifiers.",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "feature"
                  },
                  {
                    "title": "param",
                    "description": "Unique id of the feature.",
                    "lineNumber": 15,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    },
                    "name": "feature.id"
                  },
                  {
                    "title": "param",
                    "description": "The id of the vector or GeoJSON source for the feature.",
                    "lineNumber": 16,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "feature.source"
                  },
                  {
                    "title": "param",
                    "description": "(optional) *For vector tile sources, `sourceLayer` is required.*",
                    "lineNumber": 17,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "feature.sourceLayer"
                  },
                  {
                    "title": "param",
                    "description": "A set of key-value pairs. The values should be valid JSON types.",
                    "lineNumber": 18,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "state"
                  },
                  {
                    "title": "example",
                    "description": "// When the mouse moves over the `my-layer` layer, update\n// the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length > 0) {\n    map.setFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id,\n    }, {\n      hover: true\n    });\n  }\n});",
                    "lineNumber": 20
                  },
                  {
                    "title": "see",
                    "description": "[Create a hover effect](https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/)",
                    "lineNumber": 35
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2183,
                    "column": 4
                  },
                  "end": {
                    "line": 2219,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2220,
                      "column": 4
                    },
                    "end": {
                      "line": 2223,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2220-L2223",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// When the mouse moves over the `my-layer` layer, update\n// the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length > 0) {\n    map.setFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id,\n    }, {\n      hover: true\n    });\n  }\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "feature",
                    "lineNumber": 13,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Feature identifier. Feature objects returned from\n"
                            },
                            {
                              "type": "link",
                              "url": "Map#queryRenderedFeatures",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Map#queryRenderedFeatures"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or event handlers can be used as feature identifiers."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "feature.id",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Unique id of the feature."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "UnionType",
                          "elements": [
                            {
                              "type": "NameExpression",
                              "name": "string"
                            },
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      },
                      {
                        "title": "param",
                        "name": "feature.source",
                        "lineNumber": 16,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "The id of the vector or GeoJSON source for the feature."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      },
                      {
                        "title": "param",
                        "name": "feature.sourceLayer",
                        "lineNumber": 17,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "(optional) "
                                },
                                {
                                  "type": "emphasis",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "For vector tile sources, "
                                    },
                                    {
                                      "type": "inlineCode",
                                      "value": "sourceLayer"
                                    },
                                    {
                                      "type": "text",
                                      "value": " is required."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "param",
                    "name": "state",
                    "lineNumber": 18,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A set of key-value pairs. The values should be valid JSON types."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a hover effect"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setFeatureState",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setFeatureState",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setFeatureState"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the filter for the specified style layer."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Filters control which features a style layer renders from its source.\nAny feature for which the filter expression evaluates to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "true"
                        },
                        {
                          "type": "text",
                          "value": " will be\nrendered on the map. Those that are false will be hidden."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Use "
                        },
                        {
                          "type": "inlineCode",
                          "value": "setFilter"
                        },
                        {
                          "type": "text",
                          "value": " to show a subset of your source data."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "To clear the filter, pass "
                        },
                        {
                          "type": "inlineCode",
                          "value": "null"
                        },
                        {
                          "type": "text",
                          "value": " or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "undefined"
                        },
                        {
                          "type": "text",
                          "value": " as the second parameter."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to which the filter will be applied.",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The filter, conforming to the MapLibre Style Specification's\n  [filter definition](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter).  If `null` or `undefined` is provided, the function removes any existing filter from the layer.",
                    "lineNumber": 12,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Array"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "filter"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 14,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if the filter conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 15,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 16,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// display only features with the 'name' property 'USA'\nmap.setFilter('my-layer', ['==', ['get', 'name'], 'USA']);",
                    "lineNumber": 18
                  },
                  {
                    "title": "example",
                    "description": "// display only features with five or more 'available-spots'\nmap.setFilter('bike-docks', ['>=', ['get', 'available-spots'], 5]);",
                    "lineNumber": 21
                  },
                  {
                    "title": "example",
                    "description": "// remove the filter for the 'bike-docks' style layer\nmap.setFilter('bike-docks', null);",
                    "lineNumber": 24
                  },
                  {
                    "title": "see",
                    "description": "[Create a timeline animation](https://maplibre.org/maplibre-gl-js-docs/example/timeline-animation/)",
                    "lineNumber": 28
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2053,
                    "column": 4
                  },
                  "end": {
                    "line": 2082,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2083,
                      "column": 4
                    },
                    "end": {
                      "line": 2086,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2083-L2086",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// display only features with the 'name' property 'USA'\nmap.setFilter('my-layer', ['==', ['get', 'name'], 'USA']);"
                  },
                  {
                    "description": "// display only features with five or more 'available-spots'\nmap.setFilter('bike-docks', ['>=', ['get', 'available-spots'], 5]);"
                  },
                  {
                    "description": "// remove the filter for the 'bike-docks' style layer\nmap.setFilter('bike-docks', null);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 11,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to which the filter will be applied."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "filter",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The filter, conforming to the MapLibre Style Specification's\n"
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#filter",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "filter definition"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ".  If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes any existing filter from the layer."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Array"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 14,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.validate",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if the filter conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ],
                    "default": "{}"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/timeline-animation/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a timeline animation"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setFilter",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setFilter",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setFilter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the zoom extent for the specified style layer. The zoom extent includes the\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layer-minzoom",
                          "children": [
                            {
                              "type": "text",
                              "value": "minimum zoom level"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "\nand "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layer-maxzoom",
                          "children": [
                            {
                              "type": "text",
                              "value": "maximum zoom level"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ")\nat which the layer will be rendered."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Note: For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the\nminimum zoom level of the "
                        },
                        {
                          "type": "emphasis",
                          "children": [
                            {
                              "type": "text",
                              "value": "source layer"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " because the data does not exist at those zoom levels. If the minimum\nzoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style\nlayer will not be rendered at all zoom levels in the zoom range."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to which the zoom extent will be applied.",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The minimum zoom to set (0-24).",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "minzoom"
                  },
                  {
                    "title": "param",
                    "description": "The maximum zoom to set (0-24).",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "maxzoom"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setLayerZoomRange('my-layer', 2, 5);",
                    "lineNumber": 16
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2028,
                    "column": 4
                  },
                  "end": {
                    "line": 2047,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2048,
                      "column": 4
                    },
                    "end": {
                      "line": 2051,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2048-L2051",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setLayerZoomRange('my-layer', 2, 5);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 11,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to which the zoom extent will be applied."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "minzoom",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The minimum zoom to set (0-24)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "maxzoom",
                    "lineNumber": 13,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum zoom to set (0-24)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setLayerZoomRange",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setLayerZoomRange",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setLayerZoomRange"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the value of a layout property in the specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to set the layout property in.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The name of the layout property to set.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "name"
                  },
                  {
                    "title": "param",
                    "description": "The value of the layout property. Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/).",
                    "lineNumber": 5,
                    "type": {
                      "type": "AllLiteral"
                    },
                    "name": "value"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 6,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if `value` conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 7,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setLayoutProperty('my-layer', 'visibility', 'none');",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2129,
                    "column": 4
                  },
                  "end": {
                    "line": 2140,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2141,
                      "column": 4
                    },
                    "end": {
                      "line": 2144,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2141-L2144",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setLayoutProperty('my-layer', 'visibility', 'none');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to set the layout property in."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "name",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The name of the layout property to set."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "value",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the layout property. Must be of a type appropriate for the property, as defined in the "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MapLibre Style Specification"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "AllLiteral"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.validate",
                        "lineNumber": 7,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "value"
                                },
                                {
                                  "type": "text",
                                  "value": " conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ],
                    "default": "{}"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setLayoutProperty",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setLayoutProperty",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setLayoutProperty"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the any combination of light values."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Light properties to set. Must conform to the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/#light).",
                    "lineNumber": 3,
                    "type": null,
                    "name": "light"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if the filter conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 5,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var layerVisibility = map.getLayoutProperty('my-layer', 'visibility');",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2157,
                    "column": 4
                  },
                  "end": {
                    "line": 2166,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2167,
                      "column": 4
                    },
                    "end": {
                      "line": 2171,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2167-L2171",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var layerVisibility = map.getLayoutProperty('my-layer', 'visibility');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "light",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Light properties to set. Must conform to the "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#light",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MapLibre Style Specification"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LightSpecification"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.validate",
                        "lineNumber": 5,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if the filter conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ],
                    "default": "{}"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setLight",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setLight",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setLight"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets or clears the map's geographical bounds."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pan and zoom operations are constrained within these bounds.\nIf a pan or zoom is performed that would\ndisplay regions outside these bounds, the map will\ninstead display a position and zoom level\nas close as possible to the operation's request while still\nremaining within the bounds."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The maximum bounds to set. If `null` or `undefined` is provided, the function removes the map's maximum bounds.",
                    "lineNumber": 10,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "LngLatBoundsLike"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "bounds"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Define bounds that conform to the `LngLatBoundsLike` object.\nvar bounds = [\n  [-74.04728, 40.68392], // [west, south]\n  [-73.91058, 40.87764]  // [east, north]\n];\n// Set the map's max bounds.\nmap.setMaxBounds(bounds);",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 661,
                    "column": 4
                  },
                  "end": {
                    "line": 681,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 682,
                      "column": 4
                    },
                    "end": {
                      "line": 685,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L682-L685",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Define bounds that conform to the `LngLatBoundsLike` object.\nvar bounds = [\n  [-74.04728, 40.68392], // [west, south]\n  [-73.91058, 40.87764]  // [east, north]\n];\n// Set the map's max bounds.\nmap.setMaxBounds(bounds);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "bounds",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum bounds to set. If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes the map's maximum bounds."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "LngLatBoundsLike"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMaxBounds",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setMaxBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setMaxBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets or clears the map's maximum pitch.\nIf the map's current pitch is higher than the new maximum,\nthe map will pitch to the new maximum."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The maximum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.\n  If `null` or `undefined` is provided, the function removes the current maximum pitch (sets it to 60).",
                    "lineNumber": 5,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "maxPitch"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 797,
                    "column": 4
                  },
                  "end": {
                    "line": 805,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 806,
                      "column": 4
                    },
                    "end": {
                      "line": 823,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L806-L823",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "maxPitch",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.\nIf "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes the current maximum pitch (sets it to 60)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMaxPitch",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setMaxPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setMaxPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets or clears the map's maximum zoom level.\nIf the map's current zoom level is higher than the new maximum,\nthe map will zoom to the new maximum."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The maximum zoom level to set.\n  If `null` or `undefined` is provided, the function removes the current maximum zoom (sets it to 22).",
                    "lineNumber": 5,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "maxZoom"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setMaxZoom(18.75);",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 727,
                    "column": 4
                  },
                  "end": {
                    "line": 737,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 738,
                      "column": 4
                    },
                    "end": {
                      "line": 751,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L738-L751",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setMaxZoom(18.75);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "maxZoom",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum zoom level to set.\nIf "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes the current maximum zoom (sets it to 22)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMaxZoom",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setMaxZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setMaxZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets or clears the map's minimum pitch.\nIf the map's current pitch is lower than the new minimum,\nthe map will pitch to the new minimum."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The minimum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.\n  If `null` or `undefined` is provided, the function removes the current minimum pitch (i.e. sets it to 0).",
                    "lineNumber": 5,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "minPitch"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 762,
                    "column": 4
                  },
                  "end": {
                    "line": 770,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 771,
                      "column": 4
                    },
                    "end": {
                      "line": 788,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L771-L788",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "minPitch",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The minimum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.\nIf "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes the current minimum pitch (i.e. sets it to 0)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMinPitch",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setMinPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setMinPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets or clears the map's minimum zoom level.\nIf the map's current zoom level is lower than the new minimum,\nthe map will zoom to the new minimum."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "It is not always possible to zoom out and reach the set "
                        },
                        {
                          "type": "inlineCode",
                          "value": "minZoom"
                        },
                        {
                          "type": "text",
                          "value": ".\nOther factors such as map height may restrict zooming. For example,\nif the map is 512px tall it will not be possible to zoom below zoom 0\nno matter what the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "minZoom"
                        },
                        {
                          "type": "text",
                          "value": " is set to."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The minimum zoom level to set (-2 - 24).\n  If `null` or `undefined` is provided, the function removes the current minimum zoom (i.e. sets it to -2).",
                    "lineNumber": 10,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    },
                    "name": "minZoom"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setMinZoom(12.25);",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 687,
                    "column": 4
                  },
                  "end": {
                    "line": 702,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 703,
                      "column": 4
                    },
                    "end": {
                      "line": 716,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L703-L716",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setMinZoom(12.25);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "minZoom",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The minimum zoom level to set (-2 - 24).\nIf "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is provided, the function removes the current minimum zoom (i.e. sets it to -2)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NullLiteral"
                        },
                        {
                          "type": "UndefinedLiteral"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMinZoom",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setMinZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setMinZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the padding in pixels around the viewport."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Equivalent to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo({padding: padding})"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 5
                  },
                  {
                    "title": "param",
                    "description": "The desired padding. Format: { left: number, right: number, top: number, bottom: number }",
                    "lineNumber": 6,
                    "type": null,
                    "name": "padding"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 9
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Sets a left padding of 300px, and a top padding of 50px\nmap.setPadding({ left: 300, top: 50 });",
                    "lineNumber": 11
                  }
                ],
                "loc": {
                  "start": {
                    "line": 375,
                    "column": 4
                  },
                  "end": {
                    "line": 389,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 390,
                      "column": 4
                    },
                    "end": {
                      "line": 393,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L390-L393",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Sets a left padding of 300px, and a top padding of 50px\nmap.setPadding({ left: 300, top: 50 });"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "padding",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The desired padding. Format: { left: number, right: number, top: number, bottom: number }"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "setPadding",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setPadding",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setPadding"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the value of a paint property in the specified style layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the layer to set the paint property in.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "layerId"
                  },
                  {
                    "title": "param",
                    "description": "The name of the paint property to set.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "name"
                  },
                  {
                    "title": "param",
                    "description": "The value of the paint property to set.\n  Must be of a type appropriate for the property, as defined in the [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/).",
                    "lineNumber": 5,
                    "type": {
                      "type": "AllLiteral"
                    },
                    "name": "value"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 7,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Whether to check if `value` conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.",
                    "lineNumber": 8,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.validate",
                    "default": "true"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setPaintProperty('my-layer', 'fill-color', '#faafee');",
                    "lineNumber": 10
                  },
                  {
                    "title": "see",
                    "description": "[Change a layer's color with buttons](https://maplibre.org/maplibre-gl-js-docs/example/color-switcher/)",
                    "lineNumber": 12
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2098,
                    "column": 4
                  },
                  "end": {
                    "line": 2112,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2113,
                      "column": 4
                    },
                    "end": {
                      "line": 2116,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2113-L2116",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setPaintProperty('my-layer', 'fill-color', '#faafee');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "layerId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the layer to set the paint property in."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "name",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The name of the paint property to set."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "value",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the paint property to set.\nMust be of a type appropriate for the property, as defined in the "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MapLibre Style Specification"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "AllLiteral"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.validate",
                        "lineNumber": 8,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Whether to check if "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "value"
                                },
                                {
                                  "type": "text",
                                  "value": " conforms to the MapLibre GL Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      }
                    ],
                    "default": "{}"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/color-switcher/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Change a layer's color with buttons"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setPaintProperty",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setPaintProperty",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setPaintProperty"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the map's pitch (tilt). Equivalent to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo({pitch: pitch})"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "The pitch to set, measured in degrees away from the plane of the screen (0-60).",
                    "lineNumber": 4,
                    "type": null,
                    "name": "pitch"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "pitchstart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 8
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 473,
                    "column": 4
                  },
                  "end": {
                    "line": 483,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 484,
                      "column": 4
                    },
                    "end": {
                      "line": 487,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L484-L487",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "pitch",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The pitch to set, measured in degrees away from the plane of the screen (0-60)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "setPitch",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setPitch",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the map's pixel ratio. This allows to override "
                        },
                        {
                          "type": "inlineCode",
                          "value": "devicePixelRatio"
                        },
                        {
                          "type": "text",
                          "value": ".\nAfter this call, the canvas' "
                        },
                        {
                          "type": "inlineCode",
                          "value": "width"
                        },
                        {
                          "type": "text",
                          "value": " attribute will be "
                        },
                        {
                          "type": "inlineCode",
                          "value": "container.clientWidth * pixelRatio"
                        },
                        {
                          "type": "text",
                          "value": "\nand its height attribute will be "
                        },
                        {
                          "type": "inlineCode",
                          "value": "container.clientHeight * pixelRatio"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The pixel ratio.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "pixelRatio"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 625,
                    "column": 4
                  },
                  "end": {
                    "line": 630,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 631,
                      "column": 4
                    },
                    "end": {
                      "line": 638,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L631-L638",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "pixelRatio",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The pixel ratio."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setPixelRatio",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setPixelRatio",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setPixelRatio"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the state of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "renderWorldCopies"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "If `true`, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to `false`:\n- When the map is zoomed out far enough that a single representation of the world does not fill the map's entire\ncontainer, there will be blank space beyond 180 and -180 degrees longitude.\n- Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the\nmap and the other on the left edge of the map) at every zoom level.\n\n`undefined` is treated as `true`, `null` is treated as `false`.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    "name": "renderWorldCopies"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setRenderWorldCopies(true);",
                    "lineNumber": 11
                  },
                  {
                    "title": "see",
                    "description": "[Render world copies](https://maplibre.org/maplibre-gl-js-docs/example/render-world-copies/)",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 845,
                    "column": 4
                  },
                  "end": {
                    "line": 859,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 860,
                      "column": 4
                    },
                    "end": {
                      "line": 863,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L860-L863",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setRenderWorldCopies(true);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "renderWorldCopies",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "If "
                            },
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": ", multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "false"
                            },
                            {
                              "type": "text",
                              "value": ":"
                            }
                          ]
                        },
                        {
                          "type": "list",
                          "ordered": false,
                          "start": null,
                          "spread": false,
                          "children": [
                            {
                              "type": "listItem",
                              "spread": false,
                              "checked": null,
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "When the map is zoomed out far enough that a single representation of the world does not fill the map's entire"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "container, there will be blank space beyond 180 and -180 degrees longitude."
                            }
                          ]
                        },
                        {
                          "type": "list",
                          "ordered": false,
                          "start": null,
                          "spread": false,
                          "children": [
                            {
                              "type": "listItem",
                              "spread": false,
                              "checked": null,
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "map and the other on the left edge of the map) at every zoom level."
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "undefined"
                            },
                            {
                              "type": "text",
                              "value": " is treated as "
                            },
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "null"
                            },
                            {
                              "type": "text",
                              "value": " is treated as "
                            },
                            {
                              "type": "inlineCode",
                              "value": "false"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/render-world-copies/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Render world copies"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setRenderWorldCopies",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setRenderWorldCopies",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setRenderWorldCopies"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Updates the map's MapLibre style object with a new value."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If a style is already set when this is used and options.diff is set to true, the map renderer will attempt to compare the given style\nagainst the map's current state and perform only the changes necessary to make the map style match the desired state. Changes in sprites\n(images used for icons and patterns) and glyphs (fonts for label text) "
                        },
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "cannot"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " be diffed. If the sprites or fonts used in the current\nstyle and the given style are different in any way, the map renderer will force a full update, removing the current style and building\nthe given one from scratch."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A JSON object conforming to the schema described in the\n  [MapLibre Style Specification](https://maplibre.org/maplibre-gl-js-docs/style-spec/), or a URL to such JSON.",
                    "lineNumber": 10,
                    "type": null,
                    "name": "style"
                  },
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 12,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "If false, force a 'full' update, removing the current style\n  and building the given one instead of attempting a diff-based update.",
                    "lineNumber": 13,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "options.diff",
                    "default": "true"
                  },
                  {
                    "title": "param",
                    "description": "Defines a CSS\n  font-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges.\n  In these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n  Set to `false`, to enable font settings from the map's style for these glyph ranges.\n  Forces a full update.",
                    "lineNumber": 15,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "options.localIdeographFontFamily",
                    "default": "'sans-serif'"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 20,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setStyle(\"https://demotiles.maplibre.org/style.json\");",
                    "lineNumber": 22
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1359,
                    "column": 4
                  },
                  "end": {
                    "line": 1384,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1385,
                      "column": 4
                    },
                    "end": {
                      "line": 1397,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1385-L1397",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setStyle(\"https://demotiles.maplibre.org/style.json\");"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "style",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A JSON object conforming to the schema described in the\n"
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MapLibre Style Specification"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ", or a URL to such JSON."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "StyleSpecification"
                        },
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NullLiteral"
                        }
                      ]
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 12,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.diff",
                        "lineNumber": 13,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If false, force a 'full' update, removing the current style\nand building the given one instead of attempting a diff-based update."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "boolean"
                        },
                        "default": "true"
                      },
                      {
                        "title": "param",
                        "name": "options.localIdeographFontFamily",
                        "lineNumber": 15,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Defines a CSS\nfont-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges.\nIn these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\nSet to "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "false"
                                },
                                {
                                  "type": "text",
                                  "value": ", to enable font settings from the map's style for these glyph ranges.\nForces a full update."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        "default": "'sans-serif'"
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setStyle",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setStyle",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setStyle"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Updates the requestManager's transform request with a new function"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\n   Expected to return an object with a `url` property and optionally `headers` and `credentials` properties",
                    "lineNumber": 3,
                    "type": null,
                    "name": "transformRequest"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.setTransformRequest((url: string, resourceType: string) => {});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1399,
                    "column": 4
                  },
                  "end": {
                    "line": 1409,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1410,
                      "column": 4
                    },
                    "end": {
                      "line": 1413,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1410-L1413",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.setTransformRequest((url: string, resourceType: string) => {});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "transformRequest",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\nExpected to return an object with a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "url"
                            },
                            {
                              "type": "text",
                              "value": " property and optionally "
                            },
                            {
                              "type": "inlineCode",
                              "value": "headers"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "credentials"
                            },
                            {
                              "type": "text",
                              "value": " properties"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "RequestTransformFunction"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setTransformRequest",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setTransformRequest",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setTransformRequest"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the map's zoom level. Equivalent to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "jumpTo({zoom: zoom})"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "The zoom level to set (0-20).",
                    "lineNumber": 4,
                    "type": null,
                    "name": "zoom"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 10
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 11
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Zoom to the zoom level 5 without an animated transition\nmap.setZoom(5);",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 241,
                    "column": 4
                  },
                  "end": {
                    "line": 257,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 258,
                      "column": 4
                    },
                    "end": {
                      "line": 261,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L258-L261",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Zoom to the zoom level 5 without an animated transition\nmap.setZoom(5);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "zoom",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The zoom level to set (0-20)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "setZoom",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "setZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#setZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Gets and sets a Boolean indicating whether the map will render boxes\naround all symbols in the data source, revealing which symbols\nwere rendered or which were hidden due to collisions.\nThis information is useful for debugging."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 6,
                    "name": "showCollisionBoxes"
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 8
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2762,
                    "column": 4
                  },
                  "end": {
                    "line": 2772,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2773,
                      "column": 4
                    },
                    "end": {
                      "line": 2773,
                      "column": 76
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2773-L2773",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "showCollisionBoxes",
                "type": {
                  "type": "NameExpression",
                  "name": "boolean"
                },
                "scope": "instance",
                "memberof": "Map",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "showCollisionBoxes",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#showCollisionBoxes"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Gets and sets a Boolean indicating whether the map will visualize\nthe padding offsets."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "showPadding"
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2746,
                    "column": 4
                  },
                  "end": {
                    "line": 2754,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2755,
                      "column": 4
                    },
                    "end": {
                      "line": 2755,
                      "column": 62
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2755-L2755",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "showPadding",
                "type": {
                  "type": "NameExpression",
                  "name": "boolean"
                },
                "scope": "instance",
                "memberof": "Map",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "showPadding",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#showPadding"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Gets and sets a Boolean indicating whether the map will render an outline\naround each tile and the tile ID. These tile boundaries are useful for\ndebugging."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The uncompressed file size of the first vector source is drawn in the top left\ncorner of each tile, next to the tile ID."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 8,
                    "name": "showTileBoundaries"
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 10
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 11
                  },
                  {
                    "title": "example",
                    "description": "map.showTileBoundaries = true;",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2724,
                    "column": 4
                  },
                  "end": {
                    "line": 2738,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2739,
                      "column": 4
                    },
                    "end": {
                      "line": 2739,
                      "column": 76
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2739-L2739",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.showTileBoundaries = true;"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "showTileBoundaries",
                "type": {
                  "type": "NameExpression",
                  "name": "boolean"
                },
                "scope": "instance",
                "memberof": "Map",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "showTileBoundaries",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#showTileBoundaries"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Snaps the map so that north is up (0° bearing), if the current bearing is close enough to it (i.e. within the\n"
                        },
                        {
                          "type": "inlineCode",
                          "value": "bearingSnap"
                        },
                        {
                          "type": "text",
                          "value": " threshold)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 4
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 5,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 6,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 8
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 447,
                    "column": 4
                  },
                  "end": {
                    "line": 457,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 458,
                      "column": 4
                    },
                    "end": {
                      "line": 463,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L458-L463",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "snapToNorth",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "snapToNorth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#snapToNorth"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Stops any animated transition underway."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1179,
                    "column": 4
                  },
                  "end": {
                    "line": 1184,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1185,
                      "column": 4
                    },
                    "end": {
                      "line": 1187,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L1185-L1187",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "stop",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "stop",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#stop"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "TouchPitchHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "TouchPitchHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which allows the user to pitch the map with touch gestures.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "touchPitch"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "TouchPitchHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "TouchPitchHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 352,
                    "column": 4
                  },
                  "end": {
                    "line": 355,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 356,
                      "column": 4
                    },
                    "end": {
                      "line": 356,
                      "column": 34
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L356-L356",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "touchPitch",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "TouchPitchHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchPitch",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#touchPitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The map's "
                        },
                        {
                          "type": "link",
                          "url": "TouchZoomRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "TouchZoomRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", which allows the user to zoom or rotate the map with touch gestures.\nFind more details and examples using "
                        },
                        {
                          "type": "inlineCode",
                          "value": "touchZoomRotate"
                        },
                        {
                          "type": "text",
                          "value": " in the "
                        },
                        {
                          "type": "link",
                          "url": "TouchZoomRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "TouchZoomRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " section."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 346,
                    "column": 4
                  },
                  "end": {
                    "line": 349,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 350,
                      "column": 4
                    },
                    "end": {
                      "line": 350,
                      "column": 44
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L350-L350",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "touchZoomRotate",
                "kind": "member",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "TouchZoomRotateHandler"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchZoomRotate",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#touchZoomRotate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Trigger the rendering of a single frame. Use this method with custom layers to\nrepaint the map when the layer changes. Calling this multiple times before the\nnext frame is rendered will still result in only a single frame being rendered."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.triggerRepaint();",
                    "lineNumber": 4
                  },
                  {
                    "title": "see",
                    "description": "[Add a 3D model](https://maplibre.org/maplibre-gl-js-docs/example/add-3d-model/)",
                    "lineNumber": 6
                  },
                  {
                    "title": "see",
                    "description": "[Add an animated icon to the map](https://maplibre.org/maplibre-gl-js-docs/example/add-image-animated/)",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 2695,
                    "column": 4
                  },
                  "end": {
                    "line": 2703,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 2704,
                      "column": 4
                    },
                    "end": {
                      "line": 2712,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L2704-L2712",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.triggerRepaint();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-3d-model/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add a 3D model"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image-animated/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add an animated icon to the map"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "triggerRepaint",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "triggerRepaint",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#triggerRepaint"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a "
                        },
                        {
                          "type": "link",
                          "url": "LngLat",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "LngLat"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " representing geographical coordinates that correspond\nto the specified pixel coordinates."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The pixel coordinates to unproject.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    },
                    "name": "point"
                  },
                  {
                    "title": "returns",
                    "description": "The {@link LngLat} corresponding to `point`.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "map.on('click', function(e) {\n  // When the map is clicked, get the geographic coordinate.\n  var coordinate = map.unproject(e.point);\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 879,
                    "column": 4
                  },
                  "end": {
                    "line": 890,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 891,
                      "column": 4
                    },
                    "end": {
                      "line": 893,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L891-L893",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.on('click', function(e) {\n  // When the map is clicked, get the geographic coordinate.\n  var coordinate = map.unproject(e.point);\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "point",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The pixel coordinates to unproject."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "link",
                              "url": "LngLat",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLat"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " corresponding to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "point"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "unproject",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "unproject",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#unproject"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Update an existing image in a style. This image can be displayed on the map like any other icon in the style's\nsprite using the image's ID with\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#layout-symbol-icon-image",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "icon-image"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-background-background-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "background-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-fill-fill-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "fill-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\nor "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#paint-line-line-pattern",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "line-pattern"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The ID of the image.",
                    "lineNumber": 8,
                    "type": null,
                    "name": "id"
                  },
                  {
                    "title": "param",
                    "description": "The image as an `HTMLImageElement`, `ImageData`, `ImageBitmap` or object with `width`, `height`, and `data`\nproperties with the same format as `ImageData`.",
                    "lineNumber": 9,
                    "type": null,
                    "name": "image"
                  },
                  {
                    "title": "example",
                    "description": "// If an image with the ID 'cat' already exists in the style's sprite,\n// replace that image with a new image, 'other-cat-icon.png'.\nif (map.hasImage('cat')) map.updateImage('cat', './other-cat-icon.png');",
                    "lineNumber": 12
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1737,
                    "column": 4
                  },
                  "end": {
                    "line": 1753,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1754,
                      "column": 4
                    },
                    "end": {
                      "line": 1786,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/map.ts#L1754-L1786",
                    "path": "src/ui/map.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// If an image with the ID 'cat' already exists in the style's sprite,\n// replace that image with a new image, 'other-cat-icon.png'.\nif (map.hasImage('cat')) map.updateImage('cat', './other-cat-icon.png');"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "id",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The ID of the image."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "image",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The image as an "
                            },
                            {
                              "type": "inlineCode",
                              "value": "HTMLImageElement"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageData"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageBitmap"
                            },
                            {
                              "type": "text",
                              "value": " or object with "
                            },
                            {
                              "type": "inlineCode",
                              "value": "width"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "height"
                            },
                            {
                              "type": "text",
                              "value": ", and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "data"
                            },
                            {
                              "type": "text",
                              "value": "\nproperties with the same format as "
                            },
                            {
                              "type": "inlineCode",
                              "value": "ImageData"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "HTMLImageElement"
                        },
                        {
                          "type": "NameExpression",
                          "name": "ImageBitmap"
                        },
                        {
                          "type": "NameExpression",
                          "name": "ImageData"
                        },
                        {
                          "type": "RecordType",
                          "fields": [
                            {
                              "type": "FieldType",
                              "key": "width",
                              "value": {
                                "type": "NameExpression",
                                "name": "number"
                              }
                            },
                            {
                              "type": "FieldType",
                              "key": "height",
                              "value": {
                                "type": "NameExpression",
                                "name": "number"
                              }
                            },
                            {
                              "type": "FieldType",
                              "key": "data",
                              "value": {
                                "type": "UnionType",
                                "elements": [
                                  {
                                    "type": "NameExpression",
                                    "name": "Uint8Array"
                                  },
                                  {
                                    "type": "NameExpression",
                                    "name": "Uint8ClampedArray"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        {
                          "type": "NameExpression",
                          "name": "StyleImageInterface"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "updateImage",
                "kind": "function",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "updateImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#updateImage"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Increases the map's zoom level by 1."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 4,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 10
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 11
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// zoom the map in one level with a custom animation duration\nmap.zoomIn({duration: 1000});",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 292,
                    "column": 4
                  },
                  "end": {
                    "line": 308,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 309,
                      "column": 4
                    },
                    "end": {
                      "line": 312,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L309-L312",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// zoom the map in one level with a custom animation duration\nmap.zoomIn({duration: 1000});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "zoomIn",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoomIn",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#zoomIn"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Decreases the map's zoom level by 1."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 4,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 5,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 6
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 10
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 11
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// zoom the map out one level with a custom animation offset\nmap.zoomOut({offset: [80, 60]});",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 314,
                    "column": 4
                  },
                  "end": {
                    "line": 330,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 331,
                      "column": 4
                    },
                    "end": {
                      "line": 334,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L331-L334",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// zoom the map out one level with a custom animation offset\nmap.zoomOut({offset: [80, 60]});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "AnimationOptions"
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "zoomOut",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoomOut",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#zoomOut"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Zooms the map to the specified zoom level, with an animated transition."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "Map#",
                    "lineNumber": 3
                  },
                  {
                    "title": "param",
                    "description": "The zoom level to transition to.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "zoom"
                  },
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 5,
                    "type": null,
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Additional properties to be added to event objects of events triggered by this method.",
                    "lineNumber": 6,
                    "type": null,
                    "name": "eventData"
                  },
                  {
                    "title": "fires",
                    "description": "movestart",
                    "lineNumber": 7
                  },
                  {
                    "title": "fires",
                    "description": "zoomstart",
                    "lineNumber": 8
                  },
                  {
                    "title": "fires",
                    "description": "move",
                    "lineNumber": 9
                  },
                  {
                    "title": "fires",
                    "description": "zoom",
                    "lineNumber": 10
                  },
                  {
                    "title": "fires",
                    "description": "moveend",
                    "lineNumber": 11
                  },
                  {
                    "title": "fires",
                    "description": "zoomend",
                    "lineNumber": 12
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Zoom to the zoom level 5 without an animated transition\nmap.zoomTo(5);\n// Zoom to the zoom level 8 with an animated transition\nmap.zoomTo(8, {\n  duration: 2000,\n  offset: [100, 50]\n});",
                    "lineNumber": 14
                  }
                ],
                "loc": {
                  "start": {
                    "line": 263,
                    "column": 4
                  },
                  "end": {
                    "line": 285,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 286,
                      "column": 4
                    },
                    "end": {
                      "line": 290,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L286-L290",
                    "path": "src/ui/camera.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Zoom to the zoom level 5 without an animated transition\nmap.zoomTo(5);\n// Zoom to the zoom level 8 with an animated transition\nmap.zoomTo(8, {\n  duration: 2000,\n  offset: [100, 50]\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "zoom",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The zoom level to transition to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "AnimationOptions"
                          },
                          {
                            "type": "NullLiteral"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "title": "param",
                    "name": "eventData",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Additional properties to be added to event objects of events triggered by this method."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "AllLiteral"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "Map",
                "name": "zoomTo",
                "kind": "function",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoomTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map#zoomTo"
              }
            ],
            "events": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the user cancels a \"box zoom\" interaction, or when the bounding box does not meet the minimum size threshold.\nSee "
                        },
                        {
                          "type": "link",
                          "url": "BoxZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "BoxZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "boxzoomcancel",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// the user cancels a \"box zoom\" interaction.\nmap.on('boxzoomcancel', function() {\n  console.log('A boxzoomcancel event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1073,
                    "column": 4
                  },
                  "end": {
                    "line": 1089,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1090,
                      "column": 6
                    },
                    "end": {
                      "line": 1090,
                      "column": 21
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1090-L1090",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// the user cancels a \"box zoom\" interaction.\nmap.on('boxzoomcancel', function() {\n  console.log('A boxzoomcancel event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "boxzoomcancel",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "boxzoomcancel",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:boxzoomcancel"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"box zoom\" interaction ends.  See "
                        },
                        {
                          "type": "link",
                          "url": "BoxZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "BoxZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "boxzoomend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a \"box zoom\" interaction ends.\nmap.on('boxzoomend', function() {\n  console.log('A boxzoomend event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1054,
                    "column": 4
                  },
                  "end": {
                    "line": 1070,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1071,
                      "column": 6
                    },
                    "end": {
                      "line": 1071,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1071-L1071",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a \"box zoom\" interaction ends.\nmap.on('boxzoomend', function() {\n  console.log('A boxzoomend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "boxzoomend",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "boxzoomend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:boxzoomend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"box zoom\" interaction starts. See "
                        },
                        {
                          "type": "link",
                          "url": "BoxZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "BoxZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "boxzoomstart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a \"box zoom\" interaction starts.\nmap.on('boxzoomstart', function() {\n  console.log('A boxzoomstart event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1036,
                    "column": 4
                  },
                  "end": {
                    "line": 1051,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1052,
                      "column": 6
                    },
                    "end": {
                      "line": 1052,
                      "column": 20
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1052-L1052",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a \"box zoom\" interaction starts.\nmap.on('boxzoomstart', function() {\n  console.log('A boxzoomstart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapLibreZoomEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "boxzoomstart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "boxzoomstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:boxzoomstart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is pressed and released at the same point on the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only when the\npoint that is pressed and released contains a visible portion of the specifed layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "click",
                    "lineNumber": 7
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 8
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 9
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('click', function(e) {\n  console.log('A click event has occurred at ' + e.lngLat);\n});",
                    "lineNumber": 11
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('click', 'poi-label', function(e) {\n  console.log('A click event has occurred on a visible portion of the poi-label layer at ' + e.lngLat);\n});",
                    "lineNumber": 18
                  },
                  {
                    "title": "see",
                    "description": "[Measure distances](https://maplibre.org/maplibre-gl-js-docs/example/measure/)",
                    "lineNumber": 25
                  },
                  {
                    "title": "see",
                    "description": "[Center the map on a clicked symbol](https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/)",
                    "lineNumber": 26
                  }
                ],
                "loc": {
                  "start": {
                    "line": 515,
                    "column": 4
                  },
                  "end": {
                    "line": 542,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 543,
                      "column": 6
                    },
                    "end": {
                      "line": 543,
                      "column": 13
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L543-L543",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('click', function(e) {\n  console.log('A click event has occurred at ' + e.lngLat);\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('click', 'poi-label', function(e) {\n  console.log('A click event has occurred on a visible portion of the poi-label layer at ' + e.lngLat);\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/measure/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Measure distances"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Center the map on a clicked symbol"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "click",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "click",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:click"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the right button of the mouse is clicked or the context menu key is pressed within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "contextmenu",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the right mouse button is\n// pressed within the map.\nmap.on('contextmenu', function() {\n  console.log('A contextmenu event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 641,
                    "column": 4
                  },
                  "end": {
                    "line": 657,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 6
                    },
                    "end": {
                      "line": 658,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L658-L658",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the right mouse button is\n// pressed within the map.\nmap.on('contextmenu', function() {\n  console.log('A contextmenu event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "contextmenu",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "contextmenu",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:contextmenu"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when any map data loads or changes. See "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "\nfor more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "data",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when map data loads or changes.\nmap.on('data', function() {\n  console.log('A data event occurred.');\n});",
                    "lineNumber": 8
                  },
                  {
                    "title": "see",
                    "description": "[Display HTML clusters with custom properties](https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/)",
                    "lineNumber": 16
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1247,
                    "column": 4
                  },
                  "end": {
                    "line": 1264,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1265,
                      "column": 6
                    },
                    "end": {
                      "line": 1265,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1265-L1265",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when map data loads or changes.\nmap.on('data', function() {\n  console.log('A data event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display HTML clusters with custom properties"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "data",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "data",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:data"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a request for one of the map's sources' tiles is aborted.\nSee "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dataabort",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a request for one of the map's sources' tiles is aborted.\nmap.on('dataabort', function() {\n  console.log('A dataabort event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1397,
                    "column": 4
                  },
                  "end": {
                    "line": 1413,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1414,
                      "column": 6
                    },
                    "end": {
                      "line": 1414,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1414-L1414",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a request for one of the map's sources' tiles is aborted.\nmap.on('dataabort', function() {\n  console.log('A dataabort event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dataabort",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dataabort",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:dataabort"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when any map data (style, source, tile, etc) begins loading or\nchanging asyncronously. All "
                        },
                        {
                          "type": "inlineCode",
                          "value": "dataloading"
                        },
                        {
                          "type": "text",
                          "value": " events are followed by a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "data"
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "inlineCode",
                          "value": "dataabort"
                        },
                        {
                          "type": "text",
                          "value": " or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "error"
                        },
                        {
                          "type": "text",
                          "value": " event. See "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dataloading",
                    "lineNumber": 5
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when any map data begins loading\n// or changing asynchronously.\nmap.on('dataloading', function() {\n  console.log('A dataloading event occurred.');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1305,
                    "column": 4
                  },
                  "end": {
                    "line": 1323,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1324,
                      "column": 6
                    },
                    "end": {
                      "line": 1324,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1324-L1324",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when any map data begins loading\n// or changing asynchronously.\nmap.on('dataloading', function() {\n  console.log('A dataloading event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dataloading",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dataloading",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:dataloading"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is pressed and released twice at the same point on\nthe map in rapid succession."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only\nwhen the point that is clicked twice contains a visible portion of the specifed layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dblclick",
                    "lineNumber": 8
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 9
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 10
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('dblclick', function(e) {\n  console.log('A dblclick event has occurred at ' + e.lngLat);\n});",
                    "lineNumber": 12
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('dblclick', 'poi-label', function(e) {\n  console.log('A dblclick event has occurred on a visible portion of the poi-label layer at ' + e.lngLat);\n});",
                    "lineNumber": 19
                  }
                ],
                "loc": {
                  "start": {
                    "line": 545,
                    "column": 4
                  },
                  "end": {
                    "line": 571,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 572,
                      "column": 6
                    },
                    "end": {
                      "line": 572,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L572-L572",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('dblclick', function(e) {\n  console.log('A dblclick event has occurred at ' + e.lngLat);\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('dblclick', 'poi-label', function(e) {\n  console.log('A dblclick event has occurred on a visible portion of the poi-label layer at ' + e.lngLat);\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dblclick",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dblclick",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:dblclick"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired repeatedly during a \"drag to pan\" interaction. See "
                        },
                        {
                          "type": "link",
                          "url": "DragPanHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragPanHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "drag",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly  during a \"drag to pan\" interaction.\nmap.on('drag', function() {\n  console.log('A drag event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 830,
                    "column": 4
                  },
                  "end": {
                    "line": 845,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 846,
                      "column": 6
                    },
                    "end": {
                      "line": 846,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L846-L846",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly  during a \"drag to pan\" interaction.\nmap.on('drag', function() {\n  console.log('A drag event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "drag",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "drag",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:drag"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"drag to pan\" interaction ends. See "
                        },
                        {
                          "type": "link",
                          "url": "DragPanHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragPanHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dragend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a \"drag to pan\" interaction ends.\nmap.on('dragend', function() {\n  console.log('A dragend event occurred.');\n});",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable marker](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/)",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 848,
                    "column": 4
                  },
                  "end": {
                    "line": 864,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 865,
                      "column": 6
                    },
                    "end": {
                      "line": 865,
                      "column": 15
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L865-L865",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a \"drag to pan\" interaction ends.\nmap.on('dragend', function() {\n  console.log('A dragend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable marker"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dragend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dragend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:dragend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"drag to pan\" interaction starts. See "
                        },
                        {
                          "type": "link",
                          "url": "DragPanHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragPanHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dragstart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a \"drag to pan\" interaction starts.\nmap.on('dragstart', function() {\n  console.log('A dragstart event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 812,
                    "column": 4
                  },
                  "end": {
                    "line": 827,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 828,
                      "column": 6
                    },
                    "end": {
                      "line": 828,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L828-L828",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a \"drag to pan\" interaction starts.\nmap.on('dragstart', function() {\n  console.log('A dragstart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dragstart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "dragstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:dragstart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when an error occurs. This is GL JS's primary error reporting\nmechanism. We use an event instead of "
                        },
                        {
                          "type": "inlineCode",
                          "value": "throw"
                        },
                        {
                          "type": "text",
                          "value": " to better accommodate\nasyncronous operations. If no listeners are bound to the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "error"
                        },
                        {
                          "type": "text",
                          "value": " event, the\nerror will be printed to the console."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "error",
                    "lineNumber": 6
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 7
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 8
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 9,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "error",
                          "value": {
                            "type": "RecordType",
                            "fields": [
                              {
                                "type": "FieldType",
                                "key": "message",
                                "value": {
                                  "type": "NameExpression",
                                  "name": "string"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when an error occurs.\nmap.on('error', function() {\n  console.log('A error event occurred.');\n});",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1226,
                    "column": 4
                  },
                  "end": {
                    "line": 1244,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1245,
                      "column": 6
                    },
                    "end": {
                      "line": 1245,
                      "column": 13
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1245-L1245",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when an error occurs.\nmap.on('error', function() {\n  console.log('A error event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 9,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "error",
                          "value": {
                            "type": "RecordType",
                            "fields": [
                              {
                                "type": "FieldType",
                                "key": "message",
                                "value": {
                                  "type": "NameExpression",
                                  "name": "string"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "error",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "error",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:error"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired after the last frame rendered before the map enters an\n\"idle\" state:"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "No camera transitions are in progress"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "All currently requested tiles have loaded"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "All fade/transition animations have completed"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "idle",
                    "lineNumber": 8
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 9
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 10
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before the map enters an \"idle\" state.\nmap.on('idle', function() {\n  console.log('A idle event occurred.');\n});",
                    "lineNumber": 11
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1187,
                    "column": 4
                  },
                  "end": {
                    "line": 1206,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1207,
                      "column": 6
                    },
                    "end": {
                      "line": 1207,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1207-L1207",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before the map enters an \"idle\" state.\nmap.on('idle', function() {\n  console.log('A idle event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "idle",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "idle",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:idle"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired immediately after all necessary resources have been downloaded\nand the first visually complete rendering of the map has occurred."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "load",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the map has finished loading.\nmap.on('load', function() {\n  console.log('A load event occurred.');\n});",
                    "lineNumber": 8
                  },
                  {
                    "title": "see",
                    "description": "[Draw GeoJSON points](https://maplibre.org/maplibre-gl-js-docs/example/geojson-markers/)",
                    "lineNumber": 16
                  },
                  {
                    "title": "see",
                    "description": "[Add live realtime data](https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/)",
                    "lineNumber": 17
                  },
                  {
                    "title": "see",
                    "description": "[Animate a point](https://maplibre.org/maplibre-gl-js-docs/example/animate-point-along-line/)",
                    "lineNumber": 18
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1143,
                    "column": 4
                  },
                  "end": {
                    "line": 1162,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1163,
                      "column": 6
                    },
                    "end": {
                      "line": 1163,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1163-L1163",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the map has finished loading.\nmap.on('load', function() {\n  console.log('A load event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/geojson-markers/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Draw GeoJSON points"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/live-geojson/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add live realtime data"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/animate-point-along-line/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Animate a point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "load",
                "memberof": "Map",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "load",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:load"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is pressed within the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only when the\nthe cursor is pressed while inside a visible portion of the specifed layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mousedown",
                    "lineNumber": 7
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 8
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 9
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mousedown', function() {\n  console.log('A mousedown event has occurred.');\n});",
                    "lineNumber": 11
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mousedown', 'poi-label', function() {\n  console.log('A mousedown event has occurred on a visible portion of the poi-label layer.');\n});",
                    "lineNumber": 18
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 25
                  }
                ],
                "loc": {
                  "start": {
                    "line": 392,
                    "column": 4
                  },
                  "end": {
                    "line": 418,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 419,
                      "column": 4
                    },
                    "end": {
                      "line": 1433,
                      "column": 23
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L419-L1433",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mousedown', function() {\n  console.log('A mousedown event has occurred.');\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mousedown', 'poi-label', function() {\n  console.log('A mousedown event has occurred on a visible portion of the poi-label layer.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mousedown",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mousedown",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mousedown"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) enters a visible portion of a specified layer from\noutside that layer or outside the map canvas."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Important:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event can only be listened for when "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " includes three arguments,\nwhere the second argument specifies the desired layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mouseenter",
                    "lineNumber": 7
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 8
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 9
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseenter', 'water', function() {\n  console.log('A mouseenter event occurred on a visible portion of the water layer.');\n});",
                    "lineNumber": 11
                  },
                  {
                    "title": "see",
                    "description": "[Center the map on a clicked symbol](https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/)",
                    "lineNumber": 18
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
                    "lineNumber": 19
                  }
                ],
                "loc": {
                  "start": {
                    "line": 574,
                    "column": 4
                  },
                  "end": {
                    "line": 594,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 595,
                      "column": 6
                    },
                    "end": {
                      "line": 595,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L595-L595",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseenter', 'water', function() {\n  console.log('A mouseenter event occurred on a visible portion of the water layer.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/center-on-symbol/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Center the map on a clicked symbol"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mouseenter",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mouseenter",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mouseenter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) leaves a visible portion of a specified layer, or leaves\nthe map canvas."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Important:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event can only be listened for when "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " includes three arguements,\nwhere the second argument specifies the desired layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mouseleave",
                    "lineNumber": 7
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 8
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 9
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the pointing device leaves\n// a visible portion of the specified layer.\nmap.on('mouseleave', 'water', function() {\n  console.log('A mouseleave event occurred.');\n});",
                    "lineNumber": 11
                  },
                  {
                    "title": "see",
                    "description": "[Highlight features under the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/)",
                    "lineNumber": 20
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
                    "lineNumber": 21
                  }
                ],
                "loc": {
                  "start": {
                    "line": 597,
                    "column": 4
                  },
                  "end": {
                    "line": 619,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 620,
                      "column": 6
                    },
                    "end": {
                      "line": 620,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L620-L620",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the pointing device leaves\n// a visible portion of the specified layer.\nmap.on('mouseleave', 'water', function() {\n  console.log('A mouseleave event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Highlight features under the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mouseleave",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mouseleave",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mouseleave"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is moved while the cursor is inside the map.\nAs you move the cursor across the map, the event will fire every time the cursor changes position within the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only when the\nthe cursor is inside a visible portion of the specified layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mousemove",
                    "lineNumber": 8
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 9
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 10
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mousemove', function() {\n  console.log('A mousemove event has occurred.');\n});",
                    "lineNumber": 12
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mousemove', 'poi-label', function() {\n  console.log('A mousemove event has occurred on a visible portion of the poi-label layer.');\n});",
                    "lineNumber": 19
                  },
                  {
                    "title": "see",
                    "description": "[Get coordinates of the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/)",
                    "lineNumber": 26
                  },
                  {
                    "title": "see",
                    "description": "[Highlight features under the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/)",
                    "lineNumber": 27
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on over](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
                    "lineNumber": 28
                  }
                ],
                "loc": {
                  "start": {
                    "line": 483,
                    "column": 4
                  },
                  "end": {
                    "line": 512,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 513,
                      "column": 6
                    },
                    "end": {
                      "line": 513,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L513-L513",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mousemove', function() {\n  console.log('A mousemove event has occurred.');\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mousemove', 'poi-label', function() {\n  console.log('A mousemove event has occurred on a visible portion of the poi-label layer.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 11,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Get coordinates of the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Highlight features under the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on over"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mousemove",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mousemove",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mousemove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a point device (usually a mouse) leaves the map's canvas."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mouseout",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the pointing device leave's\n// the map's canvas.\nmap.on('mouseout', function() {\n  console.log('A mouseout event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 622,
                    "column": 4
                  },
                  "end": {
                    "line": 638,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 639,
                      "column": 6
                    },
                    "end": {
                      "line": 639,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L639-L639",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the pointing device leave's\n// the map's canvas.\nmap.on('mouseout', function() {\n  console.log('A mouseout event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mouseout",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mouseout",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mouseout"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is moved within the map.\nAs you move the cursor across a web page containing a map,\nthe event will fire each time it enters the map or any child elements."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only when the\nthe cursor is moved inside a visible portion of the specifed layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mouseover",
                    "lineNumber": 9
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 10
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 11
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseover', function() {\n  console.log('A mouseover event has occurred.');\n});",
                    "lineNumber": 13
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mouseover', 'poi-label', function() {\n  console.log('A mouseover event has occurred on a visible portion of the poi-label layer.');\n});",
                    "lineNumber": 20
                  },
                  {
                    "title": "see",
                    "description": "[Get coordinates of the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/)",
                    "lineNumber": 27
                  },
                  {
                    "title": "see",
                    "description": "[Highlight features under the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/)",
                    "lineNumber": 28
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on hover](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
                    "lineNumber": 29
                  }
                ],
                "loc": {
                  "start": {
                    "line": 450,
                    "column": 4
                  },
                  "end": {
                    "line": 480,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 481,
                      "column": 6
                    },
                    "end": {
                      "line": 481,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L481-L481",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseover', function() {\n  console.log('A mouseover event has occurred.');\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mouseover', 'poi-label', function() {\n  console.log('A mouseover event has occurred on a visible portion of the poi-label layer.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Get coordinates of the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/hover-styles/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Highlight features under the mouse pointer"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on hover"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mouseover",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mouseover",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mouseover"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a pointing device (usually a mouse) is released within the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "strong",
                          "children": [
                            {
                              "type": "text",
                              "value": "Note:"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " This event is compatible with the optional "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " parameter.\nIf "
                        },
                        {
                          "type": "inlineCode",
                          "value": "layerId"
                        },
                        {
                          "type": "text",
                          "value": " is included as the second argument in "
                        },
                        {
                          "type": "link",
                          "url": "Map#on",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#on"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", the event listener will fire only when the\nthe cursor is released while inside a visible portion of the specifed layer."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "mouseup",
                    "lineNumber": 7
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 8
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 9
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseup', function() {\n  console.log('A mouseup event has occurred.');\n});",
                    "lineNumber": 11
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mouseup', 'poi-label', function() {\n  console.log('A mouseup event has occurred on a visible portion of the poi-label layer.');\n});",
                    "lineNumber": 18
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 25
                  }
                ],
                "loc": {
                  "start": {
                    "line": 421,
                    "column": 4
                  },
                  "end": {
                    "line": 447,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 448,
                      "column": 6
                    },
                    "end": {
                      "line": 448,
                      "column": 15
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L448-L448",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('mouseup', function() {\n  console.log('A mouseup event has occurred.');\n});"
                  },
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('mouseup', 'poi-label', function() {\n  console.log('A mouseup event has occurred on a visible portion of the poi-label layer.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapMouseEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "mouseup",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "mouseup",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:mouseup"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired repeatedly during an animated transition from one view to\nanother, as the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "move",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during an animated transition.\nmap.on('move', function() {\n  console.log('A move event occurred.');\n});",
                    "lineNumber": 8
                  },
                  {
                    "title": "see",
                    "description": "[Display HTML clusters with custom properties](https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/)",
                    "lineNumber": 16
                  }
                ],
                "loc": {
                  "start": {
                    "line": 772,
                    "column": 4
                  },
                  "end": {
                    "line": 789,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 790,
                      "column": 6
                    },
                    "end": {
                      "line": 790,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L790-L790",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during an animated transition.\nmap.on('move', function() {\n  console.log('A move event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display HTML clusters with custom properties"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "move",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "move",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:move"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired just after the map completes a transition from one\nview to another, as the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#jumpTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#jumpTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "moveend",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after the map completes a transition.\nmap.on('moveend', function() {\n  console.log('A moveend event occurred.');\n});",
                    "lineNumber": 8
                  },
                  {
                    "title": "see",
                    "description": "[Display HTML clusters with custom properties](https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/)",
                    "lineNumber": 16
                  }
                ],
                "loc": {
                  "start": {
                    "line": 792,
                    "column": 4
                  },
                  "end": {
                    "line": 809,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 810,
                      "column": 6
                    },
                    "end": {
                      "line": 810,
                      "column": 15
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L810-L810",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after the map completes a transition.\nmap.on('moveend', function() {\n  console.log('A moveend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/cluster-html/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display HTML clusters with custom properties"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "moveend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "moveend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:moveend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired just before the map begins a transition from one\nview to another, as the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#jumpTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#jumpTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "movestart",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before the map begins a transition\n// from one view to another.\nmap.on('movestart', function() {\n  console.log('A movestart` event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 752,
                    "column": 4
                  },
                  "end": {
                    "line": 769,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 770,
                      "column": 6
                    },
                    "end": {
                      "line": 770,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L770-L770",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before the map begins a transition\n// from one view to another.\nmap.on('movestart', function() {\n  console.log('A movestart` event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "RecordType",
                      "fields": [
                        {
                          "type": "FieldType",
                          "key": "originalEvent",
                          "value": {
                            "type": "NameExpression",
                            "name": "DragEvent"
                          }
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "movestart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "movestart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:movestart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired repeatedly during the map's pitch (tilt) animation between\none state and another as the result of either user interaction\nor methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "pitch",
                    "lineNumber": 5
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during a pitch (tilt) transition.\nmap.on('pitch', function() {\n  console.log('A pitch event occurred.');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 997,
                    "column": 4
                  },
                  "end": {
                    "line": 1014,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1015,
                      "column": 6
                    },
                    "end": {
                      "line": 1015,
                      "column": 13
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1015-L1015",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during a pitch (tilt) transition.\nmap.on('pitch', function() {\n  console.log('A pitch event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "pitch",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "pitch",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:pitch"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired immediately after the map's pitch (tilt) finishes changing as\nthe result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "pitchend",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a pitch (tilt) transition ends.\nmap.on('pitchend', function() {\n  console.log('A pitchend event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1017,
                    "column": 4
                  },
                  "end": {
                    "line": 1033,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1034,
                      "column": 6
                    },
                    "end": {
                      "line": 1034,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1034-L1034",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a pitch (tilt) transition ends.\nmap.on('pitchend', function() {\n  console.log('A pitchend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "pitchend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "pitchend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:pitchend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired whenever the map's pitch (tilt) begins a change as\nthe result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " ."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "pitchstart",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a pitch (tilt) transition starts.\nmap.on('pitchstart', function() {\n  console.log('A pitchstart event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 978,
                    "column": 4
                  },
                  "end": {
                    "line": 994,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 995,
                      "column": 6
                    },
                    "end": {
                      "line": 995,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L995-L995",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a pitch (tilt) transition starts.\nmap.on('pitchstart', function() {\n  console.log('A pitchstart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapEventData"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "pitchstart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "pitchstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:pitchstart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired immediately after the map has been removed with "
                        },
                        {
                          "type": "link",
                          "url": "Map.event:remove",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:remove"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "remove",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after the map is removed.\nmap.on('remove', function() {\n  console.log('A remove event occurred.');\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1209,
                    "column": 4
                  },
                  "end": {
                    "line": 1223,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1224,
                      "column": 6
                    },
                    "end": {
                      "line": 1224,
                      "column": 14
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1224-L1224",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after the map is removed.\nmap.on('remove', function() {\n  console.log('A remove event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "remove",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "remove",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:remove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired whenever the map is drawn to the screen, as the result of"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "a change to the map's position, zoom, pitch, or bearing"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "a change to the map's style"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "a change to a GeoJSON source"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "the loading of a vector tile, GeoJSON file, glyph, or sprite"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "render",
                    "lineNumber": 8
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 9
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 10
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// whenever the map is drawn to the screen.\nmap.on('render', function() {\n  console.log('A render event occurred.');\n});",
                    "lineNumber": 11
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1165,
                    "column": 4
                  },
                  "end": {
                    "line": 1184,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1185,
                      "column": 6
                    },
                    "end": {
                      "line": 1185,
                      "column": 14
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1185-L1185",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// whenever the map is drawn to the screen.\nmap.on('render', function() {\n  console.log('A render event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "render",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "render",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:render"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired immediately after the map has been resized."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "resize",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// immediately after the map has been resized.\nmap.on('resize', function() {\n  console.log('A resize event occurred.');\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1092,
                    "column": 4
                  },
                  "end": {
                    "line": 1106,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1107,
                      "column": 6
                    },
                    "end": {
                      "line": 1107,
                      "column": 14
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1107-L1107",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// immediately after the map has been resized.\nmap.on('resize', function() {\n  console.log('A resize event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "resize",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "resize",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:resize"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired repeatedly during a \"drag to rotate\" interaction. See "
                        },
                        {
                          "type": "link",
                          "url": "DragRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "rotate",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during \"drag to rotate\" interaction.\nmap.on('rotate', function() {\n  console.log('A rotate event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 942,
                    "column": 4
                  },
                  "end": {
                    "line": 957,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 958,
                      "column": 6
                    },
                    "end": {
                      "line": 958,
                      "column": 14
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L958-L958",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during \"drag to rotate\" interaction.\nmap.on('rotate', function() {\n  console.log('A rotate event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "rotate",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "rotate",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:rotate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"drag to rotate\" interaction ends. See "
                        },
                        {
                          "type": "link",
                          "url": "DragRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "rotateend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a \"drag to rotate\" interaction ends.\nmap.on('rotateend', function() {\n  console.log('A rotateend event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 960,
                    "column": 4
                  },
                  "end": {
                    "line": 975,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 976,
                      "column": 6
                    },
                    "end": {
                      "line": 976,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L976-L976",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a \"drag to rotate\" interaction ends.\nmap.on('rotateend', function() {\n  console.log('A rotateend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "rotateend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "rotateend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:rotateend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a \"drag to rotate\" interaction starts. See "
                        },
                        {
                          "type": "link",
                          "url": "DragRotateHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "DragRotateHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "rotatestart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a \"drag to rotate\" interaction starts.\nmap.on('rotatestart', function() {\n  console.log('A rotatestart event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 924,
                    "column": 4
                  },
                  "end": {
                    "line": 939,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 940,
                      "column": 6
                    },
                    "end": {
                      "line": 940,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L940-L940",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a \"drag to rotate\" interaction starts.\nmap.on('rotatestart', function() {\n  console.log('A rotatestart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "rotatestart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "rotatestart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:rotatestart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when one of the map's sources loads or changes, including if a tile belonging\nto a source loads or changes. See "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "sourcedata",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when one of the map's sources loads or changes.\nmap.on('sourcedata', function() {\n  console.log('A sourcedata event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1286,
                    "column": 4
                  },
                  "end": {
                    "line": 1302,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1303,
                      "column": 6
                    },
                    "end": {
                      "line": 1303,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1303-L1303",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when one of the map's sources loads or changes.\nmap.on('sourcedata', function() {\n  console.log('A sourcedata event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "sourcedata",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "sourcedata",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:sourcedata"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a request for one of the map's sources' tiles is aborted.\nSee "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "sourcedataabort",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a request for one of the map's sources' tiles is aborted.\nmap.on('sourcedataabort', function() {\n  console.log('A sourcedataabort event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1416,
                    "column": 4
                  },
                  "end": {
                    "line": 1432,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1433,
                      "column": 6
                    },
                    "end": {
                      "line": 1433,
                      "column": 23
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1433-L1433",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a request for one of the map's sources' tiles is aborted.\nmap.on('sourcedataabort', function() {\n  console.log('A sourcedataabort event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "sourcedataabort",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "sourcedataabort",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:sourcedataabort"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when one of the map's sources begins loading or changing asyncronously.\nAll "
                        },
                        {
                          "type": "inlineCode",
                          "value": "sourcedataloading"
                        },
                        {
                          "type": "text",
                          "value": " events are followed by a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "sourcedata"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "sourcedataabort"
                        },
                        {
                          "type": "text",
                          "value": " or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "error"
                        },
                        {
                          "type": "text",
                          "value": " event.\nSee "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "sourcedataloading",
                    "lineNumber": 5
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// map's sources begin loading or\n// changing asyncronously.\nmap.on('sourcedataloading', function() {\n  console.log('A sourcedataloading event occurred.');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1347,
                    "column": 4
                  },
                  "end": {
                    "line": 1365,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1366,
                      "column": 6
                    },
                    "end": {
                      "line": 1366,
                      "column": 25
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1366-L1366",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// map's sources begin loading or\n// changing asyncronously.\nmap.on('sourcedataloading', function() {\n  console.log('A sourcedataloading event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "sourcedataloading",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "sourcedataloading",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:sourcedataloading"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the map's style loads or changes. See\n"
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "styledata",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the map's style loads or changes.\nmap.on('styledata', function() {\n  console.log('A styledata event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1267,
                    "column": 4
                  },
                  "end": {
                    "line": 1283,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1284,
                      "column": 6
                    },
                    "end": {
                      "line": 1284,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1284-L1284",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the map's style loads or changes.\nmap.on('styledata', function() {\n  console.log('A styledata event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "styledata",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "styledata",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:styledata"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the map's style begins loading or changing asyncronously.\nAll "
                        },
                        {
                          "type": "inlineCode",
                          "value": "styledataloading"
                        },
                        {
                          "type": "text",
                          "value": " events are followed by a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "styledata"
                        },
                        {
                          "type": "text",
                          "value": "\nor "
                        },
                        {
                          "type": "inlineCode",
                          "value": "error"
                        },
                        {
                          "type": "text",
                          "value": " event. See "
                        },
                        {
                          "type": "link",
                          "url": "MapDataEvent",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "MapDataEvent"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " for more information."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "styledataloading",
                    "lineNumber": 5
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// map's style begins loading or\n// changing asyncronously.\nmap.on('styledataloading', function() {\n  console.log('A styledataloading event occurred.');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1326,
                    "column": 4
                  },
                  "end": {
                    "line": 1344,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1345,
                      "column": 6
                    },
                    "end": {
                      "line": 1345,
                      "column": 24
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1345-L1345",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// map's style begins loading or\n// changing asyncronously.\nmap.on('styledataloading', function() {\n  console.log('A styledataloading event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapDataEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "styledataloading",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "styledataloading",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:styledataloading"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when an icon or pattern needed by the style is missing. The missing image can\nbe added with "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " within this event listener callback to prevent the image from\nbeing skipped. This event can be used to dynamically generate icons and patterns."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "styleimagemissing",
                    "lineNumber": 5
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "property",
                    "description": "The id of the missing image.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// an icon or pattern is missing.\nmap.on('styleimagemissing', function() {\n  console.log('A styleimagemissing event occurred.');\n});",
                    "lineNumber": 9
                  },
                  {
                    "title": "see",
                    "description": "[Generate and add a missing icon to the map](https://maplibre.org/maplibre-gl-js-docs/example/add-image-missing-generated/)",
                    "lineNumber": 17
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1368,
                    "column": 4
                  },
                  "end": {
                    "line": 1386,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1387,
                      "column": 6
                    },
                    "end": {
                      "line": 1387,
                      "column": 25
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1387-L1387",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// an icon or pattern is missing.\nmap.on('styleimagemissing', function() {\n  console.log('A styleimagemissing event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "id",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The id of the missing image."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image-missing-generated/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Generate and add a missing icon to the map"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "styleimagemissing",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "styleimagemissing",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:styleimagemissing"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/Events/touchcancel",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "touchcancel"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event occurs within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "touchcancel",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchcancel event occurs within the map.\nmap.on('touchcancel', function() {\n  console.log('A touchcancel event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 734,
                    "column": 4
                  },
                  "end": {
                    "line": 749,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 750,
                      "column": 6
                    },
                    "end": {
                      "line": 750,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L750-L750",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchcancel event occurs within the map.\nmap.on('touchcancel', function() {\n  console.log('A touchcancel event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "touchcancel",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchcancel",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:touchcancel"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/Events/touchend",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "touchend"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event occurs within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "touchend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchstart event occurs within the map.\nmap.on('touchstart', function() {\n  console.log('A touchstart event occurred.');\n});",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 696,
                    "column": 4
                  },
                  "end": {
                    "line": 712,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 713,
                      "column": 6
                    },
                    "end": {
                      "line": 713,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L713-L713",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchstart event occurs within the map.\nmap.on('touchstart', function() {\n  console.log('A touchstart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "touchend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:touchend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/Events/touchmove",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "touchmove"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event occurs within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "touchmove",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchmove event occurs within the map.\nmap.on('touchmove', function() {\n  console.log('A touchmove event occurred.');\n});",
                    "lineNumber": 7
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 15
                  }
                ],
                "loc": {
                  "start": {
                    "line": 715,
                    "column": 4
                  },
                  "end": {
                    "line": 731,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 732,
                      "column": 6
                    },
                    "end": {
                      "line": 732,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L732-L732",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchmove event occurs within the map.\nmap.on('touchmove', function() {\n  console.log('A touchmove event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "touchmove",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchmove",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:touchmove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/Events/touchstart",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "touchstart"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event occurs within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "touchstart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchstart event occurs within the map.\nmap.on('touchstart', function() {\n  console.log('A touchstart event occurred.');\n});",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable point](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/)",
                    "lineNumber": 14
                  }
                ],
                "loc": {
                  "start": {
                    "line": 678,
                    "column": 4
                  },
                  "end": {
                    "line": 693,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 694,
                      "column": 6
                    },
                    "end": {
                      "line": 694,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L694-L694",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a touchstart event occurs within the map.\nmap.on('touchstart', function() {\nconsole.log('A touchstart event occurred.');\n});"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "MapTouchEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-point/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable point"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "touchstart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "touchstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:touchstart"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the WebGL context is lost."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "webglcontextlost",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the WebGL context is lost.\nmap.on('webglcontextlost', function() {\n  console.log('A webglcontextlost event occurred.');\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1109,
                    "column": 4
                  },
                  "end": {
                    "line": 1123,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1124,
                      "column": 6
                    },
                    "end": {
                      "line": 1124,
                      "column": 24
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1124-L1124",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the WebGL context is lost.\nmap.on('webglcontextlost', function() {\n  console.log('A webglcontextlost event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "webglcontextlost",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "webglcontextlost",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:webglcontextlost"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the WebGL context is restored."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "webglcontextrestored",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the WebGL context is restored.\nmap.on('webglcontextrestored', function() {\n  console.log('A webglcontextrestored event occurred.');\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 1126,
                    "column": 4
                  },
                  "end": {
                    "line": 1140,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 1141,
                      "column": 6
                    },
                    "end": {
                      "line": 1141,
                      "column": 28
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L1141-L1141",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when the WebGL context is restored.\nmap.on('webglcontextrestored', function() {\n  console.log('A webglcontextrestored event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "webglcontextrestored",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "webglcontextrestored",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:webglcontextrestored"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/Events/wheel",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "wheel"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " event occurs within the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "wheel",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapWheelEvent"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a wheel event occurs within the map.\nmap.on('wheel', function() {\n  console.log('A wheel event occurred.');\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 660,
                    "column": 4
                  },
                  "end": {
                    "line": 675,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 676,
                      "column": 6
                    },
                    "end": {
                      "line": 676,
                      "column": 13
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L676-L676",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// when a wheel event occurs within the map.\nmap.on('wheel', function() {\n  console.log('A wheel event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "MapWheelEvent"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "wheel",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "wheel",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:wheel"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired repeatedly during an animated transition from one zoom level to another,\nas the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "zoom",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during a zoom transition.\nmap.on('zoom', function() {\n  console.log('A zoom event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 886,
                    "column": 4
                  },
                  "end": {
                    "line": 902,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 903,
                      "column": 6
                    },
                    "end": {
                      "line": 903,
                      "column": 12
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L903-L903",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// repeatedly during a zoom transition.\nmap.on('zoom', function() {\n  console.log('A zoom event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "zoom",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoom",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:zoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired just after the map completes a transition from one zoom level to another,\nas the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "zoomend",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a zoom transition finishes.\nmap.on('zoomend', function() {\n  console.log('A zoomend event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 905,
                    "column": 4
                  },
                  "end": {
                    "line": 921,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 922,
                      "column": 6
                    },
                    "end": {
                      "line": 922,
                      "column": 15
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L922-L922",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just after a zoom transition finishes.\nmap.on('zoomend', function() {\n  console.log('A zoomend event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "zoomend",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoomend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:zoomend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired just before the map begins a transition from one zoom level to another,\nas the result of either user interaction or methods such as "
                        },
                        {
                          "type": "link",
                          "url": "Map#flyTo",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#flyTo"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "zoomstart",
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "Map",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a zoom transition starts.\nmap.on('zoomstart', function() {\n  console.log('A zoomstart event occurred.');\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 867,
                    "column": 4
                  },
                  "end": {
                    "line": 883,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 884,
                      "column": 6
                    },
                    "end": {
                      "line": 884,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L884-L884",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the map\nvar map = new maplibregl.Map({ // map options });\n// Set an event listener that fires\n// just before a zoom transition starts.\nmap.on('zoomstart', function() {\n  console.log('A zoomstart event occurred.');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 7,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "MapMouseEvent"
                        },
                        {
                          "type": "NameExpression",
                          "name": "MapTouchEvent"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "zoomstart",
                "memberof": "Map",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Map",
                    "kind": "class"
                  },
                  {
                    "name": "zoomstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Map.event:zoomstart"
              }
            ],
            "static": []
          },
          "namespace": "Map"
        }
      ]
    },
    "namespace": "Map class"
  },
  {
    "name": "Properties and options",
    "page": "properties",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "MapLibre GL JS's global properties and options that you can access while initializing your map or accessing information about its status."
            }
          ]
        }
      ]
    },
    "children": [
      "workerCount",
      "maxParallelImageRequests",
      "supported",
      "setRTLTextPlugin",
      "getRTLTextPluginStatus",
      "clearStorage",
      "addProtocol",
      "removeProtocol",
      "AnimationOptions",
      "CameraOptions",
      "PaddingOptions",
      "RequestParameters",
      "StyleImageInterface",
      "CustomLayerInterface",
      "prewarm",
      "clearPrewarmedResources"
    ],
    "kind": "note",
    "path": [
      {
        "name": "Properties and options",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Gets and sets the number of web workers instantiated on a page with GL JS maps.\nBy default, it is set to half the number of CPU cores (capped at 6).\nMake sure to set this property before creating any map instances for it to have effect."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "var",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "workerCount"
            },
            {
              "title": "returns",
              "description": "Number of workers currently configured.",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "maplibregl.workerCount = 2;",
              "lineNumber": 7
            }
          ],
          "loc": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 104,
                "column": 4
              },
              "end": {
                "line": 106,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L104-L106",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.workerCount = 2;"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Number of workers currently configured."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "member",
          "name": "workerCount",
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "path": [
            {
              "name": "workerCount",
              "kind": "member"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "workerCount"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Gets and sets the maximum number of images (raster tiles, sprites, icons) to load in parallel,\nwhich affects performance in raster-heavy maps. 16 by default."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "var",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "maxParallelImageRequests"
            },
            {
              "title": "returns",
              "description": "Number of parallel requests currently configured.",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "maplibregl.maxParallelImageRequests = 10;",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 121,
                "column": 4
              },
              "end": {
                "line": 123,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L121-L123",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.maxParallelImageRequests = 10;"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Number of parallel requests currently configured."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "member",
          "name": "maxParallelImageRequests",
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "path": [
            {
              "name": "maxParallelImageRequests",
              "kind": "member"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "maxParallelImageRequests"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Test whether the browser supports MapLibre GL JS."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 3,
              "name": "supported"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "If `true`,\n  the function will return `false` if the performance of MapLibre GL JS would\n  be dramatically worse than expected (e.g. a software WebGL renderer would be used).",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.failIfMajorPerformanceCaveat",
              "default": "false"
            },
            {
              "title": "return",
              "description": null,
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "// Show an alert if the browser does not support MapLibre GL\nif (!maplibregl.supported()) {\n  alert('Your browser does not support MapLibre GL');\n}",
              "lineNumber": 9
            },
            {
              "title": "see",
              "description": "[Check for browser support](https://maplibre.org/maplibre-gl-js-docs/example/check-for-support/)",
              "lineNumber": 14
            }
          ],
          "loc": {
            "start": {
              "line": 205,
              "column": 0
            },
            "end": {
              "line": 220,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 246,
                "column": 0
              },
              "end": {
                "line": 246,
                "column": 24
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L246-L246",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// Show an alert if the browser does not support MapLibre GL\nif (!maplibregl.supported()) {\n  alert('Your browser does not support MapLibre GL');\n}"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.failIfMajorPerformanceCaveat",
                  "lineNumber": 5,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ",\nthe function will return "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": " if the performance of MapLibre GL JS would\nbe dramatically worse than expected (e.g. a software WebGL renderer would be used)."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                }
              ]
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/check-for-support/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Check for browser support"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "supported",
          "path": [
            {
              "name": "supported",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "supported"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the map's "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://www.mapbox.com/mapbox-gl-js/plugins/#mapbox-gl-rtl-text",
                    "children": [
                      {
                        "type": "text",
                        "value": "RTL text plugin"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ".\nNecessary for supporting the Arabic and Hebrew languages, which are written right-to-left."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 4,
              "name": "setRTLTextPlugin"
            },
            {
              "title": "param",
              "description": "URL pointing to the Mapbox RTL text plugin source.",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "pluginURL"
            },
            {
              "title": "param",
              "description": "Called with an error argument if there is an error.",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "param",
              "description": "If set to `true`, mapboxgl will defer loading the plugin until rtl text is encountered,\n   rtl text will then be rendered only after the plugin finishes loading.",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "lazy"
            },
            {
              "title": "example",
              "description": "maplibregl.setRTLTextPlugin('https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.0/mapbox-gl-rtl-text.js');",
              "lineNumber": 9
            },
            {
              "title": "see",
              "description": "[Add support for right-to-left scripts](https://maplibre.org/maplibre-gl-js-docs/example/mapbox-gl-rtl-text/)",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 222,
              "column": 0
            },
            "end": {
              "line": 234,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 246,
                "column": 0
              },
              "end": {
                "line": 246,
                "column": 24
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L246-L246",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.setRTLTextPlugin('https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.0/mapbox-gl-rtl-text.js');"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "pluginURL",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "URL pointing to the Mapbox RTL text plugin source."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Called with an error argument if there is an error."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "param",
              "name": "lazy",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If set to "
                      },
                      {
                        "type": "inlineCode",
                        "value": "true"
                      },
                      {
                        "type": "text",
                        "value": ", mapboxgl will defer loading the plugin until rtl text is encountered,\nrtl text will then be rendered only after the plugin finishes loading."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/mapbox-gl-rtl-text/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add support for right-to-left scripts"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "setRTLTextPlugin",
          "path": [
            {
              "name": "setRTLTextPlugin",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "setRTLTextPlugin"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Gets the map's "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://www.mapbox.com/mapbox-gl-js/plugins/#mapbox-gl-rtl-text",
                    "children": [
                      {
                        "type": "text",
                        "value": "RTL text plugin"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " status.\nThe status can be "
                  },
                  {
                    "type": "inlineCode",
                    "value": "unavailable"
                  },
                  {
                    "type": "text",
                    "value": " (i.e. not requested or removed), "
                  },
                  {
                    "type": "inlineCode",
                    "value": "loading"
                  },
                  {
                    "type": "text",
                    "value": ", "
                  },
                  {
                    "type": "inlineCode",
                    "value": "loaded"
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "error"
                  },
                  {
                    "type": "text",
                    "value": ".\nIf the status is "
                  },
                  {
                    "type": "inlineCode",
                    "value": "loaded"
                  },
                  {
                    "type": "text",
                    "value": " and the plugin is requested again, an error will be thrown."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 5,
              "name": "getRTLTextPluginStatus"
            },
            {
              "title": "example",
              "description": "const pluginStatus = maplibregl.getRTLTextPluginStatus();",
              "lineNumber": 6
            }
          ],
          "loc": {
            "start": {
              "line": 236,
              "column": 0
            },
            "end": {
              "line": 244,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 246,
                "column": 0
              },
              "end": {
                "line": 246,
                "column": 24
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L246-L246",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "const pluginStatus = maplibregl.getRTLTextPluginStatus();"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "getRTLTextPluginStatus",
          "path": [
            {
              "name": "getRTLTextPluginStatus",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "getRTLTextPluginStatus"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Clears browser storage used by this library. Using this method flushes the MapLibre tile\ncache that is managed by this library. Tiles may still be cached by the browser\nin some cases."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This API is supported on browsers where the "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/Cache",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "Cache"
                      },
                      {
                        "type": "text",
                        "value": " API"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nis supported and enabled. This includes all major browsers when pages are served over\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "https://"
                  },
                  {
                    "type": "text",
                    "value": ", except Internet Explorer and Edge Mobile."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "When called in unsupported browsers or environments (private or incognito mode), the\ncallback will be called with an error argument."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 12,
              "name": "clearStorage"
            },
            {
              "title": "param",
              "description": "Called with an error argument if there is an error.",
              "lineNumber": 13,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "maplibregl.clearStorage();",
              "lineNumber": 14
            }
          ],
          "loc": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 146,
                "column": 4
              },
              "end": {
                "line": 148,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L146-L148",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.clearStorage();"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "callback",
              "lineNumber": 13,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Called with an error argument if there is an error."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "clearStorage",
          "path": [
            {
              "name": "clearStorage",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "clearStorage"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets a custom load tile function that will be called when using a source that starts with a custom url schema.\nThe example below will be triggered for custom:// urls defined in the sources list in the style definitions.\nThe function passed will receive the request parameters and should call the callback with the resulting request,\nfor example a pbf vector tile, non-compressed, represented as ArrayBuffer."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": "addProtocol"
            },
            {
              "title": "param",
              "description": "the protocol to hook, for example 'custom'",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "customProtocol"
            },
            {
              "title": "param",
              "description": "the function to use when trying to fetch a tile specified by the customProtocol",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "loadFn"
            },
            {
              "title": "example",
              "description": "// this will fetch a file using the fetch API (this is obviously a non iteresting example...)\nmaplibre.addProtocol('custom', (params, callback) => {\nfetch(`https://${params.url.split(\"://\")[1]}`)\n.then(t => {\nif (t.status == 200) {\nt.arrayBuffer().then(arr => {\ncallback(null, arr, null, null);\n});\n} else {\ncallback(new Error(`Tile fetch error: ${t.statusText}`));\n}\n})\n.catch(e => {\ncallback(new Error(e));\n});\nreturn { cancel: () => { } };\n});\n// the following is an example of a way to return an error when trying to load a tile\nmaplibre.addProtocol('custom2', (params, callback) => {\n     callback(new Error('someErrorMessage'));\n     return { cancel: () => { } };\n});",
              "lineNumber": 9
            }
          ],
          "loc": {
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 185,
                "column": 4
              },
              "end": {
                "line": 187,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L185-L187",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// this will fetch a file using the fetch API (this is obviously a non iteresting example...)\nmaplibre.addProtocol('custom', (params, callback) => {\nfetch(`https://${params.url.split(\"://\")[1]}`)\n.then(t => {\nif (t.status == 200) {\nt.arrayBuffer().then(arr => {\ncallback(null, arr, null, null);\n});\n} else {\ncallback(new Error(`Tile fetch error: ${t.statusText}`));\n}\n})\n.catch(e => {\ncallback(new Error(e));\n});\nreturn { cancel: () => { } };\n});\n// the following is an example of a way to return an error when trying to load a tile\nmaplibre.addProtocol('custom2', (params, callback) => {\n     callback(new Error('someErrorMessage'));\n     return { cancel: () => { } };\n});"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "customProtocol",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the protocol to hook, for example 'custom'"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "loadFn",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the function to use when trying to fetch a tile specified by the customProtocol"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "addProtocol",
          "path": [
            {
              "name": "addProtocol",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "addProtocol"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Removes a previusly added protocol"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 3,
              "name": "removeProtocol"
            },
            {
              "title": "param",
              "description": "the custom protocol to remove registration for",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "customProtocol"
            },
            {
              "title": "example",
              "description": "maplibregl.removeProtocol('custom');",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 197,
                "column": 4
              },
              "end": {
                "line": 199,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L197-L199",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.removeProtocol('custom');"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "customProtocol",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the custom protocol to remove registration for"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "removeProtocol",
          "path": [
            {
              "name": "removeProtocol",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "removeProtocol"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Options common to map movement methods that involve animation, such as "
                  },
                  {
                    "type": "link",
                    "url": "Map#panBy",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#panBy"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " and\n"
                  },
                  {
                    "type": "link",
                    "url": "Map#easeTo",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#easeTo"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", controlling the duration and easing function of the animation. All properties\nare optional."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "AnimationOptions"
            },
            {
              "title": "property",
              "description": "The animation's duration, measured in milliseconds.",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "duration"
            },
            {
              "title": "property",
              "description": "A function taking a time in the range 0..1 and returning a number where 0 is\n  the initial state and 1 is the final state.",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "easing"
            },
            {
              "title": "property",
              "description": "of the target center relative to real map container center at the end of animation.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "PointLike"
              },
              "name": "offset"
            },
            {
              "title": "property",
              "description": "If `false`, no animation will occur.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "animate"
            },
            {
              "title": "property",
              "description": "If `true`, then the animation is considered essential and will not be affected by\n  [`prefers-reduced-motion`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion).",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "essential"
            }
          ],
          "loc": {
            "start": {
              "line": 103,
              "column": 0
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 117,
                "column": 0
              },
              "end": {
                "line": 123,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L103-L116",
              "path": "src/ui/camera.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "duration",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The animation's duration, measured in milliseconds."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "easing",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function taking a time in the range 0..1 and returning a number where 0 is\nthe initial state and 1 is the final state."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            {
              "title": "property",
              "name": "offset",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "of the target center relative to real map container center at the end of animation."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "PointLike"
              }
            },
            {
              "title": "property",
              "name": "animate",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If "
                      },
                      {
                        "type": "inlineCode",
                        "value": "false"
                      },
                      {
                        "type": "text",
                        "value": ", no animation will occur."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "property",
              "name": "essential",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If "
                      },
                      {
                        "type": "inlineCode",
                        "value": "true"
                      },
                      {
                        "type": "text",
                        "value": ", then the animation is considered essential and will not be affected by\n"
                      },
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "prefers-reduced-motion"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "AnimationOptions",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "AnimationOptions",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "AnimationOptions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Options common to "
                  },
                  {
                    "type": "link",
                    "url": "Map#jumpTo",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#jumpTo"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", "
                  },
                  {
                    "type": "link",
                    "url": "Map#easeTo",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#easeTo"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", and "
                  },
                  {
                    "type": "link",
                    "url": "Map#flyTo",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#flyTo"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", controlling the desired location,\nzoom, bearing, and pitch of the camera. All properties are optional, and when a property is omitted, the current\ncamera value for that property will remain unchanged."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "CameraOptions"
            },
            {
              "title": "property",
              "description": "The desired center.",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "LngLatLike"
              },
              "name": "center"
            },
            {
              "title": "property",
              "description": "The desired zoom level.",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "zoom"
            },
            {
              "title": "property",
              "description": "The desired bearing in degrees. The bearing is the compass direction that\nis \"up\". For example, `bearing: 90` orients the map so that east is up.",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bearing"
            },
            {
              "title": "property",
              "description": "The desired pitch in degrees. The pitch is the angle towards the horizon\nmeasured in degrees with a range between 0 and 60 degrees. For example, pitch: 0 provides the appearance\nof looking straight down at the map, while pitch: 60 tilts the user's perspective towards the horizon.\nIncreasing the pitch value is often used to display 3D objects.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "pitch"
            },
            {
              "title": "property",
              "description": "If `zoom` is specified, `around` determines the point around which the zoom is centered.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "LngLatLike"
              },
              "name": "around"
            },
            {
              "title": "property",
              "description": "Dimensions in pixels applied on each side of the viewport for shifting the vanishing point.",
              "lineNumber": 15,
              "type": {
                "type": "NameExpression",
                "name": "PaddingOptions"
              },
              "name": "padding"
            },
            {
              "title": "example",
              "description": "// set the map's initial perspective with CameraOptions\nvar map = new maplibregl.Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [-73.5804, 45.53483],\n  pitch: 60,\n  bearing: -60,\n  zoom: 10\n});",
              "lineNumber": 16
            },
            {
              "title": "see",
              "description": "[Set pitch and bearing](https://maplibre.org/maplibre-gl-js-docs/example/set-perspective/)",
              "lineNumber": 26
            },
            {
              "title": "see",
              "description": "[Jump to a series of locations](https://maplibre.org/maplibre-gl-js-docs/example/jump-to/)",
              "lineNumber": 27
            },
            {
              "title": "see",
              "description": "[Fly to a location](https://maplibre.org/maplibre-gl-js-docs/example/flyto/)",
              "lineNumber": 28
            },
            {
              "title": "see",
              "description": "[Display buildings in 3D](https://maplibre.org/maplibre-gl-js-docs/example/3d-buildings/)",
              "lineNumber": 29
            }
          ],
          "loc": {
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 59,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 60,
                "column": 0
              },
              "end": {
                "line": 63,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L29-L59",
              "path": "src/ui/camera.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// set the map's initial perspective with CameraOptions\nvar map = new maplibregl.Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [-73.5804, 45.53483],\n  pitch: 60,\n  bearing: -60,\n  zoom: 10\n});"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "center",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired center."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "LngLatLike"
              }
            },
            {
              "title": "property",
              "name": "zoom",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired zoom level."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "bearing",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired bearing in degrees. The bearing is the compass direction that\nis \"up\". For example, "
                      },
                      {
                        "type": "inlineCode",
                        "value": "bearing: 90"
                      },
                      {
                        "type": "text",
                        "value": " orients the map so that east is up."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "pitch",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired pitch in degrees. The pitch is the angle towards the horizon\nmeasured in degrees with a range between 0 and 60 degrees. For example, pitch: 0 provides the appearance\nof looking straight down at the map, while pitch: 60 tilts the user's perspective towards the horizon.\nIncreasing the pitch value is often used to display 3D objects."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "around",
              "lineNumber": 14,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If "
                      },
                      {
                        "type": "inlineCode",
                        "value": "zoom"
                      },
                      {
                        "type": "text",
                        "value": " is specified, "
                      },
                      {
                        "type": "inlineCode",
                        "value": "around"
                      },
                      {
                        "type": "text",
                        "value": " determines the point around which the zoom is centered."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "LngLatLike"
              }
            },
            {
              "title": "property",
              "name": "padding",
              "lineNumber": 15,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Dimensions in pixels applied on each side of the viewport for shifting the vanishing point."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "PaddingOptions"
              }
            }
          ],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/set-perspective/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Set pitch and bearing"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/jump-to/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Jump to a series of locations"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/flyto/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Fly to a location"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/3d-buildings/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display buildings in 3D"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "CameraOptions",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "CameraOptions",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "CameraOptions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Options for setting padding on calls to methods such as "
                  },
                  {
                    "type": "link",
                    "url": "Map#fitBounds",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#fitBounds"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", "
                  },
                  {
                    "type": "link",
                    "url": "Map#fitScreenCoordinates",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#fitScreenCoordinates"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ", and "
                  },
                  {
                    "type": "link",
                    "url": "Map#setPadding",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#setPadding"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ". Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be\nnon-negative integers."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "example",
              "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});",
              "lineNumber": 4
            },
            {
              "title": "example",
              "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: 20\n});",
              "lineNumber": 10
            },
            {
              "title": "see",
              "description": "[Fit to the bounds of a LineString](https://maplibre.org/maplibre-gl-js-docs/example/zoomto-linestring/)",
              "lineNumber": 15
            },
            {
              "title": "see",
              "description": "[Fit a map to a bounding box](https://maplibre.org/maplibre-gl-js-docs/example/fitbounds/)",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 99,
              "column": 0
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 117,
                "column": 0
              },
              "end": {
                "line": 134,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L99-L116",
              "path": "src/geo/edge_insets.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});"
            },
            {
              "description": "var bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: 20\n});"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "top",
              "lineNumber": 121,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "bottom",
              "lineNumber": 125,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "right",
              "lineNumber": 129,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "property",
              "name": "left",
              "lineNumber": 133,
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/zoomto-linestring/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Fit to the bounds of a LineString"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/fitbounds/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Fit a map to a bounding box"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "PaddingOptions",
          "kind": "typedef",
          "type": {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": "top",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": "bottom",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": "right",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": "left",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          },
          "path": [
            {
              "name": "PaddingOptions",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": [
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "Padding in pixels from the bottom of the map canvas.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "bottom"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 122,
                    "column": 4
                  },
                  "end": {
                    "line": 124,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 125,
                      "column": 4
                    },
                    "end": {
                      "line": 125,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L125-L125",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "bottom",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Padding in pixels from the bottom of the map canvas."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "bottom",
                "kind": "member",
                "memberof": "PaddingOptions",
                "scope": "static",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "PaddingOptions",
                    "kind": "typedef"
                  },
                  {
                    "name": "bottom",
                    "kind": "member",
                    "scope": "static"
                  }
                ],
                "namespace": "PaddingOptions.bottom"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "Padding in pixels from the right of the map canvas.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "right"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 130,
                    "column": 4
                  },
                  "end": {
                    "line": 132,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 133,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L133-L133",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "right",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Padding in pixels from the right of the map canvas."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "left",
                "kind": "member",
                "memberof": "PaddingOptions",
                "scope": "static",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "PaddingOptions",
                    "kind": "typedef"
                  },
                  {
                    "name": "left",
                    "kind": "member",
                    "scope": "static"
                  }
                ],
                "namespace": "PaddingOptions.left"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "Padding in pixels from the left of the map canvas.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "left"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 126,
                    "column": 4
                  },
                  "end": {
                    "line": 128,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 129,
                      "column": 4
                    },
                    "end": {
                      "line": 129,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L129-L129",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "left",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Padding in pixels from the left of the map canvas."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "right",
                "kind": "member",
                "memberof": "PaddingOptions",
                "scope": "static",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "PaddingOptions",
                    "kind": "typedef"
                  },
                  {
                    "name": "right",
                    "kind": "member",
                    "scope": "static"
                  }
                ],
                "namespace": "PaddingOptions.right"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "Padding in pixels from the top of the map canvas.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "top"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 118,
                    "column": 4
                  },
                  "end": {
                    "line": 120,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 121,
                      "column": 4
                    },
                    "end": {
                      "line": 121,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L121-L121",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "top",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Padding in pixels from the top of the map canvas."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "top",
                "kind": "member",
                "memberof": "PaddingOptions",
                "scope": "static",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "PaddingOptions",
                    "kind": "typedef"
                  },
                  {
                    "name": "top",
                    "kind": "member",
                    "scope": "static"
                  }
                ],
                "namespace": "PaddingOptions.top"
              }
            ]
          },
          "namespace": "PaddingOptions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "RequestParameters"
                  },
                  {
                    "type": "text",
                    "value": " object to be returned from Map.options.transformRequest callbacks."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "RequestParameters"
            },
            {
              "title": "property",
              "description": "The URL to be requested.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "url"
            },
            {
              "title": "property",
              "description": "The headers to be sent with the request.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "headers"
            },
            {
              "title": "property",
              "description": "Request method `'GET' | 'POST' | 'PUT'`.",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "method"
            },
            {
              "title": "property",
              "description": "Request body.",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "body"
            },
            {
              "title": "property",
              "description": "Response body type to be returned `'string' | 'json' | 'arrayBuffer'`.",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "type"
            },
            {
              "title": "property",
              "description": "`'same-origin'|'include'` Use 'include' to send cookies with cross-origin requests.",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "credentials"
            },
            {
              "title": "property",
              "description": "If true, Resource Timing API information will be collected for these transformed requests and returned in a resourceTiming property of relevant data events.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "collectResourceTiming"
            },
            {
              "title": "example",
              "description": "// use transformRequest to modify requests that begin with `http://myHost`\ntransformRequest: function(url, resourceType) {\n if (resourceType === 'Source' && url.indexOf('http://myHost') > -1) {\n   return {\n     url: url.replace('http', 'https'),\n     headers: { 'my-custom-header': true },\n     credentials: 'include'  // Include cookies for cross-origin requests\n   }\n  }\n }",
              "lineNumber": 10
            }
          ],
          "loc": {
            "start": {
              "line": 43,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 66,
                "column": 0
              },
              "end": {
                "line": 74,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L43-L65",
              "path": "src/util/ajax.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// use transformRequest to modify requests that begin with `http://myHost`\ntransformRequest: function(url, resourceType) {\n if (resourceType === 'Source' && url.indexOf('http://myHost') > -1) {\n   return {\n     url: url.replace('http', 'https'),\n     headers: { 'my-custom-header': true },\n     credentials: 'include'  // Include cookies for cross-origin requests\n   }\n  }\n }"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "url",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The URL to be requested."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "headers",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The headers to be sent with the request."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "property",
              "name": "method",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Request method "
                      },
                      {
                        "type": "inlineCode",
                        "value": "'GET' | 'POST' | 'PUT'"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "body",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Request body."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "type",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Response body type to be returned "
                      },
                      {
                        "type": "inlineCode",
                        "value": "'string' | 'json' | 'arrayBuffer'"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "credentials",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "'same-origin'|'include'"
                      },
                      {
                        "type": "text",
                        "value": " Use 'include' to send cookies with cross-origin requests."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "collectResourceTiming",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "If true, Resource Timing API information will be collected for these transformed requests and returned in a resourceTiming property of relevant data events."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "RequestParameters",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "RequestParameters",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "RequestParameters"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Interface for dynamically generated style images. This is a specification for\nimplementers to model: it is not an exported method or class."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Images implementing this interface can be redrawn for every frame. They can be used to animate\nicons and patterns or make them respond to user input. Style images can implement a\n"
                  },
                  {
                    "type": "link",
                    "url": "StyleImageInterface#render",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "StyleImageInterface#render"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " method. The method is called every frame and\ncan be used to update the image."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "interface",
              "description": "StyleImageInterface",
              "lineNumber": 9
            },
            {
              "title": "see",
              "description": "[Add an animated icon to the map.](https://maplibre.org/maplibre-gl-js-docs/example/add-image-animated/)",
              "lineNumber": 10
            },
            {
              "title": "example",
              "description": "var flashingSquare = {\n    width: 64,\n    height: 64,\n    data: new Uint8Array(64 * 64 * 4),\n\n    onAdd: function(map) {\n        this.map = map;\n    },\n\n    render: function() {\n        // keep repainting while the icon is on the map\n        this.map.triggerRepaint();\n\n        // alternate between black and white based on the time\n        var value = Math.round(Date.now() / 1000) % 2 === 0  ? 255 : 0;\n\n        // check if image needs to be changed\n        if (value !== this.previousValue) {\n            this.previousValue = value;\n\n            var bytesPerPixel = 4;\n            for (var x = 0; x < this.width; x++) {\n                for (var y = 0; y < this.height; y++) {\n                    var offset = (y * this.width + x) * bytesPerPixel;\n                    this.data[offset + 0] = value;\n                    this.data[offset + 1] = value;\n                    this.data[offset + 2] = value;\n                    this.data[offset + 3] = 255;\n                }\n            }\n\n            // return true to indicate that the image changed\n            return true;\n        }\n    }\n }\n\n map.addImage('flashing_square', flashingSquare);",
              "lineNumber": 12
            }
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 75,
                "column": 0
              },
              "end": {
                "line": 125,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L75-L125",
              "path": "src/style/style_image.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var flashingSquare = {\n    width: 64,\n    height: 64,\n    data: new Uint8Array(64 * 64 * 4),\n\n    onAdd: function(map) {\n        this.map = map;\n    },\n\n    render: function() {\n        // keep repainting while the icon is on the map\n        this.map.triggerRepaint();\n\n        // alternate between black and white based on the time\n        var value = Math.round(Date.now() / 1000) % 2 === 0  ? 255 : 0;\n\n        // check if image needs to be changed\n        if (value !== this.previousValue) {\n            this.previousValue = value;\n\n            var bytesPerPixel = 4;\n            for (var x = 0; x < this.width; x++) {\n                for (var y = 0; y < this.height; y++) {\n                    var offset = (y * this.width + x) * bytesPerPixel;\n                    this.data[offset + 0] = value;\n                    this.data[offset + 1] = value;\n                    this.data[offset + 2] = value;\n                    this.data[offset + 3] = 255;\n                }\n            }\n\n            // return true to indicate that the image changed\n            return true;\n        }\n    }\n }\n\n map.addImage('flashing_square', flashingSquare);"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/add-image-animated/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add an animated icon to the map."
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "interface",
          "name": "StyleImageInterface",
          "path": [
            {
              "name": "StyleImageInterface",
              "kind": "interface"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 1,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Uint8Array"
                        },
                        {
                          "type": "NameExpression",
                          "name": "Uint8ClampedArray"
                        }
                      ]
                    },
                    "name": "data"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 84,
                    "column": 4
                  },
                  "end": {
                    "line": 86,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 87,
                      "column": 41
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L87-L87",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 1,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Uint8Array"
                        },
                        {
                          "type": "NameExpression",
                          "name": "Uint8ClampedArray"
                        }
                      ]
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "data",
                "kind": "member",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "type": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "Uint8Array"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Uint8ClampedArray"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "data",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#data"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "height"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 80,
                    "column": 4
                  },
                  "end": {
                    "line": 82,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 83,
                      "column": 4
                    },
                    "end": {
                      "line": 83,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L83-L83",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "height",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "height",
                "kind": "member",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "height",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#height"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optional method called when the layer has been added to the Map with "
                        },
                        {
                          "type": "link",
                          "url": "Map#addImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 3,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "StyleImageInterface",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 6,
                    "name": "onAdd"
                  },
                  {
                    "title": "param",
                    "description": "The Map this custom layer was just added to.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 4
                  },
                  "end": {
                    "line": 113,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 4
                    },
                    "end": {
                      "line": 114,
                      "column": 43
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L114-L114",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The Map this custom layer was just added to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "name": "onAdd",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "onAdd",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#onAdd"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optional method called when the icon is removed from the map with "
                        },
                        {
                          "type": "link",
                          "url": "Map#removeImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#removeImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ".\nThis gives the image a chance to clean up resources and event listeners."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 4,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "StyleImageInterface",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 7,
                    "name": "onRemove"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 115,
                    "column": 4
                  },
                  "end": {
                    "line": 123,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 26
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L124-L124",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "name": "onRemove",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "onRemove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#onRemove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This method is called once before every frame where the icon will be used.\nThe method can optionally update the image's "
                        },
                        {
                          "type": "inlineCode",
                          "value": "data"
                        },
                        {
                          "type": "text",
                          "value": " member with a new image."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If the method updates the image it must return "
                        },
                        {
                          "type": "inlineCode",
                          "value": "true"
                        },
                        {
                          "type": "text",
                          "value": " to commit the change.\nIf the method returns "
                        },
                        {
                          "type": "inlineCode",
                          "value": "false"
                        },
                        {
                          "type": "text",
                          "value": " or nothing the image is assumed to not have changed."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If updates are infrequent it maybe easier to use "
                        },
                        {
                          "type": "link",
                          "url": "Map#updateImage",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#updateImage"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " to update\nthe image instead of implementing this method."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 10,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "StyleImageInterface",
                    "lineNumber": 11
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 12
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 13,
                    "name": "render"
                  },
                  {
                    "title": "return",
                    "description": "`true` if this method updated the image. `false` if the image was not changed.",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 103,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 104,
                      "column": 4
                    },
                    "end": {
                      "line": 104,
                      "column": 27
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L104-L104",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if this method updated the image. "
                            },
                            {
                              "type": "inlineCode",
                              "value": "false"
                            },
                            {
                              "type": "text",
                              "value": " if the image was not changed."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "name": "render",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "render",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#render"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": null,
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "width"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 76,
                    "column": 4
                  },
                  "end": {
                    "line": 78,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 79,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_image.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_image.ts#L79-L79",
                    "path": "src/style/style_image.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "width",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "width",
                "kind": "member",
                "memberof": "StyleImageInterface",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "number"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "StyleImageInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "width",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "StyleImageInterface#width"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "StyleImageInterface"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Interface for custom style layers. This is a specification for\nimplementers to model: it is not an exported method or class."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Custom layers allow a user to render directly into the map's GL context using the map's camera.\nThese layers can be added between any regular layers using "
                  },
                  {
                    "type": "link",
                    "url": "Map#addLayer",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#addLayer"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Custom layers must have a unique "
                  },
                  {
                    "type": "inlineCode",
                    "value": "id"
                  },
                  {
                    "type": "text",
                    "value": " and must have the "
                  },
                  {
                    "type": "inlineCode",
                    "value": "type"
                  },
                  {
                    "type": "text",
                    "value": " of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "\"custom\""
                  },
                  {
                    "type": "text",
                    "value": ".\nThey must implement "
                  },
                  {
                    "type": "inlineCode",
                    "value": "render"
                  },
                  {
                    "type": "text",
                    "value": " and may implement "
                  },
                  {
                    "type": "inlineCode",
                    "value": "prerender"
                  },
                  {
                    "type": "text",
                    "value": ", "
                  },
                  {
                    "type": "inlineCode",
                    "value": "onAdd"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "onRemove"
                  },
                  {
                    "type": "text",
                    "value": ".\nThey can trigger rendering using "
                  },
                  {
                    "type": "link",
                    "url": "Map#triggerRepaint",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map#triggerRepaint"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nand they should appropriately handle "
                  },
                  {
                    "type": "link",
                    "url": "Map.event:webglcontextlost",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map.event:webglcontextlost"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " and\n"
                  },
                  {
                    "type": "link",
                    "url": "Map.event:webglcontextrestored",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map.event:webglcontextrestored"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "renderingMode"
                  },
                  {
                    "type": "text",
                    "value": " property controls whether the layer is treated as a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "\"2d\""
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "\"3d\""
                  },
                  {
                    "type": "text",
                    "value": " map layer. Use:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "\"renderingMode\": \"3d\""
                          },
                          {
                            "type": "text",
                            "value": " to use the depth buffer and share it with other layers"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "\"renderingMode\": \"2d\""
                          },
                          {
                            "type": "text",
                            "value": " to add a layer with no depth. If you need to use the depth buffer for a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "\"2d\""
                          },
                          {
                            "type": "text",
                            "value": " layer you must use an offscreen\nframebuffer and "
                          },
                          {
                            "type": "link",
                            "url": "CustomLayerInterface#prerender",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "CustomLayerInterface#prerender"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "interface",
              "description": "CustomLayerInterface",
              "lineNumber": 18
            },
            {
              "title": "example",
              "description": "// Custom layer implemented as ES6 class\nclass NullIslandLayer {\n    constructor() {\n        this.id = 'null-island';\n        this.type = 'custom';\n        this.renderingMode = '2d';\n    }\n\n    onAdd(map, gl) {\n        const vertexSource = `\n        uniform mat4 u_matrix;\n        void main() {\n            gl_Position = u_matrix * vec4(0.5, 0.5, 0.0, 1.0);\n            gl_PointSize = 20.0;\n        }`;\n\n        const fragmentSource = `\n        void main() {\n            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`;\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n    }\n\n    render(gl, matrix) {\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.program, \"u_matrix\"), false, matrix);\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n}\n\nmap.on('load', function() {\n    map.addLayer(new NullIslandLayer());\n});",
              "lineNumber": 19
            }
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 74,
                "column": 0
              },
              "end": {
                "line": 158,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L74-L158",
              "path": "src/style/style_layer/custom_style_layer.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// Custom layer implemented as ES6 class\nclass NullIslandLayer {\n    constructor() {\n        this.id = 'null-island';\n        this.type = 'custom';\n        this.renderingMode = '2d';\n    }\n\n    onAdd(map, gl) {\n        const vertexSource = `\n        uniform mat4 u_matrix;\n        void main() {\n            gl_Position = u_matrix * vec4(0.5, 0.5, 0.0, 1.0);\n            gl_PointSize = 20.0;\n        }`;\n\n        const fragmentSource = `\n        void main() {\n            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`;\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n    }\n\n    render(gl, matrix) {\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.program, \"u_matrix\"), false, matrix);\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n}\n\nmap.on('load', function() {\n    map.addLayer(new NullIslandLayer());\n});"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "interface",
          "name": "CustomLayerInterface",
          "path": [
            {
              "name": "CustomLayerInterface",
              "kind": "interface"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "A unique layer id.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "id"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 75,
                    "column": 4
                  },
                  "end": {
                    "line": 77,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 78,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 15
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L78-L78",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "id",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A unique layer id."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "id",
                "kind": "member",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "string"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "id",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#id"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optional method called when the layer has been added to the Map with "
                        },
                        {
                          "type": "link",
                          "url": "Map#addLayer",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addLayer"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ". This\ngives the layer a chance to initialize gl resources and register event listeners."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 4,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "CustomLayerInterface",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 7,
                    "name": "onAdd"
                  },
                  {
                    "title": "param",
                    "description": "The Map this custom layer was just added to.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "param",
                    "description": "The gl context for the map.",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    },
                    "name": "gl"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 134,
                    "column": 4
                  },
                  "end": {
                    "line": 144,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 145,
                      "column": 4
                    },
                    "end": {
                      "line": 145,
                      "column": 54
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L145-L145",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The Map this custom layer was just added to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "param",
                    "name": "gl",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The gl context for the map."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "name": "onAdd",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "onAdd",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#onAdd"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optional method called when the layer has been removed from the Map with "
                        },
                        {
                          "type": "link",
                          "url": "Map#removeLayer",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#removeLayer"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ". This\ngives the layer a chance to clean up gl resources and event listeners."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 4,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "CustomLayerInterface",
                    "lineNumber": 5
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 6
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 7,
                    "name": "onRemove"
                  },
                  {
                    "title": "param",
                    "description": "The Map this custom layer was just added to.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "param",
                    "description": "The gl context for the map.",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    },
                    "name": "gl"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 146,
                    "column": 4
                  },
                  "end": {
                    "line": 156,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 157,
                      "column": 4
                    },
                    "end": {
                      "line": 157,
                      "column": 57
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L157-L157",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 8,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The Map this custom layer was just added to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  },
                  {
                    "title": "param",
                    "name": "gl",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The gl context for the map."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "name": "onRemove",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "onRemove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#onRemove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optional method called during a render frame to allow a layer to prepare resources or render into a texture."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The layer cannot make any assumptions about the current GL state and must bind a framebuffer before rendering."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 5,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "CustomLayerInterface",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 8,
                    "name": "prerender"
                  },
                  {
                    "title": "param",
                    "description": "The map's gl context.",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    },
                    "name": "gl"
                  },
                  {
                    "title": "param",
                    "description": "The map's camera matrix. It projects spherical mercator\ncoordinates to gl coordinates. The mercator coordinate `[0, 0]` represents the\ntop left corner of the mercator world and `[1, 1]` represents the bottom right corner. When\nthe `renderingMode` is `\"3d\"`, the z coordinate is conformal. A box with identical x, y, and z\nlengths in mercator units would be rendered as a cube. {@link MercatorCoordinate}.fromLngLat\ncan be used to project a `LngLat` to a mercator coordinate.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "mat4"
                    },
                    "name": "matrix"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 116,
                    "column": 4
                  },
                  "end": {
                    "line": 132,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 133,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 35
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L133-L133",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "gl",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's gl context."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    }
                  },
                  {
                    "title": "param",
                    "name": "matrix",
                    "lineNumber": 10,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's camera matrix. It projects spherical mercator\ncoordinates to gl coordinates. The mercator coordinate "
                            },
                            {
                              "type": "inlineCode",
                              "value": "[0, 0]"
                            },
                            {
                              "type": "text",
                              "value": " represents the\ntop left corner of the mercator world and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "[1, 1]"
                            },
                            {
                              "type": "text",
                              "value": " represents the bottom right corner. When\nthe "
                            },
                            {
                              "type": "inlineCode",
                              "value": "renderingMode"
                            },
                            {
                              "type": "text",
                              "value": " is "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"3d\""
                            },
                            {
                              "type": "text",
                              "value": ", the z coordinate is conformal. A box with identical x, y, and z\nlengths in mercator units would be rendered as a cube. "
                            },
                            {
                              "type": "link",
                              "url": "MercatorCoordinate",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MercatorCoordinate"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ".fromLngLat\ncan be used to project a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " to a mercator coordinate."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "mat4"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "name": "prerender",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "prerender",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#prerender"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Called during a render frame allowing the layer to draw into the GL context."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The layer can assume blending and depth state is set to allow the layer to properly\nblend and clip other layers. The layer cannot make any other assumptions about the\ncurrent GL state."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If the layer needs to render to a texture, it should implement the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "prerender"
                        },
                        {
                          "type": "text",
                          "value": " method\nto do this and only use the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "render"
                        },
                        {
                          "type": "text",
                          "value": " method for drawing directly into the main framebuffer."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The blend function is set to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)"
                        },
                        {
                          "type": "text",
                          "value": ". This expects\ncolors to be provided in premultiplied alpha form where the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "r"
                        },
                        {
                          "type": "text",
                          "value": ", "
                        },
                        {
                          "type": "inlineCode",
                          "value": "g"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "b"
                        },
                        {
                          "type": "text",
                          "value": " values are already\nmultiplied by the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "a"
                        },
                        {
                          "type": "text",
                          "value": " value. If you are unable to provide colors in premultiplied form you\nmay want to change the blend function to\n"
                        },
                        {
                          "type": "inlineCode",
                          "value": "gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 16,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "CustomLayerInterface",
                    "lineNumber": 17
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 18
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 19,
                    "name": "render"
                  },
                  {
                    "title": "param",
                    "description": "The map's gl context.",
                    "lineNumber": 20,
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    },
                    "name": "gl"
                  },
                  {
                    "title": "param",
                    "description": "The map's camera matrix. It projects spherical mercator\ncoordinates to gl coordinates. The spherical mercator coordinate `[0, 0]` represents the\ntop left corner of the mercator world and `[1, 1]` represents the bottom right corner. When\nthe `renderingMode` is `\"3d\"`, the z coordinate is conformal. A box with identical x, y, and z\nlengths in mercator units would be rendered as a cube. {@link MercatorCoordinate}.fromLngLat\ncan be used to project a `LngLat` to a mercator coordinate.",
                    "lineNumber": 21,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    },
                    "name": "matrix"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 87,
                    "column": 4
                  },
                  "end": {
                    "line": 114,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 115,
                      "column": 4
                    },
                    "end": {
                      "line": 115,
                      "column": 31
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L115-L115",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "gl",
                    "lineNumber": 20,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's gl context."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "WebGLRenderingContext"
                    }
                  },
                  {
                    "title": "param",
                    "name": "matrix",
                    "lineNumber": 21,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The map's camera matrix. It projects spherical mercator\ncoordinates to gl coordinates. The spherical mercator coordinate "
                            },
                            {
                              "type": "inlineCode",
                              "value": "[0, 0]"
                            },
                            {
                              "type": "text",
                              "value": " represents the\ntop left corner of the mercator world and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "[1, 1]"
                            },
                            {
                              "type": "text",
                              "value": " represents the bottom right corner. When\nthe "
                            },
                            {
                              "type": "inlineCode",
                              "value": "renderingMode"
                            },
                            {
                              "type": "text",
                              "value": " is "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"3d\""
                            },
                            {
                              "type": "text",
                              "value": ", the z coordinate is conformal. A box with identical x, y, and z\nlengths in mercator units would be rendered as a cube. "
                            },
                            {
                              "type": "link",
                              "url": "MercatorCoordinate",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "MercatorCoordinate"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": ".fromLngLat\ncan be used to project a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " to a mercator coordinate."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "name": "render",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "render",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#render"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "Either `\"2d\"` or `\"3d\"`. Defaults to `\"2d\"`.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "renderingMode"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 83,
                    "column": 4
                  },
                  "end": {
                    "line": 85,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 86,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L86-L86",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "renderingMode",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Either "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"2d\""
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"3d\""
                            },
                            {
                              "type": "text",
                              "value": ". Defaults to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"2d\""
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "renderingMode",
                "kind": "member",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "type": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "StringLiteralType",
                      "value": "2d"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "3d"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "renderingMode",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#renderingMode"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "property",
                    "description": "The layer's type. Must be `\"custom\"`.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 79,
                    "column": 4
                  },
                  "end": {
                    "line": 81,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style/style_layer/custom_style_layer.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style/style_layer/custom_style_layer.ts#L82-L82",
                    "path": "src/style/style_layer/custom_style_layer.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "type",
                    "lineNumber": 1,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The layer's type. Must be "
                            },
                            {
                              "type": "inlineCode",
                              "value": "\"custom\""
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "type",
                "kind": "member",
                "memberof": "CustomLayerInterface",
                "scope": "instance",
                "type": {
                  "type": "StringLiteralType",
                  "value": "custom"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CustomLayerInterface",
                    "kind": "interface"
                  },
                  {
                    "name": "type",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "CustomLayerInterface#type"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "CustomLayerInterface"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Initializes resources like WebWorkers that can be shared across maps to lower load\ntimes in some situations. "
                  },
                  {
                    "type": "inlineCode",
                    "value": "maplibregl.workerUrl"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "maplibregl.workerCount"
                  },
                  {
                    "type": "text",
                    "value": ", if being\nused, must be set before "
                  },
                  {
                    "type": "inlineCode",
                    "value": "prewarm()"
                  },
                  {
                    "type": "text",
                    "value": " is called to have an effect."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "By default, the lifecycle of these resources is managed automatically, and they are\nlazily initialized when a Map is first created. By invoking "
                  },
                  {
                    "type": "inlineCode",
                    "value": "prewarm()"
                  },
                  {
                    "type": "text",
                    "value": ", these\nresources will be created ahead of time, and will not be cleared when the last Map\nis removed from the page. This allows them to be re-used by new Map instances that\nare created later. They can be manually cleared by calling\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "maplibregl.clearPrewarmedResources()"
                  },
                  {
                    "type": "text",
                    "value": ". This is only necessary if your web page remains\nactive but stops using maps altogether."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This is primarily useful when using GL-JS maps in a single page app, wherein a user\nwould navigate between various views that can cause Map instances to constantly be\ncreated and destroyed."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 17,
              "name": "prewarm"
            },
            {
              "title": "example",
              "description": "maplibregl.prewarm()",
              "lineNumber": 18
            }
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 81,
                "column": 4
              },
              "end": {
                "line": 81,
                "column": 11
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L81-L81",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.prewarm()"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "prewarm",
          "path": [
            {
              "name": "prewarm",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "prewarm"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Clears up resources that have previously been created by "
                  },
                  {
                    "type": "inlineCode",
                    "value": "maplibregl.prewarm()"
                  },
                  {
                    "type": "text",
                    "value": ".\nNote that this is typically not necessary. You should only call this function\nif you expect the user of your app to not return to a Map view at any point\nin your application."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": "clearPrewarmedResources"
            },
            {
              "title": "example",
              "description": "maplibregl.clearPrewarmedResources()",
              "lineNumber": 7
            }
          ],
          "loc": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 92,
                "column": 4
              },
              "end": {
                "line": 92,
                "column": 27
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/index.ts#L92-L92",
              "path": "src/index.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "maplibregl.clearPrewarmedResources()"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "function",
          "name": "clearPrewarmedResources",
          "path": [
            {
              "name": "clearPrewarmedResources",
              "kind": "function"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "clearPrewarmedResources"
        }
      ]
    },
    "namespace": "Properties and options"
  },
  {
    "name": "Markers and controls",
    "page": "markers",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "User interface elements that can be added to the map. The items in this section exist outside of the map's "
            },
            {
              "type": "inlineCode",
              "value": "canvas"
            },
            {
              "type": "text",
              "value": " element."
            }
          ]
        }
      ]
    },
    "children": [
      "Marker",
      "Popup",
      "IControl",
      "NavigationControl",
      "GeolocateControl",
      "AttributionControl",
      "ScaleControl",
      "FullscreenControl"
    ],
    "kind": "note",
    "path": [
      {
        "name": "Markers and controls",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a marker component"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "DOM element to use as a marker. The default is a light blue, droplet-shaped SVG marker.",
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "HTMLElement"
                }
              },
              "name": "options.element"
            },
            {
              "title": "param",
              "description": "A string indicating the part of the Marker that should be positioned closest to the coordinate set via {@link Marker#setLngLat}.\n  Options are `'center'`, `'top'`, `'bottom'`, `'left'`, `'right'`, `'top-left'`, `'top-right'`, `'bottom-left'`, and `'bottom-right'`.",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.anchor",
              "default": "'center'"
            },
            {
              "title": "param",
              "description": "The offset in pixels as a {@link PointLike} object to apply relative to the element's center. Negatives indicate left and up.",
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "PointLike"
                }
              },
              "name": "options.offset"
            },
            {
              "title": "param",
              "description": "The color to use for the default marker if options.element is not provided. The default is light blue.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.color",
              "default": "'#3FB1CE'"
            },
            {
              "title": "param",
              "description": "The scale to use for the default marker if options.element is not provided. The default scale corresponds to a height of `41px` and a width of `27px`.",
              "lineNumber": 8,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale",
              "default": "1"
            },
            {
              "title": "param",
              "description": "A boolean indicating whether or not a marker is able to be dragged to a new position on the map.",
              "lineNumber": 9,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.draggable",
              "default": "false"
            },
            {
              "title": "param",
              "description": "The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag). The default is to inherit map's clickTolerance.",
              "lineNumber": 10,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.clickTolerance",
              "default": "0"
            },
            {
              "title": "param",
              "description": "The rotation angle of the marker in degrees, relative to its respective `rotationAlignment` setting. A positive value will rotate the marker clockwise.",
              "lineNumber": 11,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.rotation",
              "default": "0"
            },
            {
              "title": "param",
              "description": "`map` aligns the `Marker` to the plane of the map. `viewport` aligns the `Marker` to the plane of the viewport. `auto` automatically matches the value of `rotationAlignment`.",
              "lineNumber": 12,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.pitchAlignment",
              "default": "'auto'"
            },
            {
              "title": "param",
              "description": "`map` aligns the `Marker`'s rotation relative to the map, maintaining a bearing as the map rotates. `viewport` aligns the `Marker`'s rotation relative to the viewport, agnostic to map rotations. `auto` is equivalent to `viewport`.",
              "lineNumber": 13,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.rotationAlignment",
              "default": "'auto'"
            },
            {
              "title": "example",
              "description": "var marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map);",
              "lineNumber": 14
            },
            {
              "title": "example",
              "description": "// Set options\nvar marker = new maplibregl.Marker({\n    color: \"#FFFFFF\",\n    draggable: true\n  }).setLngLat([30.5, 50.5])\n  .addTo(map);",
              "lineNumber": 18
            },
            {
              "title": "see",
              "description": "[Add custom icons with Markers](https://maplibre.org/maplibre-gl-js-docs/example/custom-marker-icons/)",
              "lineNumber": 25
            },
            {
              "title": "see",
              "description": "[Create a draggable Marker](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/)",
              "lineNumber": 26
            }
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 0
              },
              "end": {
                "line": 671,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L56-L671",
              "path": "src/ui/marker.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "var marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map);"
            },
            {
              "description": "// Set options\nvar marker = new maplibregl.Marker({\n    color: \"#FFFFFF\",\n    draggable: true\n  }).setLngLat([30.5, 50.5])\n  .addTo(map);"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 2,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.element",
                  "lineNumber": 3,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "DOM element to use as a marker. The default is a light blue, droplet-shaped SVG marker."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.anchor",
                  "lineNumber": 4,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A string indicating the part of the Marker that should be positioned closest to the coordinate set via "
                          },
                          {
                            "type": "link",
                            "url": "Marker#setLngLat",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "Marker#setLngLat"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ".\nOptions are "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'center'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'left'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'right'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top-left'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top-right'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom-left'"
                          },
                          {
                            "type": "text",
                            "value": ", and "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom-right'"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'center'"
                },
                {
                  "title": "param",
                  "name": "options.offset",
                  "lineNumber": 6,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The offset in pixels as a "
                          },
                          {
                            "type": "link",
                            "url": "PointLike",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "PointLike"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " object to apply relative to the element's center. Negatives indicate left and up."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.color",
                  "lineNumber": 7,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The color to use for the default marker if options.element is not provided. The default is light blue."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'#3FB1CE'"
                },
                {
                  "title": "param",
                  "name": "options.scale",
                  "lineNumber": 8,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The scale to use for the default marker if options.element is not provided. The default scale corresponds to a height of "
                          },
                          {
                            "type": "inlineCode",
                            "value": "41px"
                          },
                          {
                            "type": "text",
                            "value": " and a width of "
                          },
                          {
                            "type": "inlineCode",
                            "value": "27px"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "1"
                },
                {
                  "title": "param",
                  "name": "options.draggable",
                  "lineNumber": 9,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A boolean indicating whether or not a marker is able to be dragged to a new position on the map."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.clickTolerance",
                  "lineNumber": 10,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag). The default is to inherit map's clickTolerance."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.rotation",
                  "lineNumber": 11,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The rotation angle of the marker in degrees, relative to its respective "
                          },
                          {
                            "type": "inlineCode",
                            "value": "rotationAlignment"
                          },
                          {
                            "type": "text",
                            "value": " setting. A positive value will rotate the marker clockwise."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "0"
                },
                {
                  "title": "param",
                  "name": "options.pitchAlignment",
                  "lineNumber": 12,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "map"
                          },
                          {
                            "type": "text",
                            "value": " aligns the "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Marker"
                          },
                          {
                            "type": "text",
                            "value": " to the plane of the map. "
                          },
                          {
                            "type": "inlineCode",
                            "value": "viewport"
                          },
                          {
                            "type": "text",
                            "value": " aligns the "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Marker"
                          },
                          {
                            "type": "text",
                            "value": " to the plane of the viewport. "
                          },
                          {
                            "type": "inlineCode",
                            "value": "auto"
                          },
                          {
                            "type": "text",
                            "value": " automatically matches the value of "
                          },
                          {
                            "type": "inlineCode",
                            "value": "rotationAlignment"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'auto'"
                },
                {
                  "title": "param",
                  "name": "options.rotationAlignment",
                  "lineNumber": 13,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "map"
                          },
                          {
                            "type": "text",
                            "value": " aligns the "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Marker"
                          },
                          {
                            "type": "text",
                            "value": "'s rotation relative to the map, maintaining a bearing as the map rotates. "
                          },
                          {
                            "type": "inlineCode",
                            "value": "viewport"
                          },
                          {
                            "type": "text",
                            "value": " aligns the "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Marker"
                          },
                          {
                            "type": "text",
                            "value": "'s rotation relative to the viewport, agnostic to map rotations. "
                          },
                          {
                            "type": "inlineCode",
                            "value": "auto"
                          },
                          {
                            "type": "text",
                            "value": " is equivalent to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "viewport"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'auto'"
                }
              ]
            },
            {
              "title": "param",
              "name": "legacyOptions",
              "lineNumber": 78,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "MarkerOptions"
                }
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/custom-marker-icons/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add custom icons with Markers"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Create a draggable Marker"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "Marker",
          "kind": "class",
          "path": [
            {
              "name": "Marker",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Attaches the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Marker"
                        },
                        {
                          "type": "text",
                          "value": " to a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map"
                        },
                        {
                          "type": "text",
                          "value": " object."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The MapLibre GL JS map to add the marker to.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map); // add the marker to the map",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 233,
                    "column": 4
                  },
                  "end": {
                    "line": 241,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 242,
                      "column": 4
                    },
                    "end": {
                      "line": 257,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L242-L257",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map); // add the marker to the map"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The MapLibre GL JS map to add the marker to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addTo",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "addTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#addTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Marker"
                        },
                        {
                          "type": "text",
                          "value": "'s HTML element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "element",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 323,
                    "column": 4
                  },
                  "end": {
                    "line": 326,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 327,
                      "column": 4
                    },
                    "end": {
                      "line": 329,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L327-L329",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "element"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getElement",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getElement",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getElement"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Get the marker's geographical location."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The longitude of the result may differ by a multiple of 360 degrees from the longitude previously\nset by "
                        },
                        {
                          "type": "inlineCode",
                          "value": "setLngLat"
                        },
                        {
                          "type": "text",
                          "value": " because "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Marker"
                        },
                        {
                          "type": "text",
                          "value": " wraps the anchor longitude across copies of the world to keep\nthe marker on screen."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "A {@link LngLat} describing the marker's location.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Store the marker's longitude and latitude coordinates in a variable\nvar lngLat = marker.getLngLat();\n// Print the marker's longitude and latitude values in the console\nconsole.log('Longitude: ' + lngLat.lng + ', Latitude: ' + lngLat.lat )",
                    "lineNumber": 8
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable Marker](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/)",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 284,
                    "column": 4
                  },
                  "end": {
                    "line": 298,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 299,
                      "column": 4
                    },
                    "end": {
                      "line": 301,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L299-L301",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Store the marker's longitude and latitude coordinates in a variable\nvar lngLat = marker.getLngLat();\n// Print the marker's longitude and latitude values in the console\nconsole.log('Longitude: ' + lngLat.lng + ', Latitude: ' + lngLat.lat )"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A "
                            },
                            {
                              "type": "link",
                              "url": "LngLat",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLat"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " describing the marker's location."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable Marker"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getLngLat",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getLngLat",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getLngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Get the marker's offset."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The marker's screen coordinates in pixels.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 474,
                    "column": 4
                  },
                  "end": {
                    "line": 477,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 478,
                      "column": 4
                    },
                    "end": {
                      "line": 480,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L478-L480",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The marker's screen coordinates in pixels."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getOffset",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getOffset",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getOffset"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the current "
                        },
                        {
                          "type": "inlineCode",
                          "value": "pitchAlignment"
                        },
                        {
                          "type": "text",
                          "value": " property of the marker."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The current pitch alignment of the marker in degrees.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 664,
                    "column": 4
                  },
                  "end": {
                    "line": 667,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 668,
                      "column": 4
                    },
                    "end": {
                      "line": 670,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L668-L670",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The current pitch alignment of the marker in degrees."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getPitchAlignment",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getPitchAlignment",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getPitchAlignment"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the "
                        },
                        {
                          "type": "link",
                          "url": "Popup",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Popup"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " instance that is bound to the "
                        },
                        {
                          "type": "link",
                          "url": "Marker",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Marker"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "popup",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\"))\n .addTo(map);\n\nconsole.log(marker.getPopup()); // return the popup instance",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 404,
                    "column": 4
                  },
                  "end": {
                    "line": 414,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 415,
                      "column": 4
                    },
                    "end": {
                      "line": 417,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L415-L417",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\"))\n .addTo(map);\n\nconsole.log(marker.getPopup()); // return the popup instance"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "popup"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getPopup",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getPopup",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getPopup"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the current rotation angle of the marker (in degrees)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The current rotation angle of the marker.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 626,
                    "column": 4
                  },
                  "end": {
                    "line": 629,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 630,
                      "column": 4
                    },
                    "end": {
                      "line": 632,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L630-L632",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The current rotation angle of the marker."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getRotation",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the current "
                        },
                        {
                          "type": "inlineCode",
                          "value": "rotationAlignment"
                        },
                        {
                          "type": "text",
                          "value": " property of the marker."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The current rotational alignment of the marker.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 645,
                    "column": 4
                  },
                  "end": {
                    "line": 648,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 649,
                      "column": 4
                    },
                    "end": {
                      "line": 651,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L649-L651",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The current rotational alignment of the marker."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getRotationAlignment",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "getRotationAlignment",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#getRotationAlignment"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the marker can be dragged"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "True if the marker is draggable.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 607,
                    "column": 4
                  },
                  "end": {
                    "line": 610,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 611,
                      "column": 4
                    },
                    "end": {
                      "line": 613,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L611-L613",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if the marker is draggable."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isDraggable",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "isDraggable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#isDraggable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes the marker from a map"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "var marker = new maplibregl.Marker().addTo(map);\nmarker.remove();",
                    "lineNumber": 2
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 259,
                    "column": 4
                  },
                  "end": {
                    "line": 265,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 266,
                      "column": 4
                    },
                    "end": {
                      "line": 282,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L266-L282",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var marker = new maplibregl.Marker().addTo(map);\nmarker.remove();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "remove",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "remove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#remove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "draggable"
                        },
                        {
                          "type": "text",
                          "value": " property and functionality of the marker"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Turns drag functionality on/off",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "boolean"
                      }
                    },
                    "name": "shouldBeDraggable",
                    "default": "false"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 584,
                    "column": 4
                  },
                  "end": {
                    "line": 588,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 589,
                      "column": 4
                    },
                    "end": {
                      "line": 605,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L589-L605",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "shouldBeDraggable",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Turns drag functionality on/off"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    },
                    "default": "false"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setDraggable",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setDraggable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setDraggable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the marker's geographical position and move it."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A {@link LngLat} describing where the marker should be located.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    },
                    "name": "lnglat"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Create a new marker, set the longitude and latitude, and add it to the map\nnew maplibregl.Marker()\n  .setLngLat([-65.017, -16.457])\n  .addTo(map);",
                    "lineNumber": 4
                  },
                  {
                    "title": "see",
                    "description": "[Add custom icons with Markers](https://maplibre.org/maplibre-gl-js-docs/example/custom-marker-icons/)",
                    "lineNumber": 9
                  },
                  {
                    "title": "see",
                    "description": "[Create a draggable Marker](https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/)",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 303,
                    "column": 4
                  },
                  "end": {
                    "line": 314,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 315,
                      "column": 4
                    },
                    "end": {
                      "line": 321,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L315-L321",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Create a new marker, set the longitude and latitude, and add it to the map\nnew maplibregl.Marker()\n  .setLngLat([-65.017, -16.457])\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lnglat",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A "
                            },
                            {
                              "type": "link",
                              "url": "LngLat",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLat"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " describing where the marker should be located."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/custom-marker-icons/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Add custom icons with Markers"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/drag-a-marker/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Create a draggable Marker"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setLngLat",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setLngLat",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setLngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the offset of the marker"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The offset in pixels as a {@link PointLike} object to apply relative to the element's center. Negatives indicate left and up.",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    },
                    "name": "offset"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 482,
                    "column": 4
                  },
                  "end": {
                    "line": 486,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 487,
                      "column": 4
                    },
                    "end": {
                      "line": 491,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L487-L491",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "offset",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The offset in pixels as a "
                            },
                            {
                              "type": "link",
                              "url": "PointLike",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "PointLike"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object to apply relative to the element's center. Negatives indicate left and up."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PointLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setOffset",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setOffset",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setOffset"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "pitchAlignment"
                        },
                        {
                          "type": "text",
                          "value": " property of the marker."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Sets the `pitchAlignment` property of the marker. If alignment is 'auto', it will automatically match `rotationAlignment`.",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "alignment"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 653,
                    "column": 4
                  },
                  "end": {
                    "line": 657,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 4
                    },
                    "end": {
                      "line": 662,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L658-L662",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "alignment",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Sets the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "pitchAlignment"
                            },
                            {
                              "type": "text",
                              "value": " property of the marker. If alignment is 'auto', it will automatically match "
                            },
                            {
                              "type": "inlineCode",
                              "value": "rotationAlignment"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setPitchAlignment",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setPitchAlignment",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setPitchAlignment"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Binds a "
                        },
                        {
                          "type": "link",
                          "url": "Popup",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Popup"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " to the "
                        },
                        {
                          "type": "link",
                          "url": "Marker",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Marker"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "An instance of the {@link Popup} class. If undefined or null, any popup\nset on this {@link Marker} instance is unset.",
                    "lineNumber": 2,
                    "type": null,
                    "name": "popup"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\")) // add popup\n .addTo(map);",
                    "lineNumber": 5
                  },
                  {
                    "title": "see",
                    "description": "[Attach a popup to a marker instance](https://maplibre.org/maplibre-gl-js-docs/example/set-popup/)",
                    "lineNumber": 10
                  }
                ],
                "loc": {
                  "start": {
                    "line": 331,
                    "column": 4
                  },
                  "end": {
                    "line": 342,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 343,
                      "column": 4
                    },
                    "end": {
                      "line": 381,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L343-L381",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\")) // add popup\n .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "popup",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An instance of the "
                            },
                            {
                              "type": "link",
                              "url": "Popup",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Popup"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " class. If undefined or null, any popup\nset on this "
                            },
                            {
                              "type": "link",
                              "url": "Marker",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Marker"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " instance is unset."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "UnionType",
                        "elements": [
                          {
                            "type": "NameExpression",
                            "name": "Popup"
                          },
                          {
                            "type": "NullLiteral"
                          }
                        ]
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/set-popup/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Attach a popup to a marker instance"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setPopup",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setPopup",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setPopup"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "rotation"
                        },
                        {
                          "type": "text",
                          "value": " property of the marker."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The rotation angle of the marker (clockwise, in degrees), relative to its respective {@link Marker#setRotationAlignment} setting.",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "rotation",
                    "default": "0"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 615,
                    "column": 4
                  },
                  "end": {
                    "line": 619,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 620,
                      "column": 4
                    },
                    "end": {
                      "line": 624,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L620-L624",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "rotation",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The rotation angle of the marker (clockwise, in degrees), relative to its respective "
                            },
                            {
                              "type": "link",
                              "url": "Marker#setRotationAlignment",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Marker#setRotationAlignment"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " setting."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "default": "0"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setRotation",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "rotationAlignment"
                        },
                        {
                          "type": "text",
                          "value": " property of the marker."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Sets the `rotationAlignment` property of the marker.",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "alignment",
                    "default": "'auto'"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 634,
                    "column": 4
                  },
                  "end": {
                    "line": 638,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 639,
                      "column": 4
                    },
                    "end": {
                      "line": 643,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L639-L643",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "alignment",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Sets the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "rotationAlignment"
                            },
                            {
                              "type": "text",
                              "value": " property of the marker."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "default": "'auto'"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setRotationAlignment",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "setRotationAlignment",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#setRotationAlignment"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Opens or closes the "
                        },
                        {
                          "type": "link",
                          "url": "Popup",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Popup"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " instance that is bound to the "
                        },
                        {
                          "type": "link",
                          "url": "Marker",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Marker"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ", depending on the current state of the "
                        },
                        {
                          "type": "link",
                          "url": "Popup",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Popup"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 2,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\"))\n .addTo(map);\n\nmarker.togglePopup(); // toggle popup open or closed",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 419,
                    "column": 4
                  },
                  "end": {
                    "line": 429,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 430,
                      "column": 4
                    },
                    "end": {
                      "line": 437,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L430-L437",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"<h1>Hello World!</h1>\"))\n .addTo(map);\n\nmarker.togglePopup(); // toggle popup open or closed"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "togglePopup",
                "kind": "function",
                "memberof": "Marker",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "togglePopup",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker#togglePopup"
              }
            ],
            "events": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired while dragging"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "drag",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Marker",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": "object that is being dragged",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    },
                    "name": "marker"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 524,
                    "column": 8
                  },
                  "end": {
                    "line": 532,
                    "column": 11
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 533,
                      "column": 8
                    },
                    "end": {
                      "line": 533,
                      "column": 37
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L533-L533",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "marker",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object that is being dragged"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "drag",
                "memberof": "Marker",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "drag",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker.event:drag"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the marker is finished being dragged"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dragend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Marker",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": "object that was dragged",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    },
                    "name": "marker"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 547,
                    "column": 12
                  },
                  "end": {
                    "line": 555,
                    "column": 15
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 556,
                      "column": 12
                    },
                    "end": {
                      "line": 556,
                      "column": 44
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L556-L556",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "marker",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object that was dragged"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dragend",
                "memberof": "Marker",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "dragend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker.event:dragend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when dragging starts"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "dragstart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Marker",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": "object that is being dragged",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    },
                    "name": "marker"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 512,
                    "column": 12
                  },
                  "end": {
                    "line": 520,
                    "column": 15
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 521,
                      "column": 12
                    },
                    "end": {
                      "line": 521,
                      "column": 46
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/marker.ts#L521-L521",
                    "path": "src/ui/marker.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "marker",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object that is being dragged"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Marker"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "dragstart",
                "memberof": "Marker",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Marker",
                    "kind": "class"
                  },
                  {
                    "name": "dragstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Marker.event:dragstart"
              }
            ],
            "static": []
          },
          "namespace": "Marker"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A popup component."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "If `true`, a close button will appear in the\n  top right corner of the popup.",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.closeButton",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the popup will closed when the\n  map is clicked.",
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.closeOnClick",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true`, the popup will closed when the\n  map moves.",
              "lineNumber": 8,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.closeOnMove",
              "default": "false"
            },
            {
              "title": "param",
              "description": "If `true`, the popup will try to focus the\n  first focusable element inside the popup.",
              "lineNumber": 10,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.focusAfterOpen",
              "default": "true"
            },
            {
              "title": "param",
              "description": "A string indicating the part of the Popup that should\n  be positioned closest to the coordinate set via {@link Popup#setLngLat}.\n  Options are `'center'`, `'top'`, `'bottom'`, `'left'`, `'right'`, `'top-left'`,\n  `'top-right'`, `'bottom-left'`, and `'bottom-right'`. If unset the anchor will be\n  dynamically set to ensure the popup falls within the map container with a preference\n  for `'bottom'`.",
              "lineNumber": 12,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.anchor"
            },
            {
              "title": "param",
              "description": " A pixel offset applied to the popup's location specified as:\n  - a single number specifying a distance from the popup's location\n  - a {@link PointLike} specifying a constant offset\n  - an object of {@link Point}s specifing an offset for each anchor position\n Negative offsets indicate left and up.",
              "lineNumber": 18,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    {
                      "type": "NameExpression",
                      "name": "PointLike"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              },
              "name": "options.offset"
            },
            {
              "title": "param",
              "description": "Space-separated CSS class names to add to popup container",
              "lineNumber": 24,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.className"
            },
            {
              "title": "param",
              "description": " A string that sets the CSS property of the popup's maximum width, eg `'300px'`.\n To ensure the popup resizes to fit its content, set this property to `'none'`.\n Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width",
              "lineNumber": 25,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.maxWidth",
              "default": "'240px'"
            },
            {
              "title": "example",
              "description": "var markerHeight = 50, markerRadius = 10, linearOffset = 25;\nvar popupOffsets = {\n 'top': [0, 0],\n 'top-left': [0,0],\n 'top-right': [0,0],\n 'bottom': [0, -markerHeight],\n 'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'left': [markerRadius, (markerHeight - markerRadius) * -1],\n 'right': [-markerRadius, (markerHeight - markerRadius) * -1]\n };\nvar popup = new maplibregl.Popup({offset: popupOffsets, className: 'my-class'})\n  .setLngLat(e.lngLat)\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .setMaxWidth(\"300px\")\n  .addTo(map);",
              "lineNumber": 29
            },
            {
              "title": "see",
              "description": "[Display a popup](https://maplibre.org/maplibre-gl-js-docs/example/popup/)",
              "lineNumber": 46
            },
            {
              "title": "see",
              "description": "[Display a popup on hover](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
              "lineNumber": 47
            },
            {
              "title": "see",
              "description": "[Display a popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
              "lineNumber": 48
            },
            {
              "title": "see",
              "description": "[Attach a popup to a marker instance](https://maplibre.org/maplibre-gl-js-docs/example/set-popup/)",
              "lineNumber": 49
            }
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 0
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 99,
                "column": 0
              },
              "end": {
                "line": 590,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L99-L590",
              "path": "src/ui/popup.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "var markerHeight = 50, markerRadius = 10, linearOffset = 25;\nvar popupOffsets = {\n 'top': [0, 0],\n 'top-left': [0,0],\n 'top-right': [0,0],\n 'bottom': [0, -markerHeight],\n 'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'left': [markerRadius, (markerHeight - markerRadius) * -1],\n 'right': [-markerRadius, (markerHeight - markerRadius) * -1]\n };\nvar popup = new maplibregl.Popup({offset: popupOffsets, className: 'my-class'})\n  .setLngLat(e.lngLat)\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .setMaxWidth(\"300px\")\n  .addTo(map);"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 3,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.closeButton",
                  "lineNumber": 4,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", a close button will appear in the\ntop right corner of the popup."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.closeOnClick",
                  "lineNumber": 6,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the popup will closed when the\nmap is clicked."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.closeOnMove",
                  "lineNumber": 8,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the popup will closed when the\nmap moves."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.focusAfterOpen",
                  "lineNumber": 10,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", the popup will try to focus the\nfirst focusable element inside the popup."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.anchor",
                  "lineNumber": 12,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A string indicating the part of the Popup that should\nbe positioned closest to the coordinate set via "
                          },
                          {
                            "type": "link",
                            "url": "Popup#setLngLat",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "Popup#setLngLat"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": ".\nOptions are "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'center'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'left'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'right'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top-left'"
                          },
                          {
                            "type": "text",
                            "value": ",\n"
                          },
                          {
                            "type": "inlineCode",
                            "value": "'top-right'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom-left'"
                          },
                          {
                            "type": "text",
                            "value": ", and "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom-right'"
                          },
                          {
                            "type": "text",
                            "value": ". If unset the anchor will be\ndynamically set to ensure the popup falls within the map container with a preference\nfor "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'bottom'"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.offset",
                  "lineNumber": 18,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A pixel offset applied to the popup's location specified as:"
                          }
                        ]
                      },
                      {
                        "type": "list",
                        "ordered": false,
                        "start": null,
                        "spread": false,
                        "children": [
                          {
                            "type": "listItem",
                            "spread": false,
                            "checked": null,
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "a single number specifying a distance from the popup's location"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "spread": false,
                            "checked": null,
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "a "
                                  },
                                  {
                                    "type": "link",
                                    "url": "PointLike",
                                    "title": null,
                                    "jsdoc": true,
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "PointLike"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "text",
                                    "value": " specifying a constant offset"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "spread": false,
                            "checked": null,
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "an object of "
                                  },
                                  {
                                    "type": "link",
                                    "url": "Point",
                                    "title": null,
                                    "jsdoc": true,
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "Point"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "text",
                                    "value": "s specifing an offset for each anchor position"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Negative offsets indicate left and up."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        {
                          "type": "NameExpression",
                          "name": "PointLike"
                        },
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        }
                      ]
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.className",
                  "lineNumber": 24,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Space-separated CSS class names to add to popup container"
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.maxWidth",
                  "lineNumber": 25,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A string that sets the CSS property of the popup's maximum width, eg "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'300px'"
                          },
                          {
                            "type": "text",
                            "value": ".\nTo ensure the popup resizes to fit its content, set this property to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'none'"
                          },
                          {
                            "type": "text",
                            "value": ".\nAvailable values can be found here: "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/max-width",
                            "children": [
                              {
                                "type": "text",
                                "value": "https://developer.mozilla.org/en-US/docs/Web/CSS/max-width"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'240px'"
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display a popup"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display a popup on hover"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display a popup on click"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/set-popup/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Attach a popup to a marker instance"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "Popup",
          "kind": "class",
          "path": [
            {
              "name": "Popup",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a CSS class to the popup container element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Non-empty string with CSS class name to add to popup container",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "className"
                  },
                  {
                    "title": "example",
                    "description": "let popup = new maplibregl.Popup()\npopup.addClassName('some-class')",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 433,
                    "column": 4
                  },
                  "end": {
                    "line": 441,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 442,
                      "column": 4
                    },
                    "end": {
                      "line": 446,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L442-L446",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "let popup = new maplibregl.Popup()\npopup.addClassName('some-class')"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "className",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Non-empty string with CSS class name to add to popup container"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addClassName",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "addClassName",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#addClassName"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds the popup to a map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The MapLibre GL JS map to add the popup to.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  },
                  {
                    "title": "example",
                    "description": "new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML(\"<h1>Null Island</h1>\")\n  .addTo(map);",
                    "lineNumber": 5
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup](https://maplibre.org/maplibre-gl-js-docs/example/popup/)",
                    "lineNumber": 10
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on hover](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
                    "lineNumber": 11
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
                    "lineNumber": 12
                  },
                  {
                    "title": "see",
                    "description": "[Show polygon information on click](https://maplibre.org/maplibre-gl-js-docs/example/polygon-popup-on-click/)",
                    "lineNumber": 13
                  }
                ],
                "loc": {
                  "start": {
                    "line": 116,
                    "column": 4
                  },
                  "end": {
                    "line": 130,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 180,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L131-L180",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML(\"<h1>Null Island</h1>\")\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The MapLibre GL JS map to add the popup to."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on hover"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/polygon-popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Show polygon information on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "addTo",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "addTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#addTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Popup"
                        },
                        {
                          "type": "text",
                          "value": "'s HTML element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "// Change the `Popup` element's font size\nvar popup = new maplibregl.Popup()\n  .setLngLat([-96, 37.8])\n  .setHTML(\"<p>Hello World!</p>\")\n  .addTo(map);\nvar popupElem = popup.getElement();\npopupElem.style.fontSize = \"25px\";",
                    "lineNumber": 2
                  },
                  {
                    "title": "returns",
                    "description": "element",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 309,
                    "column": 4
                  },
                  "end": {
                    "line": 320,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 321,
                      "column": 4
                    },
                    "end": {
                      "line": 323,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L321-L323",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Change the `Popup` element's font size\nvar popup = new maplibregl.Popup()\n  .setLngLat([-96, 37.8])\n  .setHTML(\"<p>Hello World!</p>\")\n  .addTo(map);\nvar popupElem = popup.getElement();\npopupElem.style.fontSize = \"25px\";"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "element"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getElement",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "getElement",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#getElement"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the geographical location of the popup's anchor."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The longitude of the result may differ by a multiple of 360 degrees from the longitude previously\nset by "
                        },
                        {
                          "type": "inlineCode",
                          "value": "setLngLat"
                        },
                        {
                          "type": "text",
                          "value": " because "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Popup"
                        },
                        {
                          "type": "text",
                          "value": " wraps the anchor longitude across copies of the world to keep\nthe popup on screen."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The geographical location of the popup's anchor.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 242,
                    "column": 4
                  },
                  "end": {
                    "line": 250,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 251,
                      "column": 4
                    },
                    "end": {
                      "line": 253,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L251-L253",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The geographical location of the popup's anchor."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getLngLat",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "getLngLat",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#getLngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the popup's maximum width."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The maximum width of the popup.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 377,
                    "column": 4
                  },
                  "end": {
                    "line": 381,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 382,
                      "column": 4
                    },
                    "end": {
                      "line": 384,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L382-L384",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum width of the popup."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getMaxWidth",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "getMaxWidth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#getMaxWidth"
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the popup is open, `false` if it is closed.",
                    "lineNumber": 1,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 182,
                    "column": 4
                  },
                  "end": {
                    "line": 184,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 185,
                      "column": 4
                    },
                    "end": {
                      "line": 187,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L185-L187",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the popup is open, "
                            },
                            {
                              "type": "inlineCode",
                              "value": "false"
                            },
                            {
                              "type": "text",
                              "value": " if it is closed."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isOpen",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "isOpen",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#isOpen"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes the popup from the map it has been added to."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "var popup = new maplibregl.Popup().addTo(map);\npopup.remove();",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 189,
                    "column": 4
                  },
                  "end": {
                    "line": 196,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 4
                    },
                    "end": {
                      "line": 240,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L197-L240",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var popup = new maplibregl.Popup().addTo(map);\npopup.remove();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "remove",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "remove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#remove"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes a CSS class from the popup container element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Non-empty string with CSS class name to remove from popup container",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "className"
                  },
                  {
                    "title": "example",
                    "description": "let popup = new maplibregl.Popup()\npopup.removeClassName('some-class')",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 448,
                    "column": 4
                  },
                  "end": {
                    "line": 456,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 457,
                      "column": 4
                    },
                    "end": {
                      "line": 461,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L457-L461",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "let popup = new maplibregl.Popup()\npopup.removeClassName('some-class')"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "className",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Non-empty string with CSS class name to remove from popup container"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "removeClassName",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "removeClassName",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#removeClassName"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the popup's content to the element provided as a DOM node."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A DOM node to be used as content for the popup.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "htmlNode"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// create an element with the popup content\nvar div = document.createElement('div');\ndiv.innerHTML = 'Hello, world!';\nvar popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setDOMContent(div)\n  .addTo(map);",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 399,
                    "column": 4
                  },
                  "end": {
                    "line": 412,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 413,
                      "column": 4
                    },
                    "end": {
                      "line": 431,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L413-L431",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// create an element with the popup content\nvar div = document.createElement('div');\ndiv.innerHTML = 'Hello, world!';\nvar popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setDOMContent(div)\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "htmlNode",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A DOM node to be used as content for the popup."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Node"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setDOMContent",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setDOMContent",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setDOMContent"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the popup's content to the HTML provided as a string."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This method does not perform HTML filtering or sanitization, and must be\nused only with trusted content. Consider "
                        },
                        {
                          "type": "link",
                          "url": "Popup#setText",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Popup#setText"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " if\nthe content is an untrusted text string."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A string representing HTML content for the popup.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "html"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .addTo(map);",
                    "lineNumber": 9
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup](https://maplibre.org/maplibre-gl-js-docs/example/popup/)",
                    "lineNumber": 14
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on hover](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/)",
                    "lineNumber": 15
                  },
                  {
                    "title": "see",
                    "description": "[Display a popup on click](https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/)",
                    "lineNumber": 16
                  },
                  {
                    "title": "see",
                    "description": "[Attach a popup to a marker instance](https://maplibre.org/maplibre-gl-js-docs/example/set-popup/)",
                    "lineNumber": 17
                  }
                ],
                "loc": {
                  "start": {
                    "line": 344,
                    "column": 4
                  },
                  "end": {
                    "line": 362,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 363,
                      "column": 4
                    },
                    "end": {
                      "line": 375,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L363-L375",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "html",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A string representing HTML content for the popup."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-hover/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on hover"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup-on-click/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Display a popup on click"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  },
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://maplibre.org/maplibre-gl-js-docs/example/set-popup/",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Attach a popup to a marker instance"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "title": "sees"
                  }
                ],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setHTML",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setHTML",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setHTML"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the geographical location of the popup's anchor, and moves the popup to it. Replaces trackPointer() behavior."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The geographical location to set as the popup's anchor.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "lnglat"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 255,
                    "column": 4
                  },
                  "end": {
                    "line": 260,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 261,
                      "column": 4
                    },
                    "end": {
                      "line": 279,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L261-L279",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lnglat",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The geographical location to set as the popup's anchor."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setLngLat",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setLngLat",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setLngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the popup's maximum width. This is setting the CSS property "
                        },
                        {
                          "type": "inlineCode",
                          "value": "max-width"
                        },
                        {
                          "type": "text",
                          "value": ".\nAvailable values can be found here: "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/max-width",
                          "children": [
                            {
                              "type": "text",
                              "value": "https://developer.mozilla.org/en-US/docs/Web/CSS/max-width"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A string representing the value for the maximum width.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "maxWidth"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 386,
                    "column": 4
                  },
                  "end": {
                    "line": 392,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 393,
                      "column": 4
                    },
                    "end": {
                      "line": 397,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L393-L397",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "maxWidth",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A string representing the value for the maximum width."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setMaxWidth",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setMaxWidth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setMaxWidth"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the popup's offset."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Sets the popup's offset.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "offset"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 463,
                    "column": 4
                  },
                  "end": {
                    "line": 468,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 469,
                      "column": 4
                    },
                    "end": {
                      "line": 473,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L469-L473",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "offset",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Sets the popup's offset."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Offset"
                      }
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setOffset",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setOffset",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setOffset"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the popup's content to a string of text."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "This function creates a "
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/API/Text",
                          "children": [
                            {
                              "type": "text",
                              "value": "Text"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " node in the DOM,\nso it cannot insert raw HTML. Use this method for security against XSS\nif the popup content is user-provided."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Textual content for the popup.",
                    "lineNumber": 7,
                    "type": null,
                    "name": "text"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setText('Hello, world!')\n  .addTo(map);",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 325,
                    "column": 4
                  },
                  "end": {
                    "line": 339,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 340,
                      "column": 4
                    },
                    "end": {
                      "line": 342,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L340-L342",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setText('Hello, world!')\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "text",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Textual content for the popup."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setText",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "setText",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#setText"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Add or remove the given CSS class on the popup container, depending on whether the container currently has that class."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Non-empty string with CSS class name to add/remove",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "className"
                  },
                  {
                    "title": "returns",
                    "description": "if the class was removed return false, if class was added, then return true",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "let popup = new maplibregl.Popup()\npopup.toggleClassName('toggleClass')",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 475,
                    "column": 4
                  },
                  "end": {
                    "line": 485,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 486,
                      "column": 4
                    },
                    "end": {
                      "line": 490,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L486-L490",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "let popup = new maplibregl.Popup()\npopup.toggleClassName('toggleClass')"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "className",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Non-empty string with CSS class name to add/remove"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "if the class was removed return false, if class was added, then return true"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toggleClassName",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "toggleClassName",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#toggleClassName"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Tracks the popup anchor to the cursor position on screens with a pointer device (it will be hidden on touchscreens). Replaces the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "setLngLat"
                        },
                        {
                          "type": "text",
                          "value": " behavior.\nFor most use cases, set "
                        },
                        {
                          "type": "inlineCode",
                          "value": "closeOnClick"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "closeButton"
                        },
                        {
                          "type": "text",
                          "value": " to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "false"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "var popup = new maplibregl.Popup({ closeOnClick: false, closeButton: false })\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .trackPointer()\n  .addTo(map);",
                    "lineNumber": 3
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 281,
                    "column": 4
                  },
                  "end": {
                    "line": 290,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 291,
                      "column": 4
                    },
                    "end": {
                      "line": 307,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L291-L307",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var popup = new maplibregl.Popup({ closeOnClick: false, closeButton: false })\n  .setHTML(\"<h1>Hello World!</h1>\")\n  .trackPointer()\n  .addTo(map);"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "trackPointer",
                "kind": "function",
                "memberof": "Popup",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "trackPointer",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup#trackPointer"
              }
            ],
            "events": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the popup is closed manually or programatically."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "close",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Popup",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": "object that was closed",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    },
                    "name": "popup"
                  },
                  {
                    "title": "example",
                    "description": "// Create a popup\nvar popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is closed\npopup.on('close', function(){\n  console.log('popup was closed');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 218,
                    "column": 8
                  },
                  "end": {
                    "line": 236,
                    "column": 11
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 237,
                      "column": 8
                    },
                    "end": {
                      "line": 237,
                      "column": 38
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L237-L237",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Create a popup\nvar popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is closed\npopup.on('close', function(){\n  console.log('popup was closed');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "popup",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object that was closed"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "close",
                "memberof": "Popup",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "close",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup.event:close"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the popup is opened manually or programatically."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "open",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "Popup",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "type",
                    "description": null,
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "property",
                    "description": "object that was opened",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    },
                    "name": "popup"
                  },
                  {
                    "title": "example",
                    "description": "// Create a popup\nvar popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is opened\npopup.on('open', function(){\n  console.log('popup was opened');\n});",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 158,
                    "column": 8
                  },
                  "end": {
                    "line": 176,
                    "column": 11
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 177,
                      "column": 8
                    },
                    "end": {
                      "line": 177,
                      "column": 37
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/popup.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/popup.ts#L177-L177",
                    "path": "src/ui/popup.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Create a popup\nvar popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is opened\npopup.on('open', function(){\n  console.log('popup was opened');\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "popup",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object that was opened"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Popup"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "open",
                "memberof": "Popup",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Object"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Popup",
                    "kind": "class"
                  },
                  {
                    "name": "open",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "Popup.event:open"
              }
            ],
            "static": []
          },
          "namespace": "Popup"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Interface for interactive controls added to the map. This is a\nspecification for implementers to model: it is not\nan exported method or class."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Controls must implement "
                  },
                  {
                    "type": "inlineCode",
                    "value": "onAdd"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "onRemove"
                  },
                  {
                    "type": "text",
                    "value": ", and must own an\nelement, which is often a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "div"
                  },
                  {
                    "type": "text",
                    "value": " element. To use MapLibre GL JS's\ndefault control styling, add the "
                  },
                  {
                    "type": "inlineCode",
                    "value": "maplibregl-ctrl"
                  },
                  {
                    "type": "text",
                    "value": " class to your control's\nnode."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "interface",
              "description": "IControl",
              "lineNumber": 10
            },
            {
              "title": "example",
              "description": "// Control implemented as ES6 class\nclass HelloWorldControl {\n    onAdd(map) {\n        this._map = map;\n        this._container = document.createElement('div');\n        this._container.className = 'maplibregl-ctrl';\n        this._container.textContent = 'Hello, world';\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.parentNode.removeChild(this._container);\n        this._map = undefined;\n    }\n}\n\n// Control implemented as ES5 prototypical class\nfunction HelloWorldControl() { }\n\nHelloWorldControl.prototype.onAdd = function(map) {\n    this._map = map;\n    this._container = document.createElement('div');\n    this._container.className = 'maplibregl-ctrl';\n    this._container.textContent = 'Hello, world';\n    return this._container;\n};\n\nHelloWorldControl.prototype.onRemove = function () {\n     this._container.parentNode.removeChild(this._container);\n     this._map = undefined;\n};",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 90,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/control.ts#L47-L90",
              "path": "src/ui/control/control.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// Control implemented as ES6 class\nclass HelloWorldControl {\n    onAdd(map) {\n        this._map = map;\n        this._container = document.createElement('div');\n        this._container.className = 'maplibregl-ctrl';\n        this._container.textContent = 'Hello, world';\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.parentNode.removeChild(this._container);\n        this._map = undefined;\n    }\n}\n\n// Control implemented as ES5 prototypical class\nfunction HelloWorldControl() { }\n\nHelloWorldControl.prototype.onAdd = function(map) {\n    this._map = map;\n    this._container = document.createElement('div');\n    this._container.className = 'maplibregl-ctrl';\n    this._container.textContent = 'Hello, world';\n    return this._container;\n};\n\nHelloWorldControl.prototype.onRemove = function () {\n     this._container.parentNode.removeChild(this._container);\n     this._map = undefined;\n};"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "interface",
          "name": "IControl",
          "path": [
            {
              "name": "IControl",
              "kind": "interface"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Optionally provide a default position for this control. If this method\nis implemented and "
                        },
                        {
                          "type": "link",
                          "url": "Map#addControl",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addControl"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " is called without the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "position"
                        },
                        {
                          "type": "text",
                          "value": "\nparameter, the value returned by getDefaultPosition will be used as the\ncontrol's position."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 6,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "IControl",
                    "lineNumber": 7
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 8
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 9,
                    "name": "getDefaultPosition"
                  },
                  {
                    "title": "returns",
                    "description": "a control position, one of the values valid in addControl.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "ControlPosition"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 77,
                    "column": 4
                  },
                  "end": {
                    "line": 88,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 89,
                      "column": 4
                    },
                    "end": {
                      "line": 89,
                      "column": 56
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/control.ts#L89-L89",
                    "path": "src/ui/control/control.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "a control position, one of the values valid in addControl."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "ControlPosition"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "IControl",
                "scope": "instance",
                "name": "getDefaultPosition",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "IControl",
                    "kind": "interface"
                  },
                  {
                    "name": "getDefaultPosition",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "IControl#getDefaultPosition"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Register a control on the map and give it a chance to register event listeners\nand resources. This method is called by "
                        },
                        {
                          "type": "link",
                          "url": "Map#addControl",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#addControl"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "\ninternally."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 5,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "IControl",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 8,
                    "name": "onAdd"
                  },
                  {
                    "title": "param",
                    "description": "the Map this control will be added to",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "The control's container element. This should\nbe created by the control and returned by onAdd without being attached\nto the DOM: the map will insert the control's element into the DOM\nas necessary.",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 48,
                    "column": 4
                  },
                  "end": {
                    "line": 62,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 4
                    },
                    "end": {
                      "line": 63,
                      "column": 33
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/control.ts#L63-L63",
                    "path": "src/ui/control/control.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the Map this control will be added to"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The control's container element. This should\nbe created by the control and returned by onAdd without being attached\nto the DOM: the map will insert the control's element into the DOM\nas necessary."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "IControl",
                "scope": "instance",
                "name": "onAdd",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "IControl",
                    "kind": "interface"
                  },
                  {
                    "name": "onAdd",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "IControl#onAdd"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Unregister a control on the map and give it a chance to detach event listeners\nand resources. This method is called by "
                        },
                        {
                          "type": "link",
                          "url": "Map#removeControl",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map#removeControl"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "\ninternally."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 5,
                    "name": null
                  },
                  {
                    "title": "memberof",
                    "description": "IControl",
                    "lineNumber": 6
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 8,
                    "name": "onRemove"
                  },
                  {
                    "title": "param",
                    "description": "the Map this control will be removed from",
                    "lineNumber": 9,
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "there is no required return value for this method",
                    "lineNumber": 10,
                    "type": {
                      "type": "UndefinedLiteral"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 64,
                    "column": 4
                  },
                  "end": {
                    "line": 75,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 29
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/control.ts#L76-L76",
                    "path": "src/ui/control/control.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "map",
                    "lineNumber": 9,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the Map this control will be removed from"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Map"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "there is no required return value for this method"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "UndefinedLiteral"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "memberof": "IControl",
                "scope": "instance",
                "name": "onRemove",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "IControl",
                    "kind": "interface"
                  },
                  {
                    "name": "onRemove",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "IControl#onRemove"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "IControl"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "NavigationControl"
                  },
                  {
                    "type": "text",
                    "value": " control contains zoom buttons and a compass."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "If `true` the compass button is included.",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Boolean"
                }
              },
              "name": "options.showCompass",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true` the zoom-in and zoom-out buttons are included.",
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Boolean"
                }
              },
              "name": "options.showZoom",
              "default": "true"
            },
            {
              "title": "param",
              "description": "If `true` the pitch is visualized by rotating X-axis of compass.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Boolean"
                }
              },
              "name": "options.visualizePitch",
              "default": "false"
            },
            {
              "title": "example",
              "description": "var nav = new maplibregl.NavigationControl();\nmap.addControl(nav, 'top-left');",
              "lineNumber": 8
            },
            {
              "title": "see",
              "description": "[Display map navigation controls](https://maplibre.org/maplibre-gl-js-docs/example/navigation/)",
              "lineNumber": 11
            },
            {
              "title": "see",
              "description": "[Add a third party vector tile source](https://maplibre.org/maplibre-gl-js-docs/example/third-party/)",
              "lineNumber": 12
            }
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 36,
                "column": 0
              },
              "end": {
                "line": 145,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/navigation_control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/navigation_control.ts#L36-L145",
              "path": "src/ui/control/navigation_control.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var nav = new maplibregl.NavigationControl();\nmap.addControl(nav, 'top-left');"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.showCompass",
                  "lineNumber": 5,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": " the compass button is included."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.showZoom",
                  "lineNumber": 6,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": " the zoom-in and zoom-out buttons are included."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Boolean"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.visualizePitch",
                  "lineNumber": 7,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": " the pitch is visualized by rotating X-axis of compass."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Boolean"
                  },
                  "default": "false"
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/navigation/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display map navigation controls"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/third-party/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add a third party vector tile source"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "NavigationControl",
          "kind": "class",
          "path": [
            {
              "name": "NavigationControl",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "NavigationControl"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "GeolocateControl"
                  },
                  {
                    "type": "text",
                    "value": " control provides a button that uses the browser's geolocation\nAPI to locate the user on the map."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Not all browsers support geolocation,\nand some users may disable the feature. Geolocation support for modern\nbrowsers including Chrome requires sites to be served over HTTPS. If\ngeolocation support is not available, the GeolocateControl will show\nas disabled."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The zoom level applied will depend on the accuracy of the geolocation provided by the device."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The GeolocateControl has two modes. If "
                  },
                  {
                    "type": "inlineCode",
                    "value": "trackUserLocation"
                  },
                  {
                    "type": "text",
                    "value": " is "
                  },
                  {
                    "type": "inlineCode",
                    "value": "false"
                  },
                  {
                    "type": "text",
                    "value": " (default) the control acts as a button, which when pressed will set the map's camera to target the user location. If the user moves, the map won't update. This is most suited for the desktop. If "
                  },
                  {
                    "type": "inlineCode",
                    "value": "trackUserLocation"
                  },
                  {
                    "type": "text",
                    "value": " is "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": " the control acts as a toggle button that when active the user's location is actively monitored for changes. In this mode the GeolocateControl has three interaction states:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "active - the map's camera automatically updates as the user's location changes, keeping the location dot in the center. Initial state and upon clicking the "
                          },
                          {
                            "type": "inlineCode",
                            "value": "GeolocateControl"
                          },
                          {
                            "type": "text",
                            "value": " button."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "passive - the user's location dot automatically updates, but the map's camera does not. Occurs upon the user initiating a map movement."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "disabled - occurs if Geolocation is not available, disabled or denied."
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "These interaction states can't be controlled programmatically, rather they are set based on user interactions."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 19,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 20,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "A Geolocation API [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) object.",
              "lineNumber": 21,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.positionOptions",
              "default": "{enableHighAccuracy:false,timeout:6000}"
            },
            {
              "title": "param",
              "description": "A {@link Map#fitBounds} options object to use when the map is panned and zoomed to the user's location. The default is to use a `maxZoom` of 15 to limit how far the map will zoom in for very accurate locations.",
              "lineNumber": 22,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.fitBoundsOptions",
              "default": "{maxZoom:15}"
            },
            {
              "title": "param",
              "description": "If `true` the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes.",
              "lineNumber": 23,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.trackUserLocation",
              "default": "false"
            },
            {
              "title": "param",
              "description": "By default, if showUserLocation is `true`, a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to `false` to disable. Always disabled when showUserLocation is `false`.",
              "lineNumber": 24,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.showAccuracyCircle",
              "default": "true"
            },
            {
              "title": "param",
              "description": "By default a dot will be shown on the map at the user's location. Set to `false` to disable.",
              "lineNumber": 25,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.showUserLocation",
              "default": "true"
            },
            {
              "title": "example",
              "description": "map.addControl(new maplibregl.GeolocateControl({\n    positionOptions: {\n        enableHighAccuracy: true\n    },\n    trackUserLocation: true\n}));",
              "lineNumber": 27
            },
            {
              "title": "see",
              "description": "[Locate the user](https://maplibre.org/maplibre-gl-js-docs/example/locate-user/)",
              "lineNumber": 34
            }
          ],
          "loc": {
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 95,
                "column": 0
              },
              "end": {
                "line": 552,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L95-L552",
              "path": "src/ui/control/geolocate_control.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "map.addControl(new maplibregl.GeolocateControl({\n    positionOptions: {\n        enableHighAccuracy: true\n    },\n    trackUserLocation: true\n}));"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 19,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 20,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.positionOptions",
                  "lineNumber": 21,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A Geolocation API "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions",
                            "children": [
                              {
                                "type": "text",
                                "value": "PositionOptions"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " object."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "{enableHighAccuracy:false,timeout:6000}"
                },
                {
                  "title": "param",
                  "name": "options.fitBoundsOptions",
                  "lineNumber": 22,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "A "
                          },
                          {
                            "type": "link",
                            "url": "Map#fitBounds",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": "Map#fitBounds"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " options object to use when the map is panned and zoomed to the user's location. The default is to use a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "maxZoom"
                          },
                          {
                            "type": "text",
                            "value": " of 15 to limit how far the map will zoom in for very accurate locations."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "{maxZoom:15}"
                },
                {
                  "title": "param",
                  "name": "options.trackUserLocation",
                  "lineNumber": 23,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": " the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "false"
                },
                {
                  "title": "param",
                  "name": "options.showAccuracyCircle",
                  "lineNumber": 24,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "By default, if showUserLocation is "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": " to disable. Always disabled when showUserLocation is "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "true"
                },
                {
                  "title": "param",
                  "name": "options.showUserLocation",
                  "lineNumber": 25,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "By default a dot will be shown on the map at the user's location. Set to "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": " to disable."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "default": "true"
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/locate-user/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Locate the user"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "GeolocateControl",
          "kind": "class",
          "path": [
            {
              "name": "GeolocateControl",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Programmatically request and move the map to the user's location."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "Returns `false` if called before control was added to a map, otherwise returns `true`.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n positionOptions: {\n   enableHighAccuracy: true\n },\n trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\nmap.on('load', function() {\n  geolocate.trigger();\n});",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 431,
                    "column": 4
                  },
                  "end": {
                    "line": 448,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 449,
                      "column": 4
                    },
                    "end": {
                      "line": 539,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L449-L539",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n positionOptions: {\n   enableHighAccuracy: true\n },\n trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\nmap.on('load', function() {\n  geolocate.trigger();\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Returns "
                            },
                            {
                              "type": "inlineCode",
                              "value": "false"
                            },
                            {
                              "type": "text",
                              "value": " if called before control was added to a map, otherwise returns "
                            },
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "trigger",
                "kind": "function",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "trigger",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl#trigger"
              }
            ],
            "events": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired on each Geolocation API position update which returned as an error."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "error",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "GeolocateControl",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": "The returned [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) object from the callback in [Geolocation.getCurrentPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition) or [Geolocation.watchPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition).",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "PositionError"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an error event occurs.\ngeolocate.on('error', function() {\n  console.log('An error event has occurred.')\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 598,
                    "column": 0
                  },
                  "end": {
                    "line": 621,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 554,
                      "column": 0
                    },
                    "end": {
                      "line": 554,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L554-L554",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an error event occurs.\ngeolocate.on('error', function() {\n  console.log('An error event has occurred.')\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The returned "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/PositionError",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "PositionError"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object from the callback in "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.getCurrentPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.watchPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PositionError"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "error",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "error",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl.event:error"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired on each Geolocation API position update which returned as success."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "geolocate",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "GeolocateControl",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": "The returned [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) object from the callback in [Geolocation.getCurrentPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition) or [Geolocation.watchPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition).",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Position"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a geolocate event occurs.\ngeolocate.on('geolocate', function() {\n  console.log('A geolocate event has occurred.')\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 573,
                    "column": 0
                  },
                  "end": {
                    "line": 596,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 554,
                      "column": 0
                    },
                    "end": {
                      "line": 554,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L554-L554",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a geolocate event occurs.\ngeolocate.on('geolocate', function() {\n  console.log('A geolocate event has occurred.')\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The returned "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Position",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Position"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object from the callback in "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.getCurrentPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.watchPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Position"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "geolocate",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "geolocate",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl.event:geolocate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired on each Geolocation API position update which returned as success but user position is out of map maxBounds."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "outofmaxbounds",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "GeolocateControl",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "property",
                    "description": "The returned [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) object from the callback in [Geolocation.getCurrentPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition) or [Geolocation.watchPosition()](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition).",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Position"
                    },
                    "name": "data"
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an outofmaxbounds event occurs.\ngeolocate.on('outofmaxbounds', function() {\n  console.log('An outofmaxbounds event has occurred.')\n});",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 623,
                    "column": 0
                  },
                  "end": {
                    "line": 646,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 554,
                      "column": 0
                    },
                    "end": {
                      "line": 554,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L554-L554",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an outofmaxbounds event occurs.\ngeolocate.on('outofmaxbounds', function() {\n  console.log('An outofmaxbounds event has occurred.')\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [
                  {
                    "title": "property",
                    "name": "data",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The returned "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Position",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Position"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object from the callback in "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.getCurrentPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "link",
                              "title": null,
                              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Geolocation.watchPosition()"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Position"
                    }
                  }
                ],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "outofmaxbounds",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "outofmaxbounds",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl.event:outofmaxbounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the Geolocate Control changes to the background state, which happens when a user changes the camera during an active position lock. This only applies when trackUserLocation is true. In the background state, the dot on the map will update with location updates but the camera will not."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "trackuserlocationend",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "GeolocateControl",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationend event occurs.\ngeolocate.on('trackuserlocationend', function() {\n  console.log('A trackuserlocationend event has occurred.')\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 672,
                    "column": 0
                  },
                  "end": {
                    "line": 694,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 554,
                      "column": 0
                    },
                    "end": {
                      "line": 554,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L554-L554",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationend event occurs.\ngeolocate.on('trackuserlocationend', function() {\n  console.log('A trackuserlocationend event has occurred.')\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "trackuserlocationend",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "trackuserlocationend",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl.event:trackuserlocationend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Fired when the Geolocate Control changes to the active lock state, which happens either upon first obtaining a successful Geolocation API position for the user (a geolocate event will follow), or the user clicks the geolocate button when in the background state which uses the last known position to recenter the map and enter active lock state (no geolocate event will follow unless the users's location changes)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "event",
                    "description": "trackuserlocationstart",
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "GeolocateControl",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationstart event occurs.\ngeolocate.on('trackuserlocationstart', function() {\n  console.log('A trackuserlocationstart event has occurred.')\n});",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 648,
                    "column": 0
                  },
                  "end": {
                    "line": 670,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 554,
                      "column": 0
                    },
                    "end": {
                      "line": 554,
                      "column": 32
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/geolocate_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/geolocate_control.ts#L554-L554",
                    "path": "src/ui/control/geolocate_control.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Initialize the geolocate control.\nvar geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationstart event occurs.\ngeolocate.on('trackuserlocationstart', function() {\n  console.log('A trackuserlocationstart event has occurred.')\n});"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "event",
                "name": "trackuserlocationstart",
                "memberof": "GeolocateControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeolocateControl",
                    "kind": "class"
                  },
                  {
                    "name": "trackuserlocationstart",
                    "kind": "event",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeolocateControl.event:trackuserlocationstart"
              }
            ],
            "static": []
          },
          "namespace": "GeolocateControl"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "An "
                  },
                  {
                    "type": "inlineCode",
                    "value": "AttributionControl"
                  },
                  {
                    "type": "text",
                    "value": " control presents the map's attribution information."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "If `true`, force a compact attribution that shows the full attribution on mouse hover. If `false`, force the full attribution control. The default is a responsive attribution that collapses when the map is less than 640 pixels wide. **Attribution should not be collapsed if it can comfortably fit on the map. `compact` should only be used to modify default attribution when map size makes it impossible to fit default attribution and when the automatic compact resizing for default settings are not sufficient.**",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "options.compact"
            },
            {
              "title": "param",
              "description": "String or strings to show in addition to any other attributions.",
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  ]
                }
              },
              "name": "options.customAttribution"
            },
            {
              "title": "example",
              "description": "var map = new maplibregl.Map({attributionControl: false})\n    .addControl(new maplibregl.AttributionControl({\n        compact: true\n    }));",
              "lineNumber": 7
            }
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 25,
                "column": 0
              },
              "end": {
                "line": 196,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/attribution_control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/attribution_control.ts#L25-L196",
              "path": "src/ui/control/attribution_control.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var map = new maplibregl.Map({attributionControl: false})\n    .addControl(new maplibregl.AttributionControl({\n        compact: true\n    }));"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.compact",
                  "lineNumber": 5,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "true"
                          },
                          {
                            "type": "text",
                            "value": ", force a compact attribution that shows the full attribution on mouse hover. If "
                          },
                          {
                            "type": "inlineCode",
                            "value": "false"
                          },
                          {
                            "type": "text",
                            "value": ", force the full attribution control. The default is a responsive attribution that collapses when the map is less than 640 pixels wide. "
                          },
                          {
                            "type": "strong",
                            "children": [
                              {
                                "type": "text",
                                "value": "Attribution should not be collapsed if it can comfortably fit on the map. "
                              },
                              {
                                "type": "inlineCode",
                                "value": "compact"
                              },
                              {
                                "type": "text",
                                "value": " should only be used to modify default attribution when map size makes it impossible to fit default attribution and when the automatic compact resizing for default settings are not sufficient."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                },
                {
                  "title": "param",
                  "name": "options.customAttribution",
                  "lineNumber": 6,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "String or strings to show in addition to any other attributions."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "string"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ],
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "AttributionControl",
          "kind": "class",
          "path": [
            {
              "name": "AttributionControl",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "AttributionControl"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "ScaleControl"
                  },
                  {
                    "type": "text",
                    "value": " control displays the ratio of a distance on the map to the corresponding distance on the ground."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "The maximum length of the scale control in pixels.",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.maxWidth",
              "default": "'100'"
            },
            {
              "title": "param",
              "description": "Unit of the distance (`'imperial'`, `'metric'` or `'nautical'`).",
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.unit",
              "default": "'metric'"
            },
            {
              "title": "example",
              "description": "var scale = new maplibregl.ScaleControl({\n    maxWidth: 80,\n    unit: 'imperial'\n});\nmap.addControl(scale);\n\nscale.setUnit('metric');",
              "lineNumber": 7
            }
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 35,
                "column": 0
              },
              "end": {
                "line": 82,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/scale_control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/scale_control.ts#L35-L82",
              "path": "src/ui/control/scale_control.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var scale = new maplibregl.ScaleControl({\n    maxWidth: 80,\n    unit: 'imperial'\n});\nmap.addControl(scale);\n\nscale.setUnit('metric');"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.maxWidth",
                  "lineNumber": 5,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "The maximum length of the scale control in pixels."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  "default": "'100'"
                },
                {
                  "title": "param",
                  "name": "options.unit",
                  "lineNumber": 6,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Unit of the distance ("
                          },
                          {
                            "type": "inlineCode",
                            "value": "'imperial'"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'metric'"
                          },
                          {
                            "type": "text",
                            "value": " or "
                          },
                          {
                            "type": "inlineCode",
                            "value": "'nautical'"
                          },
                          {
                            "type": "text",
                            "value": ")."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "default": "'metric'"
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "ScaleControl",
          "kind": "class",
          "path": [
            {
              "name": "ScaleControl",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the scale's unit of the distance"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Unit of the distance (`'imperial'`, `'metric'` or `'nautical'`).",
                    "lineNumber": 3,
                    "type": null,
                    "name": "unit"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 73,
                    "column": 4
                  },
                  "end": {
                    "line": 77,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 78,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/scale_control.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/scale_control.ts#L78-L81",
                    "path": "src/ui/control/scale_control.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "unit",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Unit of the distance ("
                            },
                            {
                              "type": "inlineCode",
                              "value": "'imperial'"
                            },
                            {
                              "type": "text",
                              "value": ", "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'metric'"
                            },
                            {
                              "type": "text",
                              "value": " or "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'nautical'"
                            },
                            {
                              "type": "text",
                              "value": ")."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Unit"
                    }
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setUnit",
                "kind": "function",
                "memberof": "ScaleControl",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScaleControl",
                    "kind": "class"
                  },
                  {
                    "name": "setUnit",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScaleControl#setUnit"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "ScaleControl"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "FullscreenControl"
                  },
                  {
                    "type": "text",
                    "value": " control contains a button for toggling the map in and out of fullscreen mode."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "param",
              "description": "`container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements) which should be made full screen. By default, the map container element will be made full screen.",
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "HTMLElement"
                }
              },
              "name": "options.container"
            },
            {
              "title": "example",
              "description": "map.addControl(new maplibregl.FullscreenControl({container: document.querySelector('body')}));",
              "lineNumber": 7
            },
            {
              "title": "see",
              "description": "[View a fullscreen map](https://maplibre.org/maplibre-gl-js-docs/example/fullscreen/)",
              "lineNumber": 9
            }
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 24,
                "column": 0
              },
              "end": {
                "line": 145,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/fullscreen_control.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/fullscreen_control.ts#L24-L145",
              "path": "src/ui/control/fullscreen_control.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "map.addControl(new maplibregl.FullscreenControl({container: document.querySelector('body')}));"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "IControl"
              },
              "name": "IControl"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 4,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "properties": [
                {
                  "title": "param",
                  "name": "options.container",
                  "lineNumber": 5,
                  "description": {
                    "type": "root",
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "container"
                          },
                          {
                            "type": "text",
                            "value": " is the "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements",
                            "children": [
                              {
                                "type": "text",
                                "value": "compatible DOM element"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " which should be made full screen. By default, the map container element will be made full screen."
                          }
                        ]
                      }
                    ]
                  },
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "HTMLElement"
                    }
                  }
                }
              ]
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/fullscreen/",
                        "children": [
                          {
                            "type": "text",
                            "value": "View a fullscreen map"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "FullscreenControl",
          "kind": "class",
          "path": [
            {
              "name": "FullscreenControl",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "FullscreenControl"
        }
      ]
    },
    "namespace": "Markers and controls"
  },
  {
    "name": "Geography and geometry",
    "page": "geography",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "General utilities and types that relate to working with and manipulating geographic information or geometries."
            }
          ]
        }
      ]
    },
    "children": [
      "LngLat",
      "LngLatLike",
      "LngLatBounds",
      "LngLatBoundsLike",
      "PointLike",
      "MercatorCoordinate",
      "EdgeInsets"
    ],
    "kind": "note",
    "path": [
      {
        "name": "Geography and geometry",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "LngLat"
                  },
                  {
                    "type": "text",
                    "value": " object represents a given longitude and latitude coordinate, measured in degrees.\nThese coordinates are based on the "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84",
                    "children": [
                      {
                        "type": "text",
                        "value": "WGS84 (EPSG:4326) standard"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "MapLibre GL uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the\n"
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://tools.ietf.org/html/rfc7946",
                    "children": [
                      {
                        "type": "text",
                        "value": "GeoJSON specification"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Note that any MapLibre GL method that accepts a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "LngLat"
                  },
                  {
                    "type": "text",
                    "value": " object as an argument or option\ncan also accept an "
                  },
                  {
                    "type": "inlineCode",
                    "value": "Array"
                  },
                  {
                    "type": "text",
                    "value": " of two numbers and will perform an implicit conversion.\nThis flexible type is documented as "
                  },
                  {
                    "type": "link",
                    "url": "LngLatLike",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLatLike"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "Longitude, measured in degrees.",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lng"
            },
            {
              "title": "param",
              "description": "Latitude, measured in degrees.",
              "lineNumber": 12,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lat"
            },
            {
              "title": "example",
              "description": "var ll = new maplibregl.LngLat(-123.9749, 40.7736);\nll.lng; // = -123.9749",
              "lineNumber": 13
            },
            {
              "title": "see",
              "description": "[Get coordinates of the mouse pointer](https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/)",
              "lineNumber": 16
            },
            {
              "title": "see",
              "description": "[Display a popup](https://maplibre.org/maplibre-gl-js-docs/example/popup/)",
              "lineNumber": 17
            },
            {
              "title": "see",
              "description": "[Create a timeline animation](https://maplibre.org/maplibre-gl-js-docs/example/timeline-animation/)",
              "lineNumber": 18
            }
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 31,
                "column": 0
              },
              "end": {
                "line": 151,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L31-L151",
              "path": "src/geo/lng_lat.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var ll = new maplibregl.LngLat(-123.9749, 40.7736);\nll.lng; // = -123.9749"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "lng",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Longitude, measured in degrees."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "param",
              "name": "lat",
              "lineNumber": 12,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Latitude, measured in degrees."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/mouse-position/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Get coordinates of the mouse pointer"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/popup/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Display a popup"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/timeline-animation/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Create a timeline animation"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "LngLat",
          "kind": "class",
          "path": [
            {
              "name": "LngLat",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the approximate distance between a pair of coordinates in meters\nUses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "coordinates to compute the distance to",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    },
                    "name": "lngLat"
                  },
                  {
                    "title": "returns",
                    "description": "Distance in meters between the two coordinates.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var new_york = new maplibregl.LngLat(-74.0060, 40.7128);\nvar los_angeles = new maplibregl.LngLat(-118.2437, 34.0522);\nnew_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 83,
                    "column": 4
                  },
                  "end": {
                    "line": 93,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 102,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L94-L102",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var new_york = new maplibregl.LngLat(-74.0060, 40.7128);\nvar los_angeles = new maplibregl.LngLat(-118.2437, 34.0522);\nnew_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lngLat",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "coordinates to compute the distance to"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Distance in meters between the two coordinates."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "distanceTo",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "distanceTo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLat#distanceTo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the coordinates represented as an array of two numbers."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The coordinates represeted as an array of longitude and latitude.",
                    "lineNumber": 3,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toArray(); // = [-73.9749, 40.7736]",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 59,
                    "column": 4
                  },
                  "end": {
                    "line": 66,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 69,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L67-L69",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toArray(); // = [-73.9749, 40.7736]"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The coordinates represeted as an array of longitude and latitude."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toArray",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "toArray",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLat#toArray"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLatBounds"
                        },
                        {
                          "type": "text",
                          "value": " from the coordinates extended by a given "
                        },
                        {
                          "type": "inlineCode",
                          "value": "radius"
                        },
                        {
                          "type": "text",
                          "value": ". The returned "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLatBounds"
                        },
                        {
                          "type": "text",
                          "value": " completely contains the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "radius"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Distance in meters from the coordinates to extend the bounds.",
                    "lineNumber": 3,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "radius",
                    "default": "0"
                  },
                  {
                    "title": "returns",
                    "description": "A new `LngLatBounds` object representing the coordinates extended by the `radius`.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 104,
                    "column": 4
                  },
                  "end": {
                    "line": 112,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 4
                    },
                    "end": {
                      "line": 120,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L113-L120",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "radius",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Distance in meters from the coordinates to extend the bounds."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "default": "0"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A new "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLatBounds"
                            },
                            {
                              "type": "text",
                              "value": " object representing the coordinates extended by the "
                            },
                            {
                              "type": "inlineCode",
                              "value": "radius"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toBounds",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "toBounds",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLat#toBounds"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the coordinates represent as a string."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The coordinates represented as a string of the format `'LngLat(lng, lat)'`.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toString(); // = \"LngLat(-73.9749, 40.7736)\"",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 71,
                    "column": 4
                  },
                  "end": {
                    "line": 78,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L79-L81",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toString(); // = \"LngLat(-73.9749, 40.7736)\""
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The coordinates represented as a string of the format "
                            },
                            {
                              "type": "inlineCode",
                              "value": "'LngLat(lng, lat)'"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toString",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "toString",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLat#toString"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a new "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " object whose longitude is wrapped to the range (-180, 180)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The wrapped `LngLat` object.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var ll = new maplibregl.LngLat(286.0251, 40.7736);\nvar wrapped = ll.wrap();\nwrapped.lng; // = -73.9749",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 46,
                    "column": 4
                  },
                  "end": {
                    "line": 54,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 4
                    },
                    "end": {
                      "line": 57,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L55-L57",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var ll = new maplibregl.LngLat(286.0251, 40.7736);\nvar wrapped = ll.wrap();\nwrapped.lng; // = -73.9749"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The wrapped "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "wrap",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "wrap",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLat#wrap"
              }
            ],
            "events": [],
            "static": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Converts an array of two numbers or an object with "
                        },
                        {
                          "type": "inlineCode",
                          "value": "lng"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "lat"
                        },
                        {
                          "type": "text",
                          "value": " or "
                        },
                        {
                          "type": "inlineCode",
                          "value": "lon"
                        },
                        {
                          "type": "text",
                          "value": " and "
                        },
                        {
                          "type": "inlineCode",
                          "value": "lat"
                        },
                        {
                          "type": "text",
                          "value": " properties\nto a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " object."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " object is passed in, the function returns it unchanged."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "An array of two numbers or object to convert, or a `LngLat` object to return.",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "input"
                  },
                  {
                    "title": "returns",
                    "description": "A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var arr = [-73.9749, 40.7736];\nvar ll = maplibregl.LngLat.convert(arr);\nll;   // = LngLat {lng: -73.9749, lat: 40.7736}",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 122,
                    "column": 4
                  },
                  "end": {
                    "line": 134,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 135,
                      "column": 4
                    },
                    "end": {
                      "line": 150,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L135-L150",
                    "path": "src/geo/lng_lat.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var arr = [-73.9749, 40.7736];\nvar ll = maplibregl.LngLat.convert(arr);\nll;   // = LngLat {lng: -73.9749, lat: 40.7736}"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "input",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An array of two numbers or object to convert, or a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " object to return."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A new "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " object, if a conversion occurred, or the original "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "convert",
                "kind": "function",
                "memberof": "LngLat",
                "scope": "static",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLat",
                    "kind": "class"
                  },
                  {
                    "name": "convert",
                    "kind": "function",
                    "scope": "static"
                  }
                ],
                "namespace": "LngLat.convert"
              }
            ]
          },
          "namespace": "LngLat"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "link",
                    "url": "LngLat",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLat"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " object, an array of two numbers representing longitude and latitude,\nor an object with "
                  },
                  {
                    "type": "inlineCode",
                    "value": "lng"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "lat"
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "lon"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "lat"
                  },
                  {
                    "type": "text",
                    "value": " properties."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "LngLat"
                  },
                  {
                    "type": "RecordType",
                    "fields": [
                      {
                        "type": "FieldType",
                        "key": "lng",
                        "value": {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      },
                      {
                        "type": "FieldType",
                        "key": "lat",
                        "value": {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      }
                    ]
                  },
                  {
                    "type": "RecordType",
                    "fields": [
                      {
                        "type": "FieldType",
                        "key": "lon",
                        "value": {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      },
                      {
                        "type": "FieldType",
                        "key": "lat",
                        "value": {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      }
                    ]
                  },
                  {
                    "type": "ArrayType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      },
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "LngLatLike"
            },
            {
              "title": "example",
              "description": "var v1 = new maplibregl.LngLat(-122.420679, 37.772537);\nvar v2 = [-122.420679, 37.772537];\nvar v3 = {lon: -122.420679, lat: 37.772537};",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 153,
              "column": 0
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 163,
                "column": 0
              },
              "end": {
                "line": 169,
                "column": 21
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat.ts#L153-L162",
              "path": "src/geo/lng_lat.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var v1 = new maplibregl.LngLat(-122.420679, 37.772537);\nvar v2 = [-122.420679, 37.772537];\nvar v3 = {lon: -122.420679, lat: 37.772537};"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "LngLatLike",
          "type": {
            "type": "UnionType",
            "elements": [
              {
                "type": "NameExpression",
                "name": "LngLat"
              },
              {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "lng",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "lat",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ]
              },
              {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "lon",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "lat",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ]
              },
              {
                "type": "ArrayType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            ]
          },
          "path": [
            {
              "name": "LngLatLike",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "LngLatLike"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "LngLatBounds"
                  },
                  {
                    "type": "text",
                    "value": " object represents a geographical bounding box,\ndefined by its southwest and northeast points in longitude and latitude."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If no arguments are provided to the constructor, a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "null"
                  },
                  {
                    "type": "text",
                    "value": " bounding box is created."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Note that any Mapbox GL method that accepts a "
                  },
                  {
                    "type": "inlineCode",
                    "value": "LngLatBounds"
                  },
                  {
                    "type": "text",
                    "value": " object as an argument or option\ncan also accept an "
                  },
                  {
                    "type": "inlineCode",
                    "value": "Array"
                  },
                  {
                    "type": "text",
                    "value": " of two "
                  },
                  {
                    "type": "link",
                    "url": "LngLatLike",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLatLike"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " constructs and will perform an implicit conversion.\nThis flexible type is documented as "
                  },
                  {
                    "type": "link",
                    "url": "LngLatBoundsLike",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLatBoundsLike"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The southwest corner of the bounding box.",
              "lineNumber": 10,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatLike"
                }
              },
              "name": "sw"
            },
            {
              "title": "param",
              "description": "The northeast corner of the bounding box.",
              "lineNumber": 11,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatLike"
                }
              },
              "name": "ne"
            },
            {
              "title": "example",
              "description": "var sw = new maplibregl.LngLat(-73.9876, 40.7661);\nvar ne = new maplibregl.LngLat(-73.9397, 40.8002);\nvar llb = new maplibregl.LngLatBounds(sw, ne);",
              "lineNumber": 12
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 22,
                "column": 0
              },
              "end": {
                "line": 258,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L22-L258",
              "path": "src/geo/lng_lat_bounds.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var sw = new maplibregl.LngLat(-73.9876, 40.7661);\nvar ne = new maplibregl.LngLat(-73.9397, 40.8002);\nvar llb = new maplibregl.LngLatBounds(sw, ne);"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "sw",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The southwest corner of the bounding box."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatLike"
                }
              }
            },
            {
              "title": "param",
              "name": "ne",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The northeast corner of the bounding box."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "LngLatLike"
                }
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "LngLatBounds",
          "kind": "class",
          "path": [
            {
              "name": "LngLatBounds",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Check if the point is within the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "geographic point to check against.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "lnglat"
                  },
                  {
                    "title": "returns",
                    "description": "True if the point is within the bounding box.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var llb = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\n\nvar ll = new maplibregl.LngLat(-73.9567, 40.7789);\n\nconsole.log(llb.contains(ll)); // = true",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 212,
                    "column": 4
                  },
                  "end": {
                    "line": 226,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 227,
                      "column": 4
                    },
                    "end": {
                      "line": 237,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L227-L237",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var llb = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\n\nvar ll = new maplibregl.LngLat(-73.9567, 40.7789);\n\nconsole.log(llb.contains(ll)); // = true"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lnglat",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "geographic point to check against."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if the point is within the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "contains",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "contains",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#contains"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Extend the bounds to include a given LngLatLike or LngLatBoundsLike."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "object to extend to",
                    "lineNumber": 3,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "LngLatLike"
                        },
                        {
                          "type": "NameExpression",
                          "name": "LngLatBoundsLike"
                        }
                      ]
                    },
                    "name": "obj"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 4
                  },
                  "end": {
                    "line": 66,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 107,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L67-L107",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "obj",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "object to extend to"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "LngLatLike"
                        },
                        {
                          "type": "NameExpression",
                          "name": "LngLatBoundsLike"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "extend",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "extend",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#extend"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the geographical coordinate equidistant from the bounding box's corners."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The bounding box's center.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 109,
                    "column": 4
                  },
                  "end": {
                    "line": 116,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 119,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L117-L119",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The bounding box's center."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getCenter",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getCenter",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getCenter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the east edge of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The east edge of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 163,
                    "column": 4
                  },
                  "end": {
                    "line": 167,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 168,
                      "column": 4
                    },
                    "end": {
                      "line": 168,
                      "column": 46
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L168-L168",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The east edge of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getEast",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getEast",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getEast"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the north edge of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The north edge of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 170,
                    "column": 4
                  },
                  "end": {
                    "line": 174,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 175,
                      "column": 4
                    },
                    "end": {
                      "line": 175,
                      "column": 47
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L175-L175",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The north edge of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getNorth",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getNorth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getNorth"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the northeast corner of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The northeast corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 128,
                    "column": 4
                  },
                  "end": {
                    "line": 132,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 133,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 47
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L133-L133",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The northeast corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getNorthEast",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getNorthEast",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getNorthEast"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the northwest corner of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The northwest corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 135,
                    "column": 4
                  },
                  "end": {
                    "line": 139,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 140,
                      "column": 4
                    },
                    "end": {
                      "line": 140,
                      "column": 82
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L140-L140",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The northwest corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getNorthWest",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getNorthWest",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getNorthWest"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the south edge of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The south edge of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 156,
                    "column": 4
                  },
                  "end": {
                    "line": 160,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 161,
                      "column": 4
                    },
                    "end": {
                      "line": 161,
                      "column": 47
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L161-L161",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The south edge of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getSouth",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getSouth",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getSouth"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the southeast corner of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The southeast corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 4
                  },
                  "end": {
                    "line": 146,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 82
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L147-L147",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The southeast corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getSouthEast",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getSouthEast",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getSouthEast"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the southwest corner of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The southwest corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 121,
                    "column": 4
                  },
                  "end": {
                    "line": 125,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 126,
                      "column": 4
                    },
                    "end": {
                      "line": 126,
                      "column": 47
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L126-L126",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The southwest corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getSouthWest",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getSouthWest",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getSouthWest"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the west edge of the bounding box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The west edge of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 149,
                    "column": 4
                  },
                  "end": {
                    "line": 153,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 154,
                      "column": 4
                    },
                    "end": {
                      "line": 154,
                      "column": 46
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L154-L154",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The west edge of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getWest",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "getWest",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#getWest"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Check if the bounding box is an empty/"
                        },
                        {
                          "type": "inlineCode",
                          "value": "null"
                        },
                        {
                          "type": "text",
                          "value": "-type box."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "True if bounds have been defined, otherwise false.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 203,
                    "column": 4
                  },
                  "end": {
                    "line": 207,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 208,
                      "column": 4
                    },
                    "end": {
                      "line": 210,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L208-L210",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "True if bounds have been defined, otherwise false."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEmpty",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "isEmpty",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#isEmpty"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the northeast corner of the bounding box"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "a {@link LngLatLike} object describing the northeast corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "ne"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 39,
                    "column": 4
                  },
                  "end": {
                    "line": 44,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L45-L48",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "ne",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "a "
                            },
                            {
                              "type": "link",
                              "url": "LngLatLike",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLatLike"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object describing the northeast corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setNorthEast",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "setNorthEast",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#setNorthEast"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the southwest corner of the bounding box"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "a {@link LngLatLike} object describing the southwest corner of the bounding box.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "sw"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 50,
                    "column": 4
                  },
                  "end": {
                    "line": 55,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L56-L59",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "sw",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "a "
                            },
                            {
                              "type": "link",
                              "url": "LngLatLike",
                              "title": null,
                              "jsdoc": true,
                              "children": [
                                {
                                  "type": "text",
                                  "value": "LngLatLike"
                                }
                              ]
                            },
                            {
                              "type": "text",
                              "value": " object describing the southwest corner of the bounding box."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setSouthWest",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "setSouthWest",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#setSouthWest"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the bounding box represented as an array."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The bounding box represented as an array, consisting of the\n  southwest and northeast coordinates of the bounding represented as arrays of numbers.",
                    "lineNumber": 3,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "title": "example",
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 177,
                    "column": 4
                  },
                  "end": {
                    "line": 185,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 186,
                      "column": 4
                    },
                    "end": {
                      "line": 188,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L186-L188",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The bounding box represented as an array, consisting of the\nsouthwest and northeast coordinates of the bounding represented as arrays of numbers."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toArray",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "toArray",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#toArray"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Return the bounding box represented as a string."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The bounding box represents as a string of the format\n  `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 190,
                    "column": 4
                  },
                  "end": {
                    "line": 198,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 199,
                      "column": 4
                    },
                    "end": {
                      "line": 201,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L199-L201",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\""
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The bounding box represents as a string of the format\n"
                            },
                            {
                              "type": "inlineCode",
                              "value": "'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toString",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "toString",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "LngLatBounds#toString"
              }
            ],
            "events": [],
            "static": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Converts an array to a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLatBounds"
                        },
                        {
                          "type": "text",
                          "value": " object."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "If a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLatBounds"
                        },
                        {
                          "type": "text",
                          "value": " object is passed in, the function returns it unchanged."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Internally, the function calls "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat#convert"
                        },
                        {
                          "type": "text",
                          "value": " to convert arrays to "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " values."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "An array of two coordinates to convert, or a `LngLatBounds` object to return.",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    },
                    "name": "input"
                  },
                  {
                    "title": "returns",
                    "description": "A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.",
                    "lineNumber": 8,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\nvar llb = maplibregl.LngLatBounds.convert(arr);\nllb;   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}",
                    "lineNumber": 9
                  }
                ],
                "loc": {
                  "start": {
                    "line": 239,
                    "column": 4
                  },
                  "end": {
                    "line": 252,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 253,
                      "column": 4
                    },
                    "end": {
                      "line": 257,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L253-L257",
                    "path": "src/geo/lng_lat_bounds.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\nvar llb = maplibregl.LngLatBounds.convert(arr);\nllb;   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "input",
                    "lineNumber": 7,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "An array of two coordinates to convert, or a "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLatBounds"
                            },
                            {
                              "type": "text",
                              "value": " object to return."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBoundsLike"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A new "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLatBounds"
                            },
                            {
                              "type": "text",
                              "value": " object, if a conversion occurred, or the original "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLatBounds"
                            },
                            {
                              "type": "text",
                              "value": " object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatBounds"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "convert",
                "kind": "function",
                "memberof": "LngLatBounds",
                "scope": "static",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "LngLatBounds",
                    "kind": "class"
                  },
                  {
                    "name": "convert",
                    "kind": "function",
                    "scope": "static"
                  }
                ],
                "namespace": "LngLatBounds.convert"
              }
            ]
          },
          "namespace": "LngLatBounds"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "link",
                    "url": "LngLatBounds",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLatBounds"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " object, an array of "
                  },
                  {
                    "type": "link",
                    "url": "LngLatLike",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "LngLatLike"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " objects in [sw, ne] order,\nor an array of numbers in [west, south, east, north] order."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "LngLatBounds"
                  },
                  {
                    "type": "ArrayType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "LngLatLike"
                      },
                      {
                        "type": "NameExpression",
                        "name": "LngLatLike"
                      }
                    ]
                  },
                  {
                    "type": "ArrayType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      },
                      {
                        "type": "NameExpression",
                        "name": "number"
                      },
                      {
                        "type": "NameExpression",
                        "name": "number"
                      },
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "LngLatBoundsLike"
            },
            {
              "title": "example",
              "description": "var v1 = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\nvar v2 = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\nvar v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 260,
              "column": 0
            },
            "end": {
              "line": 272,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 273,
                "column": 0
              },
              "end": {
                "line": 273,
                "column": 106
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/lng_lat_bounds.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/lng_lat_bounds.ts#L260-L272",
              "path": "src/geo/lng_lat_bounds.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var v1 = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\nvar v2 = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\nvar v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "LngLatBoundsLike",
          "type": {
            "type": "UnionType",
            "elements": [
              {
                "type": "NameExpression",
                "name": "LngLatBounds"
              },
              {
                "type": "ArrayType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "LngLatLike"
                  },
                  {
                    "type": "NameExpression",
                    "name": "LngLatLike"
                  }
                ]
              },
              {
                "type": "ArrayType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            ]
          },
          "path": [
            {
              "name": "LngLatBoundsLike",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "LngLatBoundsLike"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://github.com/mapbox/point-geometry",
                    "children": [
                      {
                        "type": "text",
                        "value": "Point"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " or an array of two numbers representing "
                  },
                  {
                    "type": "inlineCode",
                    "value": "x"
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "y"
                  },
                  {
                    "type": "text",
                    "value": " screen coordinates in pixels."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "Point"
                  },
                  {
                    "type": "ArrayType",
                    "elements": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      },
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "PointLike"
            },
            {
              "title": "example",
              "description": "var p1 = new Point(-77, 38); // a PointLike which is a Point\nvar p2 = [-77, 38]; // a PointLike which is an array of two numbers",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 25,
                "column": 0
              },
              "end": {
                "line": 25,
                "column": 49
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/camera.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/camera.ts#L17-L24",
              "path": "src/ui/camera.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var p1 = new Point(-77, 38); // a PointLike which is a Point\nvar p2 = [-77, 38]; // a PointLike which is an array of two numbers"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "PointLike",
          "type": {
            "type": "UnionType",
            "elements": [
              {
                "type": "NameExpression",
                "name": "Point"
              },
              {
                "type": "ArrayType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            ]
          },
          "path": [
            {
              "name": "PointLike",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "PointLike"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "MercatorCoordinate"
                  },
                  {
                    "type": "text",
                    "value": " object represents a projected three dimensional position."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "MercatorCoordinate"
                  },
                  {
                    "type": "text",
                    "value": " uses the web mercator projection ("
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://epsg.io/3857",
                    "children": [
                      {
                        "type": "text",
                        "value": "EPSG:3857"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ") with slightly different units:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "the size of 1 unit is the width of the projected world instead of the \"mercator meter\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "the origin of the coordinate space is at the north-west corner instead of the middle"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "For example, "
                  },
                  {
                    "type": "inlineCode",
                    "value": "MercatorCoordinate(0, 0, 0)"
                  },
                  {
                    "type": "text",
                    "value": " is the north-west corner of the mercator world and\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "MercatorCoordinate(1, 1, 0)"
                  },
                  {
                    "type": "text",
                    "value": " is the south-east corner. If you are familiar with\n"
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://github.com/mapbox/vector-tile-spec",
                    "children": [
                      {
                        "type": "text",
                        "value": "vector tiles"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " it may be helpful to think\nof the coordinate space as the "
                  },
                  {
                    "type": "inlineCode",
                    "value": "0/0/0"
                  },
                  {
                    "type": "text",
                    "value": " tile with an extent of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "1"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "z"
                  },
                  {
                    "type": "text",
                    "value": " dimension of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "MercatorCoordinate"
                  },
                  {
                    "type": "text",
                    "value": " is conformal. A cube in the mercator coordinate space would be rendered as a cube."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "The x component of the position.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "The y component of the position.",
              "lineNumber": 15,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "The z component of the position.",
              "lineNumber": 16,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "z"
            },
            {
              "title": "example",
              "description": "var nullIsland = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);",
              "lineNumber": 17
            },
            {
              "title": "see",
              "description": "[Add a custom style layer](https://maplibre.org/maplibre-gl-js-docs/example/custom-style-layer/)",
              "lineNumber": 20
            }
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 77,
                "column": 0
              },
              "end": {
                "line": 146,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/mercator_coordinate.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/mercator_coordinate.ts#L77-L146",
              "path": "src/geo/mercator_coordinate.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "var nullIsland = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "x",
              "lineNumber": 14,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The x component of the position."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "param",
              "name": "y",
              "lineNumber": 15,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The y component of the position."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "param",
              "name": "z",
              "lineNumber": 16,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The z component of the position."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/custom-style-layer/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add a custom style layer"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "MercatorCoordinate",
          "kind": "class",
          "path": [
            {
              "name": "MercatorCoordinate",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the distance of 1 meter in "
                        },
                        {
                          "type": "inlineCode",
                          "value": "MercatorCoordinate"
                        },
                        {
                          "type": "text",
                          "value": " units at this latitude."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "For coordinates in real world units using meters, this naturally provides the scale\nto transform into "
                        },
                        {
                          "type": "inlineCode",
                          "value": "MercatorCoordinate"
                        },
                        {
                          "type": "text",
                          "value": "s."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "Distance of 1 meter in `MercatorCoordinate` units.",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 133,
                    "column": 4
                  },
                  "end": {
                    "line": 140,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 141,
                      "column": 4
                    },
                    "end": {
                      "line": 144,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/mercator_coordinate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/mercator_coordinate.ts#L141-L144",
                    "path": "src/geo/mercator_coordinate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Distance of 1 meter in "
                            },
                            {
                              "type": "inlineCode",
                              "value": "MercatorCoordinate"
                            },
                            {
                              "type": "text",
                              "value": " units."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "meterInMercatorCoordinateUnits",
                "kind": "function",
                "memberof": "MercatorCoordinate",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MercatorCoordinate",
                    "kind": "class"
                  },
                  {
                    "name": "meterInMercatorCoordinateUnits",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MercatorCoordinate#meterInMercatorCoordinateUnits"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the altitude in meters of the coordinate."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The altitude in meters.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var coord = new maplibregl.MercatorCoordinate(0, 0, 0.02);\ncoord.toAltitude(); // 6914.281956295339",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 121,
                    "column": 4
                  },
                  "end": {
                    "line": 128,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 129,
                      "column": 4
                    },
                    "end": {
                      "line": 131,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/mercator_coordinate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/mercator_coordinate.ts#L129-L131",
                    "path": "src/geo/mercator_coordinate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var coord = new maplibregl.MercatorCoordinate(0, 0, 0.02);\ncoord.toAltitude(); // 6914.281956295339"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The altitude in meters."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toAltitude",
                "kind": "function",
                "memberof": "MercatorCoordinate",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MercatorCoordinate",
                    "kind": "class"
                  },
                  {
                    "name": "toAltitude",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MercatorCoordinate#toAltitude"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " for the coordinate."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The `LngLat` object.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var coord = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\nvar lngLat = coord.toLngLat(); // LngLat(0, 0)",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 107,
                    "column": 4
                  },
                  "end": {
                    "line": 114,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 115,
                      "column": 4
                    },
                    "end": {
                      "line": 119,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/mercator_coordinate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/mercator_coordinate.ts#L115-L119",
                    "path": "src/geo/mercator_coordinate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var coord = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\nvar lngLat = coord.toLngLat(); // LngLat(0, 0)"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The "
                            },
                            {
                              "type": "inlineCode",
                              "value": "LngLat"
                            },
                            {
                              "type": "text",
                              "value": " object."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "toLngLat",
                "kind": "function",
                "memberof": "MercatorCoordinate",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MercatorCoordinate",
                    "kind": "class"
                  },
                  {
                    "name": "toLngLat",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MercatorCoordinate#toLngLat"
              }
            ],
            "events": [],
            "static": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Project a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "LngLat"
                        },
                        {
                          "type": "text",
                          "value": " to a "
                        },
                        {
                          "type": "inlineCode",
                          "value": "MercatorCoordinate"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The location to project.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    },
                    "name": "lngLatLike"
                  },
                  {
                    "title": "param",
                    "description": "The altitude in meters of the position.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "altitude"
                  },
                  {
                    "title": "returns",
                    "description": "The projected mercator coordinate.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "MercatorCoordinate"
                    }
                  },
                  {
                    "title": "example",
                    "description": "var coord = maplibregl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\ncoord; // MercatorCoordinate(0.5, 0.5, 0)",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 97,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 98,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/mercator_coordinate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/mercator_coordinate.ts#L98-L105",
                    "path": "src/geo/mercator_coordinate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "var coord = maplibregl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\ncoord; // MercatorCoordinate(0.5, 0.5, 0)"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "lngLatLike",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The location to project."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "LngLatLike"
                    }
                  },
                  {
                    "title": "param",
                    "name": "altitude",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The altitude in meters of the position."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "default": "0"
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The projected mercator coordinate."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "MercatorCoordinate"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "fromLngLat",
                "kind": "function",
                "memberof": "MercatorCoordinate",
                "scope": "static",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MercatorCoordinate",
                    "kind": "class"
                  },
                  {
                    "name": "fromLngLat",
                    "kind": "function",
                    "scope": "static"
                  }
                ],
                "namespace": "MercatorCoordinate.fromLngLat"
              }
            ]
          },
          "namespace": "MercatorCoordinate"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "An "
                  },
                  {
                    "type": "inlineCode",
                    "value": "EdgeInset"
                  },
                  {
                    "type": "text",
                    "value": " object represents screen space padding applied to the edges of the viewport.\nThis shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\non top of the map and having the vanishing point shift as UI elements resize."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": null,
              "lineNumber": 5,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "top",
              "default": "0"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 6,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "bottom",
              "default": "0"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "left",
              "default": "0"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 8,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "right",
              "default": "0"
            }
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 15,
                "column": 0
              },
              "end": {
                "line": 97,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L15-L97",
              "path": "src/geo/edge_insets.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "top",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "bottom",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "left",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            },
            {
              "title": "param",
              "name": "right",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "default": "0"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "EdgeInsets",
          "kind": "class",
          "path": [
            {
              "name": "EdgeInsets",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Utility method that computes the new apprent center or vanishing point after applying insets.\nThis is in pixels and with the top left being (0.0) and +y being downwards."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "the width",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "width"
                  },
                  {
                    "title": "param",
                    "description": "the height",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "height"
                  },
                  {
                    "title": "returns",
                    "description": "the point",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "EdgeInsets",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 54,
                    "column": 4
                  },
                  "end": {
                    "line": 62,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 4
                    },
                    "end": {
                      "line": 69,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L63-L69",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "width",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the width"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "height",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the height"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the point"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "EdgeInsets",
                "name": "getCenter",
                "kind": "function",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "EdgeInsets",
                    "kind": "class"
                  },
                  {
                    "name": "getCenter",
                    "kind": "function"
                  }
                ],
                "namespace": "EdgeInsetsgetCenter"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Interpolates the inset in-place.\nThis maintains the current inset value for any inset not present in "
                        },
                        {
                          "type": "inlineCode",
                          "value": "target"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "interpolation start",
                    "lineNumber": 3,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "PaddingOptions"
                        },
                        {
                          "type": "NameExpression",
                          "name": "EdgeInsets"
                        }
                      ]
                    },
                    "name": "start"
                  },
                  {
                    "title": "param",
                    "description": "interpolation target",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    },
                    "name": "target"
                  },
                  {
                    "title": "param",
                    "description": "interpolation step/weight",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "name": "t"
                  },
                  {
                    "title": "returns",
                    "description": "the insets",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "EdgeInsets"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "EdgeInsets",
                    "lineNumber": 7
                  }
                ],
                "loc": {
                  "start": {
                    "line": 36,
                    "column": 4
                  },
                  "end": {
                    "line": 44,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 4
                    },
                    "end": {
                      "line": 52,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L45-L52",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "start",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "interpolation start"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "PaddingOptions"
                        },
                        {
                          "type": "NameExpression",
                          "name": "EdgeInsets"
                        }
                      ]
                    }
                  },
                  {
                    "title": "param",
                    "name": "target",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "interpolation target"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    }
                  },
                  {
                    "title": "param",
                    "name": "t",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "interpolation step/weight"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "the insets"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "EdgeInsets"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "EdgeInsets",
                "name": "interpolate",
                "kind": "function",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "EdgeInsets",
                    "kind": "class"
                  },
                  {
                    "name": "interpolate",
                    "kind": "function"
                  }
                ],
                "namespace": "EdgeInsetsinterpolate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the current state as json, useful when you want to have a\nread-only representation of the inset."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "state as json",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "EdgeInsets",
                    "lineNumber": 5
                  }
                ],
                "loc": {
                  "start": {
                    "line": 82,
                    "column": 4
                  },
                  "end": {
                    "line": 88,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 89,
                      "column": 4
                    },
                    "end": {
                      "line": 96,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/geo/edge_insets.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/geo/edge_insets.ts#L89-L96",
                    "path": "src/geo/edge_insets.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "state as json"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "PaddingOptions"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "EdgeInsets",
                "name": "toJSON",
                "kind": "function",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "EdgeInsets",
                    "kind": "class"
                  },
                  {
                    "name": "toJSON",
                    "kind": "function"
                  }
                ],
                "namespace": "EdgeInsetstoJSON"
              }
            ]
          },
          "namespace": "EdgeInsets"
        }
      ]
    },
    "namespace": "Geography and geometry"
  },
  {
    "name": "User interaction handlers",
    "page": "handlers",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Items related to the ways in which the map responds to user input."
            }
          ]
        }
      ]
    },
    "children": [
      "BoxZoomHandler",
      "ScrollZoomHandler",
      "DragPanHandler",
      "DragRotateHandler",
      "KeyboardHandler",
      "DoubleClickZoomHandler",
      "TouchZoomRotateHandler",
      "TouchPitchHandler"
    ],
    "kind": "note",
    "path": [
      {
        "name": "User interaction handlers",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "BoxZoomHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to zoom the map to fit within a bounding box.\nThe bounding box is defined by clicking and holding "
                  },
                  {
                    "type": "inlineCode",
                    "value": "shift"
                  },
                  {
                    "type": "text",
                    "value": " while dragging the cursor."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 12,
                "column": 0
              },
              "end": {
                "line": 163,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/box_zoom.ts#L12-L163",
              "path": "src/ui/handler/box_zoom.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "map",
              "lineNumber": 26,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 26,
              "type": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "clickTolerance",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 4
              },
              "end": {
                "line": 25,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000036!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts 00000026",
              "code": "{\n    _map: Map;\n    _el: HTMLElement;\n    _container: HTMLElement;\n    _enabled: boolean;\n    _active: boolean;\n    _startPos: Point;\n    _lastPos: Point;\n    _box: HTMLElement;\n    _clickTolerance: number;\n\n    /**\n     * @private\n     */\n    constructor(map: Map, options: {\n        clickTolerance: number;\n    }) {\n        this._map = map;\n        this._el = map.getCanvasContainer();\n        this._container = map.getContainer();\n        this._clickTolerance = options.clickTolerance || 1;\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"box zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"box zoom\" interaction is enabled.\n     */\n    isEnabled() {\n        return !!this._enabled;\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"box zoom\" interaction is active, i.e. currently being used.\n     *\n     * @returns {boolean} `true` if the \"box zoom\" interaction is active.\n     */\n    isActive() {\n        return !!this._active;\n    }\n\n    /**\n     * Enables the \"box zoom\" interaction.\n     *\n     * @example\n     *   map.boxZoom.enable();\n     */\n    enable() {\n        if (this.isEnabled()) return;\n        this._enabled = true;\n    }\n\n    /**\n     * Disables the \"box zoom\" interaction.\n     *\n     * @example\n     *   map.boxZoom.disable();\n     */\n    disable() {\n        if (!this.isEnabled()) return;\n        this._enabled = false;\n    }\n\n    mousedown(e: MouseEvent, point: Point) {\n        if (!this.isEnabled()) return;\n        if (!(e.shiftKey && e.button === 0)) return;\n\n        DOM.disableDrag();\n        this._startPos = this._lastPos = point;\n        this._active = true;\n    }\n\n    mousemoveWindow(e: MouseEvent, point: Point) {\n        if (!this._active) return;\n\n        const pos = point;\n\n        if (this._lastPos.equals(pos) || (!this._box && pos.dist(this._startPos) < this._clickTolerance)) {\n            return;\n        }\n\n        const p0 = this._startPos;\n        this._lastPos = pos;\n\n        if (!this._box) {\n            this._box = DOM.create('div', 'maplibregl-boxzoom mapboxgl-boxzoom', this._container);\n            this._container.classList.add('maplibregl-crosshair', 'mapboxgl-crosshair');\n            this._fireEvent('boxzoomstart', e);\n        }\n\n        const minX = Math.min(p0.x, pos.x),\n            maxX = Math.max(p0.x, pos.x),\n            minY = Math.min(p0.y, pos.y),\n            maxY = Math.max(p0.y, pos.y);\n\n        DOM.setTransform(this._box, `translate(${minX}px,${minY}px)`);\n\n        this._box.style.width = `${maxX - minX}px`;\n        this._box.style.height = `${maxY - minY}px`;\n    }\n\n    mouseupWindow(e: MouseEvent, point: Point) {\n        if (!this._active) return;\n\n        if (e.button !== 0) return;\n\n        const p0 = this._startPos,\n            p1 = point;\n\n        this.reset();\n\n        DOM.suppressClick();\n\n        if (p0.x === p1.x && p0.y === p1.y) {\n            this._fireEvent('boxzoomcancel', e);\n        } else {\n            this._map.fire(new Event('boxzoomend', {originalEvent: e}));\n            return {\n                cameraAnimation: map => map.fitScreenCoordinates(p0, p1, this._map.getBearing(), {linear: true})\n            };\n        }\n    }\n\n    keydown(e: KeyboardEvent) {\n        if (!this._active) return;\n\n        if (e.keyCode === 27) {\n            this.reset();\n            this._fireEvent('boxzoomcancel', e);\n        }\n    }\n\n    reset() {\n        this._active = false;\n\n        this._container.classList.remove('maplibregl-crosshair', 'mapboxgl-crosshair');\n\n        if (this._box) {\n            DOM.remove(this._box);\n            this._box = null;\n        }\n\n        DOM.enableDrag();\n\n        delete this._startPos;\n        delete this._lastPos;\n    }\n\n    _fireEvent(type: string, e: any) {\n        return this._map.fire(new Event(type, {originalEvent: e}));\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "BoxZoomHandler",
          "kind": "class",
          "path": [
            {
              "name": "BoxZoomHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"box zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.boxZoom.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 64,
                    "column": 4
                  },
                  "end": {
                    "line": 69,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 70,
                      "column": 4
                    },
                    "end": {
                      "line": 73,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/box_zoom.ts#L70-L73",
                    "path": "src/ui/handler/box_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.boxZoom.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "BoxZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "BoxZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "BoxZoomHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"box zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.boxZoom.enable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 4
                  },
                  "end": {
                    "line": 58,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 59,
                      "column": 4
                    },
                    "end": {
                      "line": 62,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/box_zoom.ts#L59-L62",
                    "path": "src/ui/handler/box_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.boxZoom.enable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "BoxZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "BoxZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "BoxZoomHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"box zoom\" interaction is active, i.e. currently being used."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"box zoom\" interaction is active.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 4
                  },
                  "end": {
                    "line": 48,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/box_zoom.ts#L49-L51",
                    "path": "src/ui/handler/box_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"box zoom\" interaction is active."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "BoxZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "BoxZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "BoxZoomHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"box zoom\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"box zoom\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 35,
                    "column": 4
                  },
                  "end": {
                    "line": 39,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 40,
                      "column": 4
                    },
                    "end": {
                      "line": 42,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/box_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/box_zoom.ts#L40-L42",
                    "path": "src/ui/handler/box_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"box zoom\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "BoxZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "BoxZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "BoxZoomHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "BoxZoomHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "ScrollZoomHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to zoom the map by scrolling."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 28,
                "column": 0
              },
              "end": {
                "line": 343,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L28-L343",
              "path": "src/ui/handler/scroll_zoom.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "map",
              "lineNumber": 64,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            },
            {
              "title": "param",
              "name": "handler",
              "lineNumber": 64,
              "type": {
                "type": "NameExpression",
                "name": "HandlerManager"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 4
              },
              "end": {
                "line": 63,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 64,
                  "column": 4
                },
                "end": {
                  "line": 75,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000035!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts 00000064",
              "code": "{\n    _map: Map;\n    _el: HTMLElement;\n    _enabled: boolean;\n    _active: boolean;\n    _zooming: boolean;\n    _aroundCenter: boolean;\n    _around: LngLat;\n    _aroundPoint: Point;\n    _type: 'wheel' | 'trackpad' | null;\n    _lastValue: number;\n    _timeout: ReturnType<typeof setTimeout>; // used for delayed-handling of a single wheel movement\n    _finishTimeout: ReturnType<typeof setTimeout>; // used to delay final '{move,zoom}end' events\n\n    _lastWheelEvent: any;\n    _lastWheelEventTime: number;\n\n    _startZoom: number;\n    _targetZoom: number;\n    _delta: number;\n    _easing: ((a: number) => number);\n    _prevEase: {\n        start: number;\n        duration: number;\n        easing: (_: number) => number;\n    };\n\n    _frameId: boolean;\n    _handler: HandlerManager;\n\n    _defaultZoomRate: number;\n    _wheelZoomRate: number;\n\n    /**\n     * @private\n     */\n    constructor(map: Map, handler: HandlerManager) {\n        this._map = map;\n        this._el = map.getCanvasContainer();\n        this._handler = handler;\n\n        this._delta = 0;\n\n        this._defaultZoomRate = defaultZoomRate;\n        this._wheelZoomRate = wheelZoomRate;\n\n        bindAll(['_onTimeout'], this);\n    }\n\n    /**\n     * Set the zoom rate of a trackpad\n     * @param {number} [zoomRate=1/100] The rate used to scale trackpad movement to a zoom value.\n     * @example\n     * // Speed up trackpad zoom\n     * map.scrollZoom.setZoomRate(1/25);\n     */\n    setZoomRate(zoomRate: number) {\n        this._defaultZoomRate = zoomRate;\n    }\n\n    /**\n     * Set the zoom rate of a mouse wheel\n     * @param {number} [wheelZoomRate=1/450] The rate used to scale mouse wheel movement to a zoom value.\n     * @example\n     * // Slow down zoom of mouse wheel\n     * map.scrollZoom.setWheelZoomRate(1/600);\n     */\n    setWheelZoomRate(wheelZoomRate: number) {\n        this._wheelZoomRate = wheelZoomRate;\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"scroll to zoom\" interaction is enabled.\n     */\n    isEnabled() {\n        return !!this._enabled;\n    }\n\n    /*\n    * Active state is turned on and off with every scroll wheel event and is set back to false before the map\n    * render is called, so _active is not a good candidate for determining if a scroll zoom animation is in\n    * progress.\n    */\n    isActive() {\n        return !!this._active || this._finishTimeout !== undefined;\n    }\n\n    isZooming() {\n        return !!this._zooming;\n    }\n\n    /**\n     * Enables the \"scroll to zoom\" interaction.\n     *\n     * @param {Object} [options] Options object.\n     * @param {string} [options.around] If \"center\" is passed, map will zoom around center of map\n     *\n     * @example\n     *   map.scrollZoom.enable();\n     * @example\n     *  map.scrollZoom.enable({ around: 'center' })\n     */\n    enable(options?: any) {\n        if (this.isEnabled()) return;\n        this._enabled = true;\n        this._aroundCenter = options && options.around === 'center';\n    }\n\n    /**\n     * Disables the \"scroll to zoom\" interaction.\n     *\n     * @example\n     *   map.scrollZoom.disable();\n     */\n    disable() {\n        if (!this.isEnabled()) return;\n        this._enabled = false;\n    }\n\n    wheel(e: WheelEvent) {\n        if (!this.isEnabled()) return;\n        let value = e.deltaMode === WheelEvent.DOM_DELTA_LINE ? e.deltaY * 40 : e.deltaY;\n        const now = browser.now(),\n            timeDelta = now - (this._lastWheelEventTime || 0);\n\n        this._lastWheelEventTime = now;\n\n        if (value !== 0 && (value % wheelZoomDelta) === 0) {\n            // This one is definitely a mouse wheel event.\n            this._type = 'wheel';\n\n        } else if (value !== 0 && Math.abs(value) < 4) {\n            // This one is definitely a trackpad event because it is so small.\n            this._type = 'trackpad';\n\n        } else if (timeDelta > 400) {\n            // This is likely a new scroll action.\n            this._type = null;\n            this._lastValue = value;\n\n            // Start a timeout in case this was a singular event, and dely it by up to 40ms.\n            this._timeout = setTimeout(this._onTimeout, 40, e);\n\n        } else if (!this._type) {\n            // This is a repeating event, but we don't know the type of event just yet.\n            // If the delta per time is small, we assume it's a fast trackpad; otherwise we switch into wheel mode.\n            this._type = (Math.abs(timeDelta * value) < 200) ? 'trackpad' : 'wheel';\n\n            // Make sure our delayed event isn't fired again, because we accumulate\n            // the previous event (which was less than 40ms ago) into this event.\n            if (this._timeout) {\n                clearTimeout(this._timeout);\n                this._timeout = null;\n                value += this._lastValue;\n            }\n        }\n\n        // Slow down zoom if shift key is held for more precise zooming\n        if (e.shiftKey && value) value = value / 4;\n\n        // Only fire the callback if we actually know what type of scrolling device the user uses.\n        if (this._type) {\n            this._lastWheelEvent = e;\n            this._delta -= value;\n            if (!this._active) {\n                this._start(e);\n            }\n        }\n\n        e.preventDefault();\n    }\n\n    _onTimeout(initialEvent: any) {\n        this._type = 'wheel';\n        this._delta -= this._lastValue;\n        if (!this._active) {\n            this._start(initialEvent);\n        }\n    }\n\n    _start(e: any) {\n        if (!this._delta) return;\n\n        if (this._frameId) {\n            this._frameId = null;\n        }\n\n        this._active = true;\n        if (!this.isZooming()) {\n            this._zooming = true;\n        }\n\n        if (this._finishTimeout) {\n            clearTimeout(this._finishTimeout);\n            delete this._finishTimeout;\n        }\n\n        const pos = DOM.mousePos(this._el, e);\n\n        this._around = LngLat.convert(this._aroundCenter ? this._map.getCenter() : this._map.unproject(pos));\n        this._aroundPoint = this._map.transform.locationPoint(this._around);\n        if (!this._frameId) {\n            this._frameId = true;\n            this._handler._triggerRenderFrame();\n        }\n    }\n\n    renderFrame() {\n        if (!this._frameId) return;\n        this._frameId = null;\n\n        if (!this.isActive()) return;\n        const tr = this._map.transform;\n\n        // if we've had scroll events since the last render frame, consume the\n        // accumulated delta, and update the target zoom level accordingly\n        if (this._delta !== 0) {\n            // For trackpad events and single mouse wheel ticks, use the default zoom rate\n            const zoomRate = (this._type === 'wheel' && Math.abs(this._delta) > wheelZoomDelta) ? this._wheelZoomRate : this._defaultZoomRate;\n            // Scale by sigmoid of scroll wheel delta.\n            let scale = maxScalePerFrame / (1 + Math.exp(-Math.abs(this._delta * zoomRate)));\n\n            if (this._delta < 0 && scale !== 0) {\n                scale = 1 / scale;\n            }\n\n            const fromScale = typeof this._targetZoom === 'number' ? tr.zoomScale(this._targetZoom) : tr.scale;\n            this._targetZoom = Math.min(tr.maxZoom, Math.max(tr.minZoom, tr.scaleZoom(fromScale * scale)));\n\n            // if this is a mouse wheel, refresh the starting zoom and easing\n            // function we're using to smooth out the zooming between wheel\n            // events\n            if (this._type === 'wheel') {\n                this._startZoom = tr.zoom;\n                this._easing = this._smoothOutEasing(200);\n            }\n\n            this._delta = 0;\n        }\n\n        const targetZoom = typeof this._targetZoom === 'number' ?\n            this._targetZoom : tr.zoom;\n        const startZoom = this._startZoom;\n        const easing = this._easing;\n\n        let finished = false;\n        let zoom;\n        if (this._type === 'wheel' && startZoom && easing) {\n            assert(easing && typeof startZoom === 'number');\n\n            const t = Math.min((browser.now() - this._lastWheelEventTime) / 200, 1);\n            const k = easing(t);\n            zoom = interpolate(startZoom, targetZoom, k);\n            if (t < 1) {\n                if (!this._frameId) {\n                    this._frameId = true;\n                }\n            } else {\n                finished = true;\n            }\n        } else {\n            zoom = targetZoom;\n            finished = true;\n        }\n\n        this._active = true;\n\n        if (finished) {\n            this._active = false;\n            this._finishTimeout = setTimeout(() => {\n                this._zooming = false;\n                this._handler._triggerRenderFrame();\n                delete this._targetZoom;\n                delete this._finishTimeout;\n            }, 200);\n        }\n\n        return {\n            noInertia: true,\n            needsRenderFrame: !finished,\n            zoomDelta: zoom - tr.zoom,\n            around: this._aroundPoint,\n            originalEvent: this._lastWheelEvent\n        };\n    }\n\n    _smoothOutEasing(duration: number) {\n        let easing = _ease;\n\n        if (this._prevEase) {\n            const ease = this._prevEase,\n                t = (browser.now() - ease.start) / ease.duration,\n                speed = ease.easing(t + 0.01) - ease.easing(t),\n\n                // Quick hack to make new bezier that is continuous with last\n                x = 0.27 / Math.sqrt(speed * speed + 0.0001) * 0.01,\n                y = Math.sqrt(0.27 * 0.27 - x * x);\n\n            easing = bezier(x, y, 0.25, 1);\n        }\n\n        this._prevEase = {\n            start: browser.now(),\n            duration,\n            easing\n        };\n\n        return easing;\n    }\n\n    reset() {\n        this._active = false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "ScrollZoomHandler",
          "kind": "class",
          "path": [
            {
              "name": "ScrollZoomHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"scroll to zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.scrollZoom.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 138,
                    "column": 4
                  },
                  "end": {
                    "line": 143,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 147,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L144-L147",
                    "path": "src/ui/handler/scroll_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.scrollZoom.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "ScrollZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScrollZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScrollZoomHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"scroll to zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 3,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "If \"center\" is passed, map will zoom around center of map",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "options.around"
                  },
                  {
                    "title": "example",
                    "description": "map.scrollZoom.enable();",
                    "lineNumber": 6
                  },
                  {
                    "title": "example",
                    "description": "map.scrollZoom.enable({ around: 'center' })",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 121,
                    "column": 4
                  },
                  "end": {
                    "line": 131,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 132,
                      "column": 4
                    },
                    "end": {
                      "line": 136,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L132-L136",
                    "path": "src/ui/handler/scroll_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.scrollZoom.enable();"
                  },
                  {
                    "description": "map.scrollZoom.enable({ around: 'center' })"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.around",
                        "lineNumber": 4,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If \"center\" is passed, map will zoom around center of map"
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "ScrollZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScrollZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScrollZoomHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"scroll to zoom\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 4
                  },
                  "end": {
                    "line": 103,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 104,
                      "column": 4
                    },
                    "end": {
                      "line": 106,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L104-L106",
                    "path": "src/ui/handler/scroll_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"scroll to zoom\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "ScrollZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScrollZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScrollZoomHandler#isEnabled"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the zoom rate of a mouse wheel"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The rate used to scale mouse wheel movement to a zoom value.",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "wheelZoomRate",
                    "default": "1/450"
                  },
                  {
                    "title": "example",
                    "description": "// Slow down zoom of mouse wheel\nmap.scrollZoom.setWheelZoomRate(1/600);",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 94,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 95,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L95-L97",
                    "path": "src/ui/handler/scroll_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Slow down zoom of mouse wheel\nmap.scrollZoom.setWheelZoomRate(1/600);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "wheelZoomRate",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The rate used to scale mouse wheel movement to a zoom value."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "default": "1/450"
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setWheelZoomRate",
                "kind": "function",
                "memberof": "ScrollZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScrollZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "setWheelZoomRate",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScrollZoomHandler#setWheelZoomRate"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Set the zoom rate of a trackpad"
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The rate used to scale trackpad movement to a zoom value.",
                    "lineNumber": 2,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "zoomRate",
                    "default": "1/100"
                  },
                  {
                    "title": "example",
                    "description": "// Speed up trackpad zoom\nmap.scrollZoom.setZoomRate(1/25);",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 77,
                    "column": 4
                  },
                  "end": {
                    "line": 83,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 84,
                      "column": 4
                    },
                    "end": {
                      "line": 86,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/scroll_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/scroll_zoom.ts#L84-L86",
                    "path": "src/ui/handler/scroll_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Speed up trackpad zoom\nmap.scrollZoom.setZoomRate(1/25);"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "zoomRate",
                    "lineNumber": 2,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The rate used to scale trackpad movement to a zoom value."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    },
                    "default": "1/100"
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setZoomRate",
                "kind": "function",
                "memberof": "ScrollZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ScrollZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "setZoomRate",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ScrollZoomHandler#setZoomRate"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "ScrollZoomHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "DragPanHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to pan the map by clicking and dragging\nthe cursor."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 15,
                "column": 0
              },
              "end": {
                "line": 86,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_pan.ts#L15-L86",
              "path": "src/ui/handler/shim/drag_pan.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "el",
              "lineNumber": 25,
              "type": {
                "type": "NameExpression",
                "name": "HTMLElement"
              }
            },
            {
              "title": "param",
              "name": "mousePan",
              "lineNumber": 25,
              "type": {
                "type": "NameExpression",
                "name": "MousePanHandler"
              }
            },
            {
              "title": "param",
              "name": "touchPan",
              "lineNumber": 25,
              "type": {
                "type": "NameExpression",
                "name": "TouchPanHandler"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 6
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000039!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts 00000025",
              "code": "{\n\n    _el: HTMLElement;\n    _mousePan: MousePanHandler;\n    _touchPan: TouchPanHandler;\n    _inertiaOptions: DragPanOptions;\n\n    /**\n     * @private\n    */\n    constructor(el: HTMLElement, mousePan: MousePanHandler, touchPan: TouchPanHandler) {\n        this._el = el;\n        this._mousePan = mousePan;\n        this._touchPan = touchPan;\n    }\n\n    /**\n     * Enables the \"drag to pan\" interaction.\n     *\n     * @param {Object} [options] Options object\n     * @param {number} [options.linearity=0] factor used to scale the drag velocity\n     * @param {Function} [options.easing=bezier(0, 0, 0.3, 1)] easing function applled to `map.panTo` when applying the drag.\n     * @param {number} [options.maxSpeed=1400] the maximum value of the drag velocity.\n     * @param {number} [options.deceleration=2500] the rate at which the speed reduces after the pan ends.\n     *\n     * @example\n     *   map.dragPan.enable();\n     * @example\n     *   map.dragPan.enable({\n     *      linearity: 0.3,\n     *      easing: bezier(0, 0, 0.3, 1),\n     *      maxSpeed: 1400,\n     *      deceleration: 2500,\n     *   });\n     */\n    enable(options?: DragPanOptions) {\n        this._inertiaOptions = options || {};\n        this._mousePan.enable();\n        this._touchPan.enable();\n        this._el.classList.add('maplibregl-touch-drag-pan', 'mapboxgl-touch-drag-pan');\n    }\n\n    /**\n     * Disables the \"drag to pan\" interaction.\n     *\n     * @example\n     * map.dragPan.disable();\n     */\n    disable() {\n        this._mousePan.disable();\n        this._touchPan.disable();\n        this._el.classList.remove('maplibregl-touch-drag-pan', 'mapboxgl-touch-drag-pan');\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"drag to pan\" interaction is enabled.\n     */\n    isEnabled() {\n        return this._mousePan.isEnabled() && this._touchPan.isEnabled();\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used.\n     *\n     * @returns {boolean} `true` if the \"drag to pan\" interaction is active.\n     */\n    isActive() {\n        return this._mousePan.isActive() || this._touchPan.isActive();\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "DragPanHandler",
          "kind": "class",
          "path": [
            {
              "name": "DragPanHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"drag to pan\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.dragPan.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 57,
                    "column": 4
                  },
                  "end": {
                    "line": 62,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_pan.ts#L63-L67",
                    "path": "src/ui/handler/shim/drag_pan.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.dragPan.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "DragPanHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragPanHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragPanHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"drag to pan\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Options object",
                    "lineNumber": 3,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "factor used to scale the drag velocity",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.linearity",
                    "default": "0"
                  },
                  {
                    "title": "param",
                    "description": "easing function applled to `map.panTo` when applying the drag.",
                    "lineNumber": 5,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Function"
                      }
                    },
                    "name": "options.easing",
                    "default": "bezier(0,0,0.3,1)"
                  },
                  {
                    "title": "param",
                    "description": "the maximum value of the drag velocity.",
                    "lineNumber": 6,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.maxSpeed",
                    "default": "1400"
                  },
                  {
                    "title": "param",
                    "description": "the rate at which the speed reduces after the pan ends.",
                    "lineNumber": 7,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    },
                    "name": "options.deceleration",
                    "default": "2500"
                  },
                  {
                    "title": "example",
                    "description": "map.dragPan.enable();",
                    "lineNumber": 9
                  },
                  {
                    "title": "example",
                    "description": "map.dragPan.enable({\n     linearity: 0.3,\n     easing: bezier(0, 0, 0.3, 1),\n     maxSpeed: 1400,\n     deceleration: 2500,\n  });",
                    "lineNumber": 11
                  }
                ],
                "loc": {
                  "start": {
                    "line": 31,
                    "column": 4
                  },
                  "end": {
                    "line": 49,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 50,
                      "column": 4
                    },
                    "end": {
                      "line": 55,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_pan.ts#L50-L55",
                    "path": "src/ui/handler/shim/drag_pan.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.dragPan.enable();"
                  },
                  {
                    "description": "map.dragPan.enable({\n     linearity: 0.3,\n     easing: bezier(0, 0, 0.3, 1),\n     maxSpeed: 1400,\n     deceleration: 2500,\n  });"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object"
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.linearity",
                        "lineNumber": 4,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "factor used to scale the drag velocity"
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "0"
                      },
                      {
                        "title": "param",
                        "name": "options.easing",
                        "lineNumber": 5,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "easing function applled to "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "map.panTo"
                                },
                                {
                                  "type": "text",
                                  "value": " when applying the drag."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "Function"
                        },
                        "default": "bezier(0,0,0.3,1)"
                      },
                      {
                        "title": "param",
                        "name": "options.maxSpeed",
                        "lineNumber": 6,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "the maximum value of the drag velocity."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "1400"
                      },
                      {
                        "title": "param",
                        "name": "options.deceleration",
                        "lineNumber": 7,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "the rate at which the speed reduces after the pan ends."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "NameExpression",
                          "name": "number"
                        },
                        "default": "2500"
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "DragPanHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragPanHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragPanHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to pan\" interaction is active.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 78,
                    "column": 4
                  },
                  "end": {
                    "line": 82,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 83,
                      "column": 4
                    },
                    "end": {
                      "line": 85,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_pan.ts#L83-L85",
                    "path": "src/ui/handler/shim/drag_pan.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to pan\" interaction is active."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "DragPanHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragPanHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragPanHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to pan\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 69,
                    "column": 4
                  },
                  "end": {
                    "line": 73,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 74,
                      "column": 4
                    },
                    "end": {
                      "line": 76,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_pan.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_pan.ts#L74-L76",
                    "path": "src/ui/handler/shim/drag_pan.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to pan\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "DragPanHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragPanHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragPanHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "DragPanHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "DragRotateHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to rotate the map by clicking and\ndragging the cursor while holding the right mouse button or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "ctrl"
                  },
                  {
                    "type": "text",
                    "value": " key."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 67,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_rotate.ts#L7-L67",
              "path": "src/ui/handler/shim/drag_rotate.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "options",
              "lineNumber": 1,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              }
            },
            {
              "title": "param",
              "name": "mouseRotate",
              "lineNumber": 22,
              "type": {
                "type": "NameExpression",
                "name": "MouseRotateHandler"
              }
            },
            {
              "title": "param",
              "name": "mousePitch",
              "lineNumber": 22,
              "type": {
                "type": "NameExpression",
                "name": "MousePitchHandler"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "param",
                "description": null,
                "lineNumber": 1,
                "type": {
                  "type": "OptionalType",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                },
                "name": "options"
              },
              {
                "title": "param",
                "description": "The threshold, measured in degrees, that determines when the map's\n  bearing will snap to north.",
                "lineNumber": 2,
                "type": {
                  "type": "OptionalType",
                  "expression": {
                    "type": "NameExpression",
                    "name": "number"
                  }
                },
                "name": "options.bearingSnap"
              },
              {
                "title": "param",
                "description": "Control the map pitch in addition to the bearing",
                "lineNumber": 4,
                "type": {
                  "type": "OptionalType",
                  "expression": {
                    "type": "NameExpression",
                    "name": "bool"
                  }
                },
                "name": "options.pitchWithRotate",
                "default": "true"
              },
              {
                "title": "private",
                "description": null,
                "lineNumber": 5
              }
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000038!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts 00000020",
              "code": "{\n\n    _mouseRotate: MouseRotateHandler;\n    _mousePitch: MousePitchHandler;\n    _pitchWithRotate: boolean;\n\n    /**\n     * @param {Object} [options]\n     * @param {number} [options.bearingSnap] The threshold, measured in degrees, that determines when the map's\n     *   bearing will snap to north.\n     * @param {bool} [options.pitchWithRotate=true] Control the map pitch in addition to the bearing\n     * @private\n     */\n    constructor(options: {\n        pitchWithRotate: boolean;\n    }, mouseRotate: MouseRotateHandler, mousePitch: MousePitchHandler) {\n        this._pitchWithRotate = options.pitchWithRotate;\n        this._mouseRotate = mouseRotate;\n        this._mousePitch = mousePitch;\n    }\n\n    /**\n     * Enables the \"drag to rotate\" interaction.\n     *\n     * @example\n     * map.dragRotate.enable();\n     */\n    enable() {\n        this._mouseRotate.enable();\n        if (this._pitchWithRotate) this._mousePitch.enable();\n    }\n\n    /**\n     * Disables the \"drag to rotate\" interaction.\n     *\n     * @example\n     * map.dragRotate.disable();\n     */\n    disable() {\n        this._mouseRotate.disable();\n        this._mousePitch.disable();\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"drag to rotate\" interaction is enabled.\n     */\n    isEnabled() {\n        return this._mouseRotate.isEnabled() && (!this._pitchWithRotate || this._mousePitch.isEnabled());\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used.\n     *\n     * @returns {boolean} `true` if the \"drag to rotate\" interaction is active.\n     */\n    isActive() {\n        return this._mouseRotate.isActive() || this._mousePitch.isActive();\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [
              {
                "title": "param",
                "name": "options",
                "lineNumber": 1,
                "type": {
                  "type": "OptionalType",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                }
              },
              {
                "title": "param",
                "name": "options.bearingSnap",
                "lineNumber": 2,
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The threshold, measured in degrees, that determines when the map's\nbearing will snap to north."
                        }
                      ]
                    }
                  ]
                },
                "type": {
                  "type": "OptionalType",
                  "expression": {
                    "type": "NameExpression",
                    "name": "number"
                  }
                }
              },
              {
                "title": "param",
                "name": "options.pitchWithRotate",
                "lineNumber": 4,
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Control the map pitch in addition to the bearing"
                        }
                      ]
                    }
                  ]
                },
                "type": {
                  "type": "NameExpression",
                  "name": "bool"
                },
                "default": "true"
              }
            ],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "DragRotateHandler",
          "kind": "class",
          "path": [
            {
              "name": "DragRotateHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"drag to rotate\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.dragRotate.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 39,
                    "column": 4
                  },
                  "end": {
                    "line": 44,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_rotate.ts#L45-L48",
                    "path": "src/ui/handler/shim/drag_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.dragRotate.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "DragRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragRotateHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"drag to rotate\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.dragRotate.enable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 28,
                    "column": 4
                  },
                  "end": {
                    "line": 33,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 34,
                      "column": 4
                    },
                    "end": {
                      "line": 37,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_rotate.ts#L34-L37",
                    "path": "src/ui/handler/shim/drag_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.dragRotate.enable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "DragRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragRotateHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to rotate\" interaction is active.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 59,
                    "column": 4
                  },
                  "end": {
                    "line": 63,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 64,
                      "column": 4
                    },
                    "end": {
                      "line": 66,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_rotate.ts#L64-L66",
                    "path": "src/ui/handler/shim/drag_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to rotate\" interaction is active."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "DragRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragRotateHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to rotate\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 50,
                    "column": 4
                  },
                  "end": {
                    "line": 54,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 4
                    },
                    "end": {
                      "line": 57,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/drag_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/drag_rotate.ts#L55-L57",
                    "path": "src/ui/handler/shim/drag_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to rotate\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "DragRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DragRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DragRotateHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "DragRotateHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "KeyboardHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to zoom, rotate, and pan the map using\nthe following keyboard shortcuts:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "="
                          },
                          {
                            "type": "text",
                            "value": " / "
                          },
                          {
                            "type": "inlineCode",
                            "value": "+"
                          },
                          {
                            "type": "text",
                            "value": ": Increase the zoom level by 1."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift-="
                          },
                          {
                            "type": "text",
                            "value": " / "
                          },
                          {
                            "type": "inlineCode",
                            "value": "Shift-+"
                          },
                          {
                            "type": "text",
                            "value": ": Increase the zoom level by 2."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "-"
                          },
                          {
                            "type": "text",
                            "value": ": Decrease the zoom level by 1."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift--"
                          },
                          {
                            "type": "text",
                            "value": ": Decrease the zoom level by 2."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Arrow keys: Pan by 100 pixels."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift+⇢"
                          },
                          {
                            "type": "text",
                            "value": ": Increase the rotation by 15 degrees."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift+⇠"
                          },
                          {
                            "type": "text",
                            "value": ": Decrease the rotation by 15 degrees."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift+⇡"
                          },
                          {
                            "type": "text",
                            "value": ": Increase the pitch by 10 degrees."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "Shift+⇣"
                          },
                          {
                            "type": "text",
                            "value": ": Decrease the pitch by 10 degrees."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 23,
                "column": 0
              },
              "end": {
                "line": 196,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L23-L196",
              "path": "src/ui/handler/keyboard.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 33,
                "column": 6
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 40,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000040!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts 00000034",
              "code": "{\n    _enabled: boolean;\n    _active: boolean;\n    _panStep: number;\n    _bearingStep: number;\n    _pitchStep: number;\n    _rotationDisabled: boolean;\n\n    /**\n    * @private\n    */\n    constructor() {\n        const stepOptions = defaultOptions;\n        this._panStep = stepOptions.panStep;\n        this._bearingStep = stepOptions.bearingStep;\n        this._pitchStep = stepOptions.pitchStep;\n        this._rotationDisabled = false;\n    }\n\n    reset() {\n        this._active = false;\n    }\n\n    keydown(e: KeyboardEvent) {\n        if (e.altKey || e.ctrlKey || e.metaKey) return;\n\n        let zoomDir = 0;\n        let bearingDir = 0;\n        let pitchDir = 0;\n        let xDir = 0;\n        let yDir = 0;\n\n        switch (e.keyCode) {\n            case 61:\n            case 107:\n            case 171:\n            case 187:\n                zoomDir = 1;\n                break;\n\n            case 189:\n            case 109:\n            case 173:\n                zoomDir = -1;\n                break;\n\n            case 37:\n                if (e.shiftKey) {\n                    bearingDir = -1;\n                } else {\n                    e.preventDefault();\n                    xDir = -1;\n                }\n                break;\n\n            case 39:\n                if (e.shiftKey) {\n                    bearingDir = 1;\n                } else {\n                    e.preventDefault();\n                    xDir = 1;\n                }\n                break;\n\n            case 38:\n                if (e.shiftKey) {\n                    pitchDir = 1;\n                } else {\n                    e.preventDefault();\n                    yDir = -1;\n                }\n                break;\n\n            case 40:\n                if (e.shiftKey) {\n                    pitchDir = -1;\n                } else {\n                    e.preventDefault();\n                    yDir = 1;\n                }\n                break;\n\n            default:\n                return;\n        }\n\n        if (this._rotationDisabled) {\n            bearingDir = 0;\n            pitchDir = 0;\n        }\n\n        return {\n            cameraAnimation: (map: Map) => {\n                const zoom = map.getZoom();\n                map.easeTo({\n                    duration: 300,\n                    easeId: 'keyboardHandler',\n                    easing: easeOut,\n\n                    zoom: zoomDir ? Math.round(zoom) + zoomDir * (e.shiftKey ? 2 : 1) : zoom,\n                    bearing: map.getBearing() + bearingDir * this._bearingStep,\n                    pitch: map.getPitch() + pitchDir * this._pitchStep,\n                    offset: [-xDir * this._panStep, -yDir * this._panStep],\n                    center: map.getCenter()\n                }, {originalEvent: e});\n            }\n        };\n    }\n\n    /**\n     * Enables the \"keyboard rotate and zoom\" interaction.\n     *\n     * @example\n     *   map.keyboard.enable();\n     */\n    enable() {\n        this._enabled = true;\n    }\n\n    /**\n     * Disables the \"keyboard rotate and zoom\" interaction.\n     *\n     * @example\n     *   map.keyboard.disable();\n     */\n    disable() {\n        this._enabled = false;\n        this.reset();\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"keyboard rotate and zoom\"\n     * interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"keyboard rotate and zoom\"\n     * interaction is enabled.\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Returns true if the handler is enabled and has detected the start of a\n     * zoom/rotate gesture.\n     *\n     * @returns {boolean} `true` if the handler is enabled and has detected the\n     * start of a zoom/rotate gesture.\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Disables the \"keyboard pan/rotate\" interaction, leaving the\n     * \"keyboard zoom\" interaction enabled.\n     *\n     * @example\n     *   map.keyboard.disableRotation();\n     */\n    disableRotation() {\n        this._rotationDisabled = true;\n    }\n\n    /**\n     * Enables the \"keyboard pan/rotate\" interaction.\n     *\n     * @example\n     *   map.keyboard.enable();\n     *   map.keyboard.enableRotation();\n     */\n    enableRotation() {\n        this._rotationDisabled = false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "KeyboardHandler",
          "kind": "class",
          "path": [
            {
              "name": "KeyboardHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"keyboard rotate and zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.keyboard.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 4
                  },
                  "end": {
                    "line": 147,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 148,
                      "column": 4
                    },
                    "end": {
                      "line": 151,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L148-L151",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.keyboard.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"keyboard pan/rotate\" interaction, leaving the\n\"keyboard zoom\" interaction enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.keyboard.disableRotation();",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 175,
                    "column": 4
                  },
                  "end": {
                    "line": 181,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 182,
                      "column": 4
                    },
                    "end": {
                      "line": 184,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L182-L184",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.keyboard.disableRotation();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disableRotation",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disableRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#disableRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"keyboard rotate and zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.keyboard.enable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 132,
                    "column": 4
                  },
                  "end": {
                    "line": 137,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 138,
                      "column": 4
                    },
                    "end": {
                      "line": 140,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L138-L140",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.keyboard.enable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"keyboard pan/rotate\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.keyboard.enable();\n  map.keyboard.enableRotation();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 186,
                    "column": 4
                  },
                  "end": {
                    "line": 192,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 193,
                      "column": 4
                    },
                    "end": {
                      "line": 195,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L193-L195",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.keyboard.enable();\n  map.keyboard.enableRotation();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enableRotation",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enableRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#enableRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the handler is enabled and has detected the start of a\nzoom/rotate gesture."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the handler is enabled and has detected the\nstart of a zoom/rotate gesture.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 164,
                    "column": 4
                  },
                  "end": {
                    "line": 170,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 171,
                      "column": 4
                    },
                    "end": {
                      "line": 173,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L171-L173",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the handler is enabled and has detected the\nstart of a zoom/rotate gesture."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"keyboard rotate and zoom\"\ninteraction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"keyboard rotate and zoom\"\ninteraction is enabled.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 153,
                    "column": 4
                  },
                  "end": {
                    "line": 159,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 160,
                      "column": 4
                    },
                    "end": {
                      "line": 162,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/keyboard.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/keyboard.ts#L160-L162",
                    "path": "src/ui/handler/keyboard.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"keyboard rotate and zoom\"\ninteraction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "KeyboardHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "KeyboardHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "KeyboardHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "KeyboardHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "DoubleClickZoomHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to zoom the map at a point by\ndouble clicking or double tapping."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 8,
                "column": 0
              },
              "end": {
                "line": 60,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/dblclick_zoom.ts#L8-L60",
              "path": "src/ui/handler/shim/dblclick_zoom.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "clickZoom",
              "lineNumber": 16,
              "type": {
                "type": "NameExpression",
                "name": "ClickZoomHandler"
              }
            },
            {
              "title": "param",
              "name": "TapZoom",
              "lineNumber": 16,
              "type": {
                "type": "NameExpression",
                "name": "TapZoomHandler"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000041!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts 00000016",
              "code": "{\n\n    _clickZoom: ClickZoomHandler;\n    _tapZoom: TapZoomHandler;\n\n    /**\n     * @private\n    */\n    constructor(clickZoom: ClickZoomHandler, TapZoom: TapZoomHandler) {\n        this._clickZoom = clickZoom;\n        this._tapZoom = TapZoom;\n    }\n\n    /**\n     * Enables the \"double click to zoom\" interaction.\n     *\n     * @example\n     * map.doubleClickZoom.enable();\n     */\n    enable() {\n        this._clickZoom.enable();\n        this._tapZoom.enable();\n    }\n\n    /**\n     * Disables the \"double click to zoom\" interaction.\n     *\n     * @example\n     * map.doubleClickZoom.disable();\n     */\n    disable() {\n        this._clickZoom.disable();\n        this._tapZoom.disable();\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"double click to zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"double click to zoom\" interaction is enabled.\n     */\n    isEnabled() {\n        return this._clickZoom.isEnabled() && this._tapZoom.isEnabled();\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"double click to zoom\" interaction is active, i.e. currently being used.\n     *\n     * @returns {boolean} `true` if the \"double click to zoom\" interaction is active.\n     */\n    isActive() {\n        return this._clickZoom.isActive() || this._tapZoom.isActive();\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "DoubleClickZoomHandler",
          "kind": "class",
          "path": [
            {
              "name": "DoubleClickZoomHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"double click to zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.doubleClickZoom.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 32,
                    "column": 4
                  },
                  "end": {
                    "line": 37,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 38,
                      "column": 4
                    },
                    "end": {
                      "line": 41,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/dblclick_zoom.ts#L38-L41",
                    "path": "src/ui/handler/shim/dblclick_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.doubleClickZoom.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "DoubleClickZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DoubleClickZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DoubleClickZoomHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"double click to zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.doubleClickZoom.enable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 21,
                    "column": 4
                  },
                  "end": {
                    "line": 26,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 27,
                      "column": 4
                    },
                    "end": {
                      "line": 30,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/dblclick_zoom.ts#L27-L30",
                    "path": "src/ui/handler/shim/dblclick_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.doubleClickZoom.enable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "DoubleClickZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DoubleClickZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DoubleClickZoomHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"double click to zoom\" interaction is active, i.e. currently being used."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"double click to zoom\" interaction is active.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 4
                  },
                  "end": {
                    "line": 56,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 57,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/dblclick_zoom.ts#L57-L59",
                    "path": "src/ui/handler/shim/dblclick_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"double click to zoom\" interaction is active."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "DoubleClickZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DoubleClickZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DoubleClickZoomHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"double click to zoom\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"double click to zoom\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 43,
                    "column": 4
                  },
                  "end": {
                    "line": 47,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 4
                    },
                    "end": {
                      "line": 50,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/dblclick_zoom.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/dblclick_zoom.ts#L48-L50",
                    "path": "src/ui/handler/shim/dblclick_zoom.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"double click to zoom\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "DoubleClickZoomHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "DoubleClickZoomHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "DoubleClickZoomHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "DoubleClickZoomHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "TouchZoomRotateHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to zoom and rotate the map by\npinching on a touchscreen."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "They can zoom with one finger by double tapping and dragging. On the second tap,\nhold the finger down and drag up or down to zoom in or out."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 108,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L11-L108",
              "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "el",
              "lineNumber": 23,
              "type": {
                "type": "NameExpression",
                "name": "HTMLElement"
              }
            },
            {
              "title": "param",
              "name": "touchZoom",
              "lineNumber": 23,
              "type": {
                "type": "NameExpression",
                "name": "TouchZoomHandler"
              }
            },
            {
              "title": "param",
              "name": "touchRotate",
              "lineNumber": 23,
              "type": {
                "type": "NameExpression",
                "name": "TouchRotateHandler"
              }
            },
            {
              "title": "param",
              "name": "tapDragZoom",
              "lineNumber": 23,
              "type": {
                "type": "NameExpression",
                "name": "TapDragZoomHandler"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 6
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000002!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/map.ts:00000042!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts 00000023",
              "code": "{\n\n    _el: HTMLElement;\n    _touchZoom: TouchZoomHandler;\n    _touchRotate: TouchRotateHandler;\n    _tapDragZoom: TapDragZoomHandler;\n    _rotationDisabled: boolean;\n    _enabled: boolean;\n\n    /**\n     * @private\n    */\n    constructor(el: HTMLElement, touchZoom: TouchZoomHandler, touchRotate: TouchRotateHandler, tapDragZoom: TapDragZoomHandler) {\n        this._el = el;\n        this._touchZoom = touchZoom;\n        this._touchRotate = touchRotate;\n        this._tapDragZoom = tapDragZoom;\n        this._rotationDisabled = false;\n        this._enabled = true;\n    }\n\n    /**\n     * Enables the \"pinch to rotate and zoom\" interaction.\n     *\n     * @param {Object} [options] Options object.\n     * @param {string} [options.around] If \"center\" is passed, map will zoom around the center\n     *\n     * @example\n     *   map.touchZoomRotate.enable();\n     * @example\n     *   map.touchZoomRotate.enable({ around: 'center' });\n     */\n    enable(options?: {\n        around?: 'center';\n    } | null) {\n        this._touchZoom.enable(options);\n        if (!this._rotationDisabled) this._touchRotate.enable(options);\n        this._tapDragZoom.enable();\n        this._el.classList.add('maplibregl-touch-zoom-rotate', 'mapboxgl-touch-zoom-rotate');\n    }\n\n    /**\n     * Disables the \"pinch to rotate and zoom\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.disable();\n     */\n    disable() {\n        this._touchZoom.disable();\n        this._touchRotate.disable();\n        this._tapDragZoom.disable();\n        this._el.classList.remove('maplibregl-touch-zoom-rotate', 'mapboxgl-touch-zoom-rotate');\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"pinch to rotate and zoom\" interaction is enabled.\n     */\n    isEnabled() {\n        return this._touchZoom.isEnabled() &&\n            (this._rotationDisabled || this._touchRotate.isEnabled()) &&\n            this._tapDragZoom.isEnabled();\n    }\n\n    /**\n     * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.\n     *\n     * @returns {boolean} //eslint-disable-line\n     */\n    isActive() {\n        return this._touchZoom.isActive() || this._touchRotate.isActive() || this._tapDragZoom.isActive();\n    }\n\n    /**\n     * Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\"\n     * interaction enabled.\n     *\n     * @example\n     *   map.touchZoomRotate.disableRotation();\n     */\n    disableRotation() {\n        this._rotationDisabled = true;\n        this._touchRotate.disable();\n    }\n\n    /**\n     * Enables the \"pinch to rotate\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.enable();\n     *   map.touchZoomRotate.enableRotation();\n     */\n    enableRotation() {\n        this._rotationDisabled = false;\n        if (this._touchZoom.isEnabled()) this._touchRotate.enable();\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "TouchZoomRotateHandler",
          "kind": "class",
          "path": [
            {
              "name": "TouchZoomRotateHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"pinch to rotate and zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.touchZoomRotate.disable();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 4
                  },
                  "end": {
                    "line": 57,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 58,
                      "column": 4
                    },
                    "end": {
                      "line": 63,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L58-L63",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchZoomRotate.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disable",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\"\ninteraction enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.touchZoomRotate.disableRotation();",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 85,
                    "column": 4
                  },
                  "end": {
                    "line": 91,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 92,
                      "column": 4
                    },
                    "end": {
                      "line": 95,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L92-L95",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchZoomRotate.disableRotation();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "disableRotation",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disableRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#disableRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"pinch to rotate and zoom\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 3,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "If \"center\" is passed, map will zoom around the center",
                    "lineNumber": 4,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "options.around"
                  },
                  {
                    "title": "example",
                    "description": "map.touchZoomRotate.enable();",
                    "lineNumber": 6
                  },
                  {
                    "title": "example",
                    "description": "map.touchZoomRotate.enable({ around: 'center' });",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 32,
                    "column": 4
                  },
                  "end": {
                    "line": 42,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 43,
                      "column": 4
                    },
                    "end": {
                      "line": 50,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L43-L50",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchZoomRotate.enable();"
                  },
                  {
                    "description": "map.touchZoomRotate.enable({ around: 'center' });"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      }
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.around",
                        "lineNumber": 4,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "If \"center\" is passed, map will zoom around the center"
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enable",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"pinch to rotate\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "example",
                    "description": "map.touchZoomRotate.enable();\n  map.touchZoomRotate.enableRotation();",
                    "lineNumber": 3
                  }
                ],
                "loc": {
                  "start": {
                    "line": 97,
                    "column": 4
                  },
                  "end": {
                    "line": 103,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 104,
                      "column": 4
                    },
                    "end": {
                      "line": 107,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L104-L107",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchZoomRotate.enable();\n  map.touchZoomRotate.enableRotation();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "enableRotation",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enableRotation",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#enableRotation"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "//eslint-disable-line",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 76,
                    "column": 4
                  },
                  "end": {
                    "line": 80,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 81,
                      "column": 4
                    },
                    "end": {
                      "line": 83,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L81-L83",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "//eslint-disable-line"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isActive",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "`true` if the \"pinch to rotate and zoom\" interaction is enabled.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 65,
                    "column": 4
                  },
                  "end": {
                    "line": 69,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 70,
                      "column": 4
                    },
                    "end": {
                      "line": 74,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/shim/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/shim/touch_zoom_rotate.ts#L70-L74",
                    "path": "src/ui/handler/shim/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"pinch to rotate and zoom\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "isEnabled",
                "kind": "function",
                "memberof": "TouchZoomRotateHandler",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchZoomRotateHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchZoomRotateHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "TouchZoomRotateHandler"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The "
                  },
                  {
                    "type": "inlineCode",
                    "value": "TouchPitchHandler"
                  },
                  {
                    "type": "text",
                    "value": " allows the user to pitch the map by dragging up and down with two fingers."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 198,
              "column": 0
            },
            "end": {
              "line": 200,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 201,
                "column": 0
              },
              "end": {
                "line": 305,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/touch_zoom_rotate.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/touch_zoom_rotate.ts#L201-L305",
              "path": "src/ui/handler/touch_zoom_rotate.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "TwoTouchHandler"
            }
          ],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "TouchPitchHandler",
          "kind": "class",
          "path": [
            {
              "name": "TouchPitchHandler",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables the \"drag to pitch\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "TouchPitchHandler",
                    "lineNumber": 3
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "disable"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "map.touchPitch.disable();",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 296,
                    "column": 4
                  },
                  "end": {
                    "line": 304,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/touch_zoom_rotate.ts#L239-L266",
                    "path": "src/ui/handler/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchPitch.disable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "TouchPitchHandler",
                "name": "disable",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchPitchHandler",
                    "kind": "class"
                  },
                  {
                    "name": "disable",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchPitchHandler#disable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables the \"drag to pitch\" interaction."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "TouchPitchHandler",
                    "lineNumber": 3
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "enable"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "example",
                    "description": "map.touchPitch.enable();",
                    "lineNumber": 6
                  }
                ],
                "loc": {
                  "start": {
                    "line": 286,
                    "column": 4
                  },
                  "end": {
                    "line": 294,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/touch_zoom_rotate.ts#L239-L266",
                    "path": "src/ui/handler/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "map.touchPitch.enable();"
                  }
                ],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "TouchPitchHandler",
                "name": "enable",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchPitchHandler",
                    "kind": "class"
                  },
                  {
                    "name": "enable",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchPitchHandler#enable"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "TouchPitchHandler",
                    "lineNumber": 3
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "isActive"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to pitch\" interaction is active.",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 277,
                    "column": 4
                  },
                  "end": {
                    "line": 284,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/touch_zoom_rotate.ts#L239-L266",
                    "path": "src/ui/handler/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to pitch\" interaction is active."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "TouchPitchHandler",
                "name": "isActive",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchPitchHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isActive",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchPitchHandler#isActive"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "memberof",
                    "description": "TouchPitchHandler",
                    "lineNumber": 3
                  },
                  {
                    "title": "name",
                    "description": null,
                    "lineNumber": 4,
                    "name": "isEnabled"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "returns",
                    "description": "`true` if the \"drag to pitch\" interaction is enabled.",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 268,
                    "column": 4
                  },
                  "end": {
                    "line": 275,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 4
                    },
                    "end": {
                      "line": 266,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/handler/touch_zoom_rotate.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/handler/touch_zoom_rotate.ts#L239-L266",
                    "path": "src/ui/handler/touch_zoom_rotate.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "true"
                            },
                            {
                              "type": "text",
                              "value": " if the \"drag to pitch\" interaction is enabled."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "memberof": "TouchPitchHandler",
                "name": "isEnabled",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "TouchPitchHandler",
                    "kind": "class"
                  },
                  {
                    "name": "isEnabled",
                    "scope": "instance"
                  }
                ],
                "namespace": "TouchPitchHandler#isEnabled"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "TouchPitchHandler"
        }
      ]
    },
    "namespace": "User interaction handlers"
  },
  {
    "name": "Sources",
    "page": "sources",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The source types MapLibre GL JS can handle in addition to the ones described in the "
            },
            {
              "type": "link",
              "title": null,
              "url": "/maplibre-gl-js-docs/style-spec/",
              "children": [
                {
                  "type": "text",
                  "value": "MapLibre Style Specification"
                }
              ]
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        }
      ]
    },
    "children": [
      "GeoJSONSource",
      "VideoSource",
      "ImageSource",
      "CanvasSource",
      "CanvasSourceOptions"
    ],
    "kind": "note",
    "path": [
      {
        "name": "Sources",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A source containing GeoJSON.\n(See the "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources-geojson",
                    "children": [
                      {
                        "type": "text",
                        "value": "Style Specification"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " for detailed documentation of options.)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "example",
              "description": "map.addSource('some id', {\n    type: 'geojson',\n    data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n});",
              "lineNumber": 4
            },
            {
              "title": "example",
              "description": "map.addSource('some id', {\n   type: 'geojson',\n   data: {\n       \"type\": \"FeatureCollection\",\n       \"features\": [{\n           \"type\": \"Feature\",\n           \"properties\": {},\n           \"geometry\": {\n               \"type\": \"Point\",\n               \"coordinates\": [\n                   -76.53063297271729,\n                   39.18174077994108\n               ]\n           }\n       }]\n   }\n});",
              "lineNumber": 10
            },
            {
              "title": "example",
              "description": "map.getSource('some id').setData({\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": { \"name\": \"Null Island\" },\n      \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [ 0, 0 ]\n      }\n  }]\n});",
              "lineNumber": 29
            },
            {
              "title": "see",
              "description": "[Draw GeoJSON points](https://maplibre.org/maplibre-gl-js-docs/example/geojson-markers/)",
              "lineNumber": 41
            },
            {
              "title": "see",
              "description": "[Add a GeoJSON line](https://maplibre.org/maplibre-gl-js-docs/example/geojson-line/)",
              "lineNumber": 42
            },
            {
              "title": "see",
              "description": "[Create a heatmap from points](https://maplibre.org/maplibre-gl-js-docs/example/heatmap/)",
              "lineNumber": 43
            },
            {
              "title": "see",
              "description": "[Create and style clusters](https://maplibre.org/maplibre-gl-js-docs/example/cluster/)",
              "lineNumber": 44
            }
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 68,
                "column": 0
              },
              "end": {
                "line": 353,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/geojson_source.ts#L68-L353",
              "path": "src/source/geojson_source.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "map.addSource('some id', {\n    type: 'geojson',\n    data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n});"
            },
            {
              "description": "map.addSource('some id', {\n   type: 'geojson',\n   data: {\n       \"type\": \"FeatureCollection\",\n       \"features\": [{\n           \"type\": \"Feature\",\n           \"properties\": {},\n           \"geometry\": {\n               \"type\": \"Point\",\n               \"coordinates\": [\n                   -76.53063297271729,\n                   39.18174077994108\n               ]\n           }\n       }]\n   }\n});"
            },
            {
              "description": "map.getSource('some id').setData({\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": { \"name\": \"Null Island\" },\n      \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [ 0, 0 ]\n      }\n  }]\n});"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "name": "Source"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "id",
              "lineNumber": 91,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 91,
              "type": {
                "type": "NameExpression",
                "name": "GeoJSONSourceOptions"
              }
            },
            {
              "title": "param",
              "name": "dispatcher",
              "lineNumber": 91,
              "type": {
                "type": "NameExpression",
                "name": "Dispatcher"
              }
            },
            {
              "title": "param",
              "name": "eventedParent",
              "lineNumber": 91,
              "type": {
                "type": "NameExpression",
                "name": "Evented"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/geojson-markers/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Draw GeoJSON points"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/geojson-line/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add a GeoJSON line"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/heatmap/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Create a heatmap from points"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            },
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/cluster/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Create and style clusters"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 88,
                "column": 4
              },
              "end": {
                "line": 90,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 149,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000026!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts 00000091",
              "code": "{\n    type: 'geojson';\n    id: string;\n    minzoom: number;\n    maxzoom: number;\n    tileSize: number;\n    attribution: string;\n    promoteId: PromoteIdSpecification;\n\n    isTileClipped: boolean;\n    reparseOverscaled: boolean;\n    _data: GeoJSON.GeoJSON | string;\n    _options: any;\n    workerOptions: any;\n    map: Map;\n    actor: Actor;\n    _pendingLoads: number;\n    _collectResourceTiming: boolean;\n    _removed: boolean;\n\n    /**\n     * @private\n     */\n    constructor(id: string, options: GeoJSONSourceOptions, dispatcher: Dispatcher, eventedParent: Evented) {\n        super();\n\n        this.id = id;\n\n        // `type` is a property rather than a constant to make it easy for 3rd\n        // parties to use GeoJSONSource to build their own source types.\n        this.type = 'geojson';\n\n        this.minzoom = 0;\n        this.maxzoom = 18;\n        this.tileSize = 512;\n        this.isTileClipped = true;\n        this.reparseOverscaled = true;\n        this._removed = false;\n        this._pendingLoads = 0;\n\n        this.actor = dispatcher.getActor();\n        this.setEventedParent(eventedParent);\n\n        this._data = (options.data as any);\n        this._options = extend({}, options);\n\n        this._collectResourceTiming = options.collectResourceTiming;\n\n        if (options.maxzoom !== undefined) this.maxzoom = options.maxzoom;\n        if (options.type) this.type = options.type;\n        if (options.attribution) this.attribution = options.attribution;\n        this.promoteId = options.promoteId;\n\n        const scale = EXTENT / this.tileSize;\n\n        // sent to the worker, along with `url: ...` or `data: literal geojson`,\n        // so that it can load/parse/index the geojson data\n        // extending with `options.workerOptions` helps to make it easy for\n        // third-party sources to hack/reuse GeoJSONSource.\n        this.workerOptions = extend({\n            source: this.id,\n            cluster: options.cluster || false,\n            geojsonVtOptions: {\n                buffer: (options.buffer !== undefined ? options.buffer : 128) * scale,\n                tolerance: (options.tolerance !== undefined ? options.tolerance : 0.375) * scale,\n                extent: EXTENT,\n                maxZoom: this.maxzoom,\n                lineMetrics: options.lineMetrics || false,\n                generateId: options.generateId || false\n            },\n            superclusterOptions: {\n                maxZoom: options.clusterMaxZoom !== undefined ? options.clusterMaxZoom : this.maxzoom - 1,\n                minPoints: Math.max(2, options.clusterMinPoints || 2),\n                extent: EXTENT,\n                radius: (options.clusterRadius || 50) * scale,\n                log: false,\n                generateId: options.generateId || false\n            },\n            clusterProperties: options.clusterProperties,\n            filter: options.filter\n        }, options.workerOptions);\n    }\n\n    load() {\n        // although GeoJSON sources contain no metadata, we fire this event to let the SourceCache\n        // know its ok to start requesting tiles.\n        this._updateWorkerData('metadata');\n    }\n\n    onAdd(map: Map) {\n        this.map = map;\n        this.load();\n    }\n\n    /**\n     * Sets the GeoJSON data and re-renders the map.\n     *\n     * @param {Object|string} data A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files.\n     * @returns {GeoJSONSource} this\n     */\n    setData(data: GeoJSON.GeoJSON | string) {\n        this._data = data;\n        this._updateWorkerData('content');\n\n        return this;\n    }\n\n    /**\n     * For clustered sources, fetches the zoom at which the given cluster expands.\n     *\n     * @param clusterId The value of the cluster's `cluster_id` property.\n     * @param callback A callback to be called when the zoom value is retrieved (`(error, zoom) => { ... }`).\n     * @returns {GeoJSONSource} this\n     */\n    getClusterExpansionZoom(clusterId: number, callback: Callback<number>) {\n        this.actor.send('geojson.getClusterExpansionZoom', {clusterId, source: this.id}, callback);\n        return this;\n    }\n\n    /**\n     * For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).\n     *\n     * @param clusterId The value of the cluster's `cluster_id` property.\n     * @param callback A callback to be called when the features are retrieved (`(error, features) => { ... }`).\n     * @returns {GeoJSONSource} this\n     */\n    getClusterChildren(clusterId: number, callback: Callback<Array<GeoJSON.Feature>>) {\n        this.actor.send('geojson.getClusterChildren', {clusterId, source: this.id}, callback);\n        return this;\n    }\n\n    /**\n     * For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).\n     *\n     * @param clusterId The value of the cluster's `cluster_id` property.\n     * @param limit The maximum number of features to return.\n     * @param offset The number of features to skip (e.g. for pagination).\n     * @param callback A callback to be called when the features are retrieved (`(error, features) => { ... }`).\n     * @returns {GeoJSONSource} this\n     * @example\n     * // Retrieve cluster leaves on click\n     * map.on('click', 'clusters', function(e) {\n     *   var features = map.queryRenderedFeatures(e.point, {\n     *     layers: ['clusters']\n     *   });\n     *\n     *   var clusterId = features[0].properties.cluster_id;\n     *   var pointCount = features[0].properties.point_count;\n     *   var clusterSource = map.getSource('clusters');\n     *\n     *   clusterSource.getClusterLeaves(clusterId, pointCount, 0, function(error, features) {\n     *     // Print cluster leaves in the console\n     *     console.log('Cluster leaves:', error, features);\n     *   })\n     * });\n     */\n    getClusterLeaves(clusterId: number, limit: number, offset: number, callback: Callback<Array<GeoJSON.Feature>>) {\n        this.actor.send('geojson.getClusterLeaves', {\n            source: this.id,\n            clusterId,\n            limit,\n            offset\n        }, callback);\n        return this;\n    }\n\n    /*\n     * Responsible for invoking WorkerSource's geojson.loadData target, which\n     * handles loading the geojson data and preparing to serve it up as tiles,\n     * using geojson-vt or supercluster as appropriate.\n     */\n    _updateWorkerData(sourceDataType: MapSourceDataType) {\n        const options = extend({}, this.workerOptions);\n        const data = this._data;\n        if (typeof data === 'string') {\n            options.request = this.map._requestManager.transformRequest(browser.resolveURL(data), ResourceType.Source);\n            options.request.collectResourceTiming = this._collectResourceTiming;\n        } else {\n            options.data = JSON.stringify(data);\n        }\n\n        this._pendingLoads++;\n        this.fire(new Event('dataloading', {dataType: 'source'}));\n\n        // target {this.type}.loadData rather than literally geojson.loadData,\n        // so that other geojson-like source types can easily reuse this\n        // implementation\n        this.actor.send(`${this.type}.loadData`, options, (err, result) => {\n            this._pendingLoads--;\n\n            if (this._removed || (result && result.abandoned)) {\n                return;\n            }\n\n            let resourceTiming = null;\n            if (result && result.resourceTiming && result.resourceTiming[this.id])\n                resourceTiming = result.resourceTiming[this.id].slice(0);\n            // Any `loadData` calls that piled up while we were processing\n            // this one will get coalesced into a single call when this\n            // 'coalesce' message is processed.\n            // We would self-send from the worker if we had access to its\n            // message queue. Waiting instead for the 'coalesce' to round-trip\n            // through the foreground just means we're throttling the worker\n            // to run at a little less than full-throttle.\n            this.actor.send(`${this.type}.coalesce`, {source: options.source}, null);\n\n            if (err) {\n                this.fire(new ErrorEvent(err));\n                return;\n            }\n\n            const data: any = {dataType: 'source', sourceDataType};\n            if (this._collectResourceTiming && resourceTiming && resourceTiming.length > 0)\n                extend(data, {resourceTiming});\n\n            this.fire(new Event('data', data));\n        });\n    }\n\n    loaded(): boolean {\n        return this._pendingLoads === 0;\n    }\n\n    loadTile(tile: Tile, callback: Callback<void>) {\n        const message = !tile.actor ? 'loadTile' : 'reloadTile';\n        tile.actor = this.actor;\n        const params = {\n            type: this.type,\n            uid: tile.uid,\n            tileID: tile.tileID,\n            zoom: tile.tileID.overscaledZ,\n            maxZoom: this.maxzoom,\n            tileSize: this.tileSize,\n            source: this.id,\n            pixelRatio: this.map.getPixelRatio(),\n            showCollisionBoxes: this.map.showCollisionBoxes,\n            promoteId: this.promoteId\n        };\n\n        tile.request = this.actor.send(message, params, (err, data) => {\n            delete tile.request;\n            tile.unloadVectorData();\n\n            if (tile.aborted) {\n                return callback(null);\n            }\n\n            if (err) {\n                return callback(err);\n            }\n\n            tile.loadVectorData(data, this.map.painter, message === 'reloadTile');\n\n            return callback(null);\n        });\n    }\n\n    abortTile(tile: Tile) {\n        if (tile.request) {\n            tile.request.cancel();\n            delete tile.request;\n        }\n        tile.aborted = true;\n    }\n\n    unloadTile(tile: Tile) {\n        tile.unloadVectorData();\n        this.actor.send('removeTile', {uid: tile.uid, type: this.type, source: this.id});\n    }\n\n    onRemove() {\n        this._removed = true;\n        this.actor.send('removeSource', {type: this.type, source: this.id});\n    }\n\n    serialize() {\n        return extend({}, this._options, {\n            type: this.type,\n            data: this._data\n        });\n    }\n\n    hasTransition() {\n        return false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "GeoJSONSource",
          "kind": "class",
          "path": [
            {
              "name": "GeoJSONSource",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The value of the cluster's `cluster_id` property.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "clusterId"
                  },
                  {
                    "title": "param",
                    "description": "A callback to be called when the features are retrieved (`(error, features) => { ... }`).",
                    "lineNumber": 4,
                    "type": null,
                    "name": "callback"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 187,
                    "column": 4
                  },
                  "end": {
                    "line": 193,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 197,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/geojson_source.ts#L194-L197",
                    "path": "src/source/geojson_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "clusterId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the cluster's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "cluster_id"
                            },
                            {
                              "type": "text",
                              "value": " property."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "callback",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A callback to be called when the features are retrieved ("
                            },
                            {
                              "type": "inlineCode",
                              "value": "(error, features) => { ... }"
                            },
                            {
                              "type": "text",
                              "value": ")."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Callback"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "GeoJSON.Feature"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getClusterChildren",
                "kind": "function",
                "memberof": "GeoJSONSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeoJSONSource",
                    "kind": "class"
                  },
                  {
                    "name": "getClusterChildren",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeoJSONSource#getClusterChildren"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "For clustered sources, fetches the zoom at which the given cluster expands."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The value of the cluster's `cluster_id` property.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "clusterId"
                  },
                  {
                    "title": "param",
                    "description": "A callback to be called when the zoom value is retrieved (`(error, zoom) => { ... }`).",
                    "lineNumber": 4,
                    "type": null,
                    "name": "callback"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 175,
                    "column": 4
                  },
                  "end": {
                    "line": 181,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 182,
                      "column": 4
                    },
                    "end": {
                      "line": 185,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/geojson_source.ts#L182-L185",
                    "path": "src/source/geojson_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "clusterId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the cluster's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "cluster_id"
                            },
                            {
                              "type": "text",
                              "value": " property."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "callback",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A callback to be called when the zoom value is retrieved ("
                            },
                            {
                              "type": "inlineCode",
                              "value": "(error, zoom) => { ... }"
                            },
                            {
                              "type": "text",
                              "value": ")."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Callback"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getClusterExpansionZoom",
                "kind": "function",
                "memberof": "GeoJSONSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeoJSONSource",
                    "kind": "class"
                  },
                  {
                    "name": "getClusterExpansionZoom",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeoJSONSource#getClusterExpansionZoom"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features)."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The value of the cluster's `cluster_id` property.",
                    "lineNumber": 3,
                    "type": null,
                    "name": "clusterId"
                  },
                  {
                    "title": "param",
                    "description": "The maximum number of features to return.",
                    "lineNumber": 4,
                    "type": null,
                    "name": "limit"
                  },
                  {
                    "title": "param",
                    "description": "The number of features to skip (e.g. for pagination).",
                    "lineNumber": 5,
                    "type": null,
                    "name": "offset"
                  },
                  {
                    "title": "param",
                    "description": "A callback to be called when the features are retrieved (`(error, features) => { ... }`).",
                    "lineNumber": 6,
                    "type": null,
                    "name": "callback"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  },
                  {
                    "title": "example",
                    "description": "// Retrieve cluster leaves on click\nmap.on('click', 'clusters', function(e) {\n  var features = map.queryRenderedFeatures(e.point, {\n    layers: ['clusters']\n  });\n\n  var clusterId = features[0].properties.cluster_id;\n  var pointCount = features[0].properties.point_count;\n  var clusterSource = map.getSource('clusters');\n\n  clusterSource.getClusterLeaves(clusterId, pointCount, 0, function(error, features) {\n    // Print cluster leaves in the console\n    console.log('Cluster leaves:', error, features);\n  })\n});",
                    "lineNumber": 8
                  }
                ],
                "loc": {
                  "start": {
                    "line": 199,
                    "column": 4
                  },
                  "end": {
                    "line": 223,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 224,
                      "column": 4
                    },
                    "end": {
                      "line": 232,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/geojson_source.ts#L224-L232",
                    "path": "src/source/geojson_source.ts"
                  }
                },
                "augments": [],
                "examples": [
                  {
                    "description": "// Retrieve cluster leaves on click\nmap.on('click', 'clusters', function(e) {\n  var features = map.queryRenderedFeatures(e.point, {\n    layers: ['clusters']\n  });\n\n  var clusterId = features[0].properties.cluster_id;\n  var pointCount = features[0].properties.point_count;\n  var clusterSource = map.getSource('clusters');\n\n  clusterSource.getClusterLeaves(clusterId, pointCount, 0, function(error, features) {\n    // Print cluster leaves in the console\n    console.log('Cluster leaves:', error, features);\n  })\n});"
                  }
                ],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "clusterId",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The value of the cluster's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "cluster_id"
                            },
                            {
                              "type": "text",
                              "value": " property."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "limit",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The maximum number of features to return."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "offset",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The number of features to skip (e.g. for pagination)."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "title": "param",
                    "name": "callback",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A callback to be called when the features are retrieved ("
                            },
                            {
                              "type": "inlineCode",
                              "value": "(error, features) => { ... }"
                            },
                            {
                              "type": "text",
                              "value": ")."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Callback"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "GeoJSON.Feature"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getClusterLeaves",
                "kind": "function",
                "memberof": "GeoJSONSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeoJSONSource",
                    "kind": "class"
                  },
                  {
                    "name": "getClusterLeaves",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeoJSONSource#getClusterLeaves"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the GeoJSON data and re-renders the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files.",
                    "lineNumber": 3,
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        },
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    },
                    "name": "data"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 162,
                    "column": 4
                  },
                  "end": {
                    "line": 167,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 168,
                      "column": 4
                    },
                    "end": {
                      "line": 173,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/geojson_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/geojson_source.ts#L168-L173",
                    "path": "src/source/geojson_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "data",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "Object"
                        },
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "GeoJSONSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setData",
                "kind": "function",
                "memberof": "GeoJSONSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "GeoJSONSource",
                    "kind": "class"
                  },
                  {
                    "name": "setData",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "GeoJSONSource#setData"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "GeoJSONSource"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A data source containing video.\n(See the "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources-video",
                    "children": [
                      {
                        "type": "text",
                        "value": "Style Specification"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " for detailed documentation of options.)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "example",
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'video',\n   url: [\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.mp4',\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.webm'\n   ],\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove",
              "lineNumber": 4
            },
            {
              "title": "see",
              "description": "[Add a video](https://maplibre.org/maplibre-gl-js-docs/example/video-on-a-map/)",
              "lineNumber": 30
            }
          ],
          "loc": {
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 199,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/video_source.ts#L47-L199",
              "path": "src/source/video_source.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "ImageSource"
            }
          ],
          "examples": [
            {
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'video',\n   url: [\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.mp4',\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.webm'\n   ],\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "id",
              "lineNumber": 56,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 56,
              "type": {
                "type": "NameExpression",
                "name": "VideoSourceSpecification"
              }
            },
            {
              "title": "param",
              "name": "dispatcher",
              "lineNumber": 56,
              "type": {
                "type": "NameExpression",
                "name": "Dispatcher"
              }
            },
            {
              "title": "param",
              "name": "eventedParent",
              "lineNumber": 56,
              "type": {
                "type": "NameExpression",
                "name": "Evented"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/example/video-on-a-map/",
                        "children": [
                          {
                            "type": "text",
                            "value": "Add a video"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "title": "sees"
            }
          ],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 53,
                "column": 4
              },
              "end": {
                "line": 55,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000031!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts 00000056",
              "code": "{\n    options: VideoSourceSpecification;\n    urls: Array<string>;\n    video: HTMLVideoElement;\n    roundZoom: boolean;\n\n    /**\n     * @private\n     */\n    constructor(id: string, options: VideoSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented) {\n        super(id, options, dispatcher, eventedParent);\n        this.roundZoom = true;\n        this.type = 'video';\n        this.options = options;\n    }\n\n    load() {\n        this._loaded = false;\n        const options = this.options;\n\n        this.urls = [];\n        for (const url of options.urls) {\n            this.urls.push(this.map._requestManager.transformRequest(url, ResourceType.Source).url);\n        }\n\n        getVideo(this.urls, (err, video) => {\n            this._loaded = true;\n            if (err) {\n                this.fire(new ErrorEvent(err));\n            } else if (video) {\n                this.video = video;\n                this.video.loop = true;\n\n                // Start repainting when video starts playing. hasTransition() will then return\n                // true to trigger additional frames as long as the videos continues playing.\n                this.video.addEventListener('playing', () => {\n                    this.map.triggerRepaint();\n                });\n\n                if (this.map) {\n                    this.video.play();\n                }\n\n                this._finishLoading();\n            }\n        });\n    }\n\n    /**\n     * Pauses the video.\n     */\n    pause() {\n        if (this.video) {\n            this.video.pause();\n        }\n    }\n\n    /**\n     * Plays the video.\n     */\n    play() {\n        if (this.video) {\n            this.video.play();\n        }\n    }\n\n    /**\n     * Sets playback to a timestamp, in seconds.\n     * @private\n     */\n    seek(seconds: number) {\n        if (this.video) {\n            const seekableRange = this.video.seekable;\n            if (seconds < seekableRange.start(0) || seconds > seekableRange.end(0)) {\n                this.fire(new ErrorEvent(new ValidationError(`sources.${this.id}`, null, `Playback for this video can be set only between the ${seekableRange.start(0)} and ${seekableRange.end(0)}-second mark.`)));\n            } else this.video.currentTime = seconds;\n        }\n    }\n\n    /**\n     * Returns the HTML `video` element.\n     *\n     * @returns {HTMLVideoElement} The HTML `video` element.\n     */\n    getVideo() {\n        return this.video;\n    }\n\n    onAdd(map: Map) {\n        if (this.map) return;\n        this.map = map;\n        this.load();\n        if (this.video) {\n            this.video.play();\n            this.setCoordinates(this.coordinates);\n        }\n    }\n\n    /**\n     * Sets the video's coordinates and re-renders the map.\n     *\n     * @method setCoordinates\n     * @instance\n     * @memberof VideoSource\n     * @returns {VideoSource} this\n     */\n    // setCoordinates inherited from ImageSource\n\n    prepare() {\n        if (Object.keys(this.tiles).length === 0 || this.video.readyState < 2) {\n            return; // not enough data for current position\n        }\n\n        const context = this.map.painter.context;\n        const gl = context.gl;\n\n        if (!this.boundsBuffer) {\n            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);\n        }\n\n        if (!this.boundsSegments) {\n            this.boundsSegments = SegmentVector.simpleSegment(0, 0, 4, 2);\n        }\n\n        if (!this.texture) {\n            this.texture = new Texture(context, this.video, gl.RGBA);\n            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);\n        } else if (!this.video.paused) {\n            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.video);\n        }\n\n        for (const w in this.tiles) {\n            const tile = this.tiles[w];\n            if (tile.state !== 'loaded') {\n                tile.state = 'loaded';\n                tile.texture = this.texture;\n            }\n        }\n    }\n\n    serialize() {\n        return {\n            type: 'video',\n            urls: this.urls,\n            coordinates: this.coordinates\n        };\n    }\n\n    hasTransition() {\n        return this.video && !this.video.paused;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "VideoSource",
          "kind": "class",
          "path": [
            {
              "name": "VideoSource",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the HTML "
                        },
                        {
                          "type": "inlineCode",
                          "value": "video"
                        },
                        {
                          "type": "text",
                          "value": " element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The HTML `video` element.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLVideoElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 126,
                    "column": 4
                  },
                  "end": {
                    "line": 130,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 131,
                      "column": 4
                    },
                    "end": {
                      "line": 133,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/video_source.ts#L131-L133",
                    "path": "src/source/video_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The HTML "
                            },
                            {
                              "type": "inlineCode",
                              "value": "video"
                            },
                            {
                              "type": "text",
                              "value": " element."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLVideoElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getVideo",
                "kind": "function",
                "memberof": "VideoSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "VideoSource",
                    "kind": "class"
                  },
                  {
                    "name": "getVideo",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "VideoSource#getVideo"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pauses the video."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 95,
                    "column": 4
                  },
                  "end": {
                    "line": 97,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 98,
                      "column": 4
                    },
                    "end": {
                      "line": 102,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/video_source.ts#L98-L102",
                    "path": "src/source/video_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "pause",
                "kind": "function",
                "memberof": "VideoSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "VideoSource",
                    "kind": "class"
                  },
                  {
                    "name": "pause",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "VideoSource#pause"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Plays the video."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 104,
                    "column": 4
                  },
                  "end": {
                    "line": 106,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 107,
                      "column": 4
                    },
                    "end": {
                      "line": 111,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/video_source.ts#L107-L111",
                    "path": "src/source/video_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "play",
                "kind": "function",
                "memberof": "VideoSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "VideoSource",
                    "kind": "class"
                  },
                  {
                    "name": "play",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "VideoSource#play"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the video's coordinates and re-renders the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "method",
                    "description": null,
                    "lineNumber": 3,
                    "name": "setCoordinates"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 4
                  },
                  {
                    "title": "memberof",
                    "description": "VideoSource",
                    "lineNumber": 5
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "VideoSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 145,
                    "column": 4
                  },
                  "end": {
                    "line": 152,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 155,
                      "column": 4
                    },
                    "end": {
                      "line": 186,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/video_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/video_source.ts#L155-L186",
                    "path": "src/source/video_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "VideoSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "name": "setCoordinates",
                "scope": "instance",
                "memberof": "VideoSource",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "VideoSource",
                    "kind": "class"
                  },
                  {
                    "name": "setCoordinates",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "VideoSource#setCoordinates"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "VideoSource"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A data source containing an image.\n(See the "
                  },
                  {
                    "type": "link",
                    "title": null,
                    "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources-image",
                    "children": [
                      {
                        "type": "text",
                        "value": "Style Specification"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " for detailed documentation of options.)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "example",
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'image',\n   url: 'https://www.maplibre.org/images/foo.png',\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update coordinates\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\n// update url and coordinates simultaneously\nmySource.updateImage({\n   url: 'https://www.maplibre.org/images/bar.png',\n   coordinates: [\n       [-76.54335737228394, 39.18579907229748],\n       [-76.52803659439087, 39.1838364847587],\n       [-76.5295386314392, 39.17683392507606],\n       [-76.54520273208618, 39.17876344106642]\n   ]\n})\n\nmap.removeSource('some id');  // remove",
              "lineNumber": 4
            }
          ],
          "loc": {
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 64,
                "column": 0
              },
              "end": {
                "line": 274,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/image_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/image_source.ts#L64-L274",
              "path": "src/source/image_source.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "Evented"
            }
          ],
          "examples": [
            {
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'image',\n   url: 'https://www.maplibre.org/images/foo.png',\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update coordinates\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\n// update url and coordinates simultaneously\nmySource.updateImage({\n   url: 'https://www.maplibre.org/images/bar.png',\n   coordinates: [\n       [-76.54335737228394, 39.18579907229748],\n       [-76.52803659439087, 39.1838364847587],\n       [-76.5295386314392, 39.17683392507606],\n       [-76.54520273208618, 39.17876344106642]\n   ]\n})\n\nmap.removeSource('some id');  // remove"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "name": "Source"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "id",
              "lineNumber": 88,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 88,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "ImageSourceSpecification"
                  },
                  {
                    "type": "NameExpression",
                    "name": "VideoSourceSpecification"
                  },
                  {
                    "type": "NameExpression",
                    "name": "CanvasSourceSpecification"
                  }
                ]
              }
            },
            {
              "title": "param",
              "name": "dispatcher",
              "lineNumber": 88,
              "type": {
                "type": "NameExpression",
                "name": "Dispatcher"
              }
            },
            {
              "title": "param",
              "name": "eventedParent",
              "lineNumber": 88,
              "type": {
                "type": "NameExpression",
                "name": "Evented"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 85,
                "column": 4
              },
              "end": {
                "line": 87,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 88,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/image_source.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000028!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/image_source.ts 00000088",
              "code": "{\n    type: string;\n    id: string;\n    minzoom: number;\n    maxzoom: number;\n    tileSize: number;\n    url: string;\n\n    coordinates: Coordinates;\n    tiles: {[_: string]: Tile};\n    options: any;\n    dispatcher: Dispatcher;\n    map: Map;\n    texture: Texture | null;\n    image: HTMLImageElement | ImageBitmap;\n    tileID: CanonicalTileID;\n    _boundsArray: RasterBoundsArray;\n    boundsBuffer: VertexBuffer;\n    boundsSegments: SegmentVector;\n    _loaded: boolean;\n\n    /**\n     * @private\n     */\n    constructor(id: string, options: ImageSourceSpecification | VideoSourceSpecification | CanvasSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented) {\n        super();\n        this.id = id;\n        this.dispatcher = dispatcher;\n        this.coordinates = options.coordinates;\n\n        this.type = 'image';\n        this.minzoom = 0;\n        this.maxzoom = 22;\n        this.tileSize = 512;\n        this.tiles = {};\n        this._loaded = false;\n\n        this.setEventedParent(eventedParent);\n\n        this.options = options;\n    }\n\n    load(newCoordinates?: Coordinates, successCallback?: () => void) {\n        this._loaded = false;\n        this.fire(new Event('dataloading', {dataType: 'source'}));\n\n        this.url = this.options.url;\n\n        getImage(this.map._requestManager.transformRequest(this.url, ResourceType.Image), (err, image) => {\n            this._loaded = true;\n            if (err) {\n                this.fire(new ErrorEvent(err));\n            } else if (image) {\n                this.image = image;\n                if (newCoordinates) {\n                    this.coordinates = newCoordinates;\n                }\n                if (successCallback) {\n                    successCallback();\n                }\n                this._finishLoading();\n            }\n        });\n    }\n\n    loaded(): boolean {\n        return this._loaded;\n    }\n\n    /**\n     * Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing,\n     * set the `raster-fade-duration` paint property on the raster layer to 0.\n     *\n     * @param {Object} options Options object.\n     * @param {string} [options.url] Required image URL.\n     * @param {Array<Array<number>>} [options.coordinates] Four geographical coordinates,\n     *   represented as arrays of longitude and latitude numbers, which define the corners of the image.\n     *   The coordinates start at the top left corner of the image and proceed in clockwise order.\n     *   They do not have to represent a rectangle.\n     * @returns {ImageSource} this\n     */\n    updateImage(options: {\n        url: string;\n        coordinates?: Coordinates;\n    }) {\n        if (!this.image || !options.url) {\n            return this;\n        }\n        this.options.url = options.url;\n        this.load(options.coordinates, () => { this.texture = null; });\n        return this;\n    }\n\n    _finishLoading() {\n        if (this.map) {\n            this.setCoordinates(this.coordinates);\n            this.fire(new Event('data', {dataType: 'source', sourceDataType: 'metadata'}));\n        }\n    }\n\n    onAdd(map: Map) {\n        this.map = map;\n        this.load();\n    }\n\n    /**\n     * Sets the image's coordinates and re-renders the map.\n     *\n     * @param {Array<Array<number>>} coordinates Four geographical coordinates,\n     *   represented as arrays of longitude and latitude numbers, which define the corners of the image.\n     *   The coordinates start at the top left corner of the image and proceed in clockwise order.\n     *   They do not have to represent a rectangle.\n     * @returns {ImageSource} this\n     */\n    setCoordinates(coordinates: Coordinates) {\n        this.coordinates = coordinates;\n\n        // Calculate which mercator tile is suitable for rendering the video in\n        // and create a buffer with the corner coordinates. These coordinates\n        // may be outside the tile, because raster tiles aren't clipped when rendering.\n\n        // transform the geo coordinates into (zoom 0) tile space coordinates\n        const cornerCoords = coordinates.map(MercatorCoordinate.fromLngLat);\n\n        // Compute the coordinates of the tile we'll use to hold this image's\n        // render data\n        this.tileID = getCoordinatesCenterTileID(cornerCoords);\n\n        // Constrain min/max zoom to our tile's zoom level in order to force\n        // SourceCache to request this tile (no matter what the map's zoom\n        // level)\n        this.minzoom = this.maxzoom = this.tileID.z;\n\n        // Transform the corner coordinates into the coordinate space of our\n        // tile.\n        const tileCoords = cornerCoords.map((coord) => this.tileID.getTilePoint(coord)._round());\n\n        this._boundsArray = new RasterBoundsArray();\n        this._boundsArray.emplaceBack(tileCoords[0].x, tileCoords[0].y, 0, 0);\n        this._boundsArray.emplaceBack(tileCoords[1].x, tileCoords[1].y, EXTENT, 0);\n        this._boundsArray.emplaceBack(tileCoords[3].x, tileCoords[3].y, 0, EXTENT);\n        this._boundsArray.emplaceBack(tileCoords[2].x, tileCoords[2].y, EXTENT, EXTENT);\n\n        if (this.boundsBuffer) {\n            this.boundsBuffer.destroy();\n            delete this.boundsBuffer;\n        }\n\n        this.fire(new Event('data', {dataType:'source', sourceDataType: 'content'}));\n        return this;\n    }\n\n    prepare() {\n        if (Object.keys(this.tiles).length === 0 || !this.image) {\n            return;\n        }\n\n        const context = this.map.painter.context;\n        const gl = context.gl;\n\n        if (!this.boundsBuffer) {\n            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);\n        }\n\n        if (!this.boundsSegments) {\n            this.boundsSegments = SegmentVector.simpleSegment(0, 0, 4, 2);\n        }\n\n        if (!this.texture) {\n            this.texture = new Texture(context, this.image, gl.RGBA);\n            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);\n        }\n\n        for (const w in this.tiles) {\n            const tile = this.tiles[w];\n            if (tile.state !== 'loaded') {\n                tile.state = 'loaded';\n                tile.texture = this.texture;\n            }\n        }\n    }\n\n    loadTile(tile: Tile, callback: Callback<void>) {\n        // We have a single tile -- whoose coordinates are this.tileID -- that\n        // covers the image we want to render.  If that's the one being\n        // requested, set it up with the image; otherwise, mark the tile as\n        // `errored` to indicate that we have no data for it.\n        // If the world wraps, we may have multiple \"wrapped\" copies of the\n        // single tile.\n        if (this.tileID && this.tileID.equals(tile.tileID.canonical)) {\n            this.tiles[String(tile.tileID.wrap)] = tile;\n            tile.buckets = {};\n            callback(null);\n        } else {\n            tile.state = 'errored';\n            callback(null);\n        }\n    }\n\n    serialize(): any {\n        return {\n            type: 'image',\n            url: this.options.url,\n            coordinates: this.coordinates\n        };\n    }\n\n    hasTransition() {\n        return false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "ImageSource",
          "kind": "class",
          "path": [
            {
              "name": "ImageSource",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Sets the image's coordinates and re-renders the map."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Four geographical coordinates,\n  represented as arrays of longitude and latitude numbers, which define the corners of the image.\n  The coordinates start at the top left corner of the image and proceed in clockwise order.\n  They do not have to represent a rectangle.",
                    "lineNumber": 3,
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "coordinates"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "ImageSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 169,
                    "column": 4
                  },
                  "end": {
                    "line": 177,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 178,
                      "column": 4
                    },
                    "end": {
                      "line": 214,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/image_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/image_source.ts#L178-L214",
                    "path": "src/source/image_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "coordinates",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Four geographical coordinates,\nrepresented as arrays of longitude and latitude numbers, which define the corners of the image.\nThe coordinates start at the top left corner of the image and proceed in clockwise order.\nThey do not have to represent a rectangle."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "TypeApplication",
                          "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                          },
                          "applications": [
                            {
                              "type": "NameExpression",
                              "name": "number"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "ImageSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "setCoordinates",
                "kind": "function",
                "memberof": "ImageSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ImageSource",
                    "kind": "class"
                  },
                  {
                    "name": "setCoordinates",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ImageSource#setCoordinates"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing,\nset the "
                        },
                        {
                          "type": "inlineCode",
                          "value": "raster-fade-duration"
                        },
                        {
                          "type": "text",
                          "value": " paint property on the raster layer to 0."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "Options object.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "options"
                  },
                  {
                    "title": "param",
                    "description": "Required image URL.",
                    "lineNumber": 5,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    },
                    "name": "options.url"
                  },
                  {
                    "title": "param",
                    "description": "Four geographical coordinates,\n  represented as arrays of longitude and latitude numbers, which define the corners of the image.\n  The coordinates start at the top left corner of the image and proceed in clockwise order.\n  They do not have to represent a rectangle.",
                    "lineNumber": 6,
                    "type": {
                      "type": "OptionalType",
                      "expression": {
                        "type": "TypeApplication",
                        "expression": {
                          "type": "NameExpression",
                          "name": "Array"
                        },
                        "applications": [
                          {
                            "type": "TypeApplication",
                            "expression": {
                              "type": "NameExpression",
                              "name": "Array"
                            },
                            "applications": [
                              {
                                "type": "NameExpression",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "name": "options.coordinates"
                  },
                  {
                    "title": "returns",
                    "description": "this",
                    "lineNumber": 10,
                    "type": {
                      "type": "NameExpression",
                      "name": "ImageSource"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 133,
                    "column": 4
                  },
                  "end": {
                    "line": 144,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 145,
                      "column": 4
                    },
                    "end": {
                      "line": 155,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/image_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/image_source.ts#L145-L155",
                    "path": "src/source/image_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "options",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "Options object."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "properties": [
                      {
                        "title": "param",
                        "name": "options.url",
                        "lineNumber": 5,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Required image URL."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "NameExpression",
                            "name": "string"
                          }
                        }
                      },
                      {
                        "title": "param",
                        "name": "options.coordinates",
                        "lineNumber": 6,
                        "description": {
                          "type": "root",
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "Four geographical coordinates,\nrepresented as arrays of longitude and latitude numbers, which define the corners of the image.\nThe coordinates start at the top left corner of the image and proceed in clockwise order.\nThey do not have to represent a rectangle."
                                }
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "OptionalType",
                          "expression": {
                            "type": "TypeApplication",
                            "expression": {
                              "type": "NameExpression",
                              "name": "Array"
                            },
                            "applications": [
                              {
                                "type": "TypeApplication",
                                "expression": {
                                  "type": "NameExpression",
                                  "name": "Array"
                                },
                                "applications": [
                                  {
                                    "type": "NameExpression",
                                    "name": "number"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "ImageSource"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "updateImage",
                "kind": "function",
                "memberof": "ImageSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "ImageSource",
                    "kind": "class"
                  },
                  {
                    "name": "updateImage",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "ImageSource#updateImage"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "ImageSource"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A data source containing the contents of an HTML canvas. See "
                  },
                  {
                    "type": "link",
                    "url": "CanvasSourceOptions",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "CanvasSourceOptions"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " for detailed documentation of options."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "example",
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'canvas',\n   canvas: 'idOfMyHTMLCanvas',\n   animate: true,\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 30,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 235,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/canvas_source.ts#L58-L235",
              "path": "src/source/canvas_source.ts"
            }
          },
          "augments": [
            {
              "title": "augments",
              "name": "ImageSource"
            }
          ],
          "examples": [
            {
              "description": "// add to map\nmap.addSource('some id', {\n   type: 'canvas',\n   canvas: 'idOfMyHTMLCanvas',\n   animate: true,\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nvar mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "id",
              "lineNumber": 71,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 71,
              "type": {
                "type": "NameExpression",
                "name": "CanvasSourceSpecification"
              }
            },
            {
              "title": "param",
              "name": "dispatcher",
              "lineNumber": 71,
              "type": {
                "type": "NameExpression",
                "name": "Dispatcher"
              }
            },
            {
              "title": "param",
              "name": "eventedParent",
              "lineNumber": 71,
              "type": {
                "type": "NameExpression",
                "name": "Evented"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 68,
                "column": 4
              },
              "end": {
                "line": 70,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 94,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000027!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts 00000071",
              "code": "{\n    options: CanvasSourceSpecification;\n    animate: boolean;\n    canvas: HTMLCanvasElement;\n    width: number;\n    height: number;\n    play: () => void;\n    pause: () => void;\n    _playing: boolean;\n\n    /**\n     * @private\n     */\n    constructor(id: string, options: CanvasSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented) {\n        super(id, options, dispatcher, eventedParent);\n\n        // We build in some validation here, since canvas sources aren't included in the style spec:\n        if (!options.coordinates) {\n            this.fire(new ErrorEvent(new ValidationError(`sources.${id}`, null, 'missing required property \"coordinates\"')));\n        } else if (!Array.isArray(options.coordinates) || options.coordinates.length !== 4 ||\n                options.coordinates.some(c => !Array.isArray(c) || c.length !== 2 || c.some(l => typeof l !== 'number'))) {\n            this.fire(new ErrorEvent(new ValidationError(`sources.${id}`, null, '\"coordinates\" property must be an array of 4 longitude/latitude array pairs')));\n        }\n\n        if (options.animate && typeof options.animate !== 'boolean') {\n            this.fire(new ErrorEvent(new ValidationError(`sources.${id}`, null, 'optional \"animate\" property must be a boolean value')));\n        }\n\n        if (!options.canvas) {\n            this.fire(new ErrorEvent(new ValidationError(`sources.${id}`, null, 'missing required property \"canvas\"')));\n        } else if (typeof options.canvas !== 'string' && !(options.canvas instanceof HTMLCanvasElement)) {\n            this.fire(new ErrorEvent(new ValidationError(`sources.${id}`, null, '\"canvas\" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance')));\n        }\n\n        this.options = options;\n        this.animate = options.animate !== undefined ? options.animate : true;\n    }\n\n    /**\n     * Enables animation. The image will be copied from the canvas to the map on each frame.\n     * @method play\n     * @instance\n     * @memberof CanvasSource\n     */\n\n    /**\n     * Disables animation. The map will display a static copy of the canvas image.\n     * @method pause\n     * @instance\n     * @memberof CanvasSource\n     */\n\n    load() {\n        this._loaded = true;\n        if (!this.canvas) {\n            this.canvas = (this.options.canvas instanceof HTMLCanvasElement) ?\n                this.options.canvas :\n                document.getElementById(this.options.canvas) as HTMLCanvasElement;\n            // cast to HTMLCanvasElement in else of ternary\n            // should we do a safety check and throw if it's not actually HTMLCanvasElement?\n        }\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n\n        if (this._hasInvalidDimensions()) {\n            this.fire(new ErrorEvent(new Error('Canvas dimensions cannot be less than or equal to zero.')));\n            return;\n        }\n\n        this.play = function() {\n            this._playing = true;\n            this.map.triggerRepaint();\n        };\n\n        this.pause = function() {\n            if (this._playing) {\n                this.prepare();\n                this._playing = false;\n            }\n        };\n\n        this._finishLoading();\n    }\n\n    /**\n     * Returns the HTML `canvas` element.\n     *\n     * @returns {HTMLCanvasElement} The HTML `canvas` element.\n     */\n    getCanvas() {\n        return this.canvas;\n    }\n\n    onAdd(map: Map) {\n        this.map = map;\n        this.load();\n        if (this.canvas) {\n            if (this.animate) this.play();\n        }\n    }\n\n    onRemove() {\n        this.pause();\n    }\n\n    // /**\n    // * Sets the canvas's coordinates and re-renders the map.\n    // *\n    // * @method setCoordinates\n    // * @instance\n    // * @memberof CanvasSource\n    // * @param {Array<Array<number>>} coordinates Four geographical coordinates,\n    // *   represented as arrays of longitude and latitude numbers, which define the corners of the canvas.\n    // *   The coordinates start at the top left corner of the canvas and proceed in clockwise order.\n    // *   They do not have to represent a rectangle.\n    // * @returns {CanvasSource} this\n    // */\n    // setCoordinates inherited from ImageSource\n\n    prepare() {\n        let resize = false;\n        if (this.canvas.width !== this.width) {\n            this.width = this.canvas.width;\n            resize = true;\n        }\n        if (this.canvas.height !== this.height) {\n            this.height = this.canvas.height;\n            resize = true;\n        }\n\n        if (this._hasInvalidDimensions()) return;\n\n        if (Object.keys(this.tiles).length === 0) return; // not enough data for current position\n\n        const context = this.map.painter.context;\n        const gl = context.gl;\n\n        if (!this.boundsBuffer) {\n            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);\n        }\n\n        if (!this.boundsSegments) {\n            this.boundsSegments = SegmentVector.simpleSegment(0, 0, 4, 2);\n        }\n\n        if (!this.texture) {\n            this.texture = new Texture(context, this.canvas, gl.RGBA, {premultiply: true});\n        } else if (resize || this._playing) {\n            this.texture.update(this.canvas, {premultiply: true});\n        }\n\n        for (const w in this.tiles) {\n            const tile = this.tiles[w];\n            if (tile.state !== 'loaded') {\n                tile.state = 'loaded';\n                tile.texture = this.texture;\n            }\n        }\n    }\n\n    serialize(): any {\n        return {\n            type: 'canvas',\n            coordinates: this.coordinates\n        };\n    }\n\n    hasTransition() {\n        return this._playing;\n    }\n\n    _hasInvalidDimensions() {\n        for (const x of [this.canvas.width, this.canvas.height]) {\n            if (isNaN(x) || x <= 0) return true;\n        }\n        return false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "CanvasSource",
          "kind": "class",
          "path": [
            {
              "name": "CanvasSource",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Returns the HTML "
                        },
                        {
                          "type": "inlineCode",
                          "value": "canvas"
                        },
                        {
                          "type": "text",
                          "value": " element."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "returns",
                    "description": "The HTML `canvas` element.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLCanvasElement"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 4
                  },
                  "end": {
                    "line": 146,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 147,
                      "column": 4
                    },
                    "end": {
                      "line": 149,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/canvas_source.ts#L147-L149",
                    "path": "src/source/canvas_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The HTML "
                            },
                            {
                              "type": "inlineCode",
                              "value": "canvas"
                            },
                            {
                              "type": "text",
                              "value": " element."
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "HTMLCanvasElement"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "getCanvas",
                "kind": "function",
                "memberof": "CanvasSource",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CanvasSource",
                    "kind": "class"
                  },
                  {
                    "name": "getCanvas",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CanvasSource#getCanvas"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Disables animation. The map will display a static copy of the canvas image."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "method",
                    "description": null,
                    "lineNumber": 2,
                    "name": "pause"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "CanvasSource",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 103,
                    "column": 4
                  },
                  "end": {
                    "line": 108,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 4
                    },
                    "end": {
                      "line": 140,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/canvas_source.ts#L110-L140",
                    "path": "src/source/canvas_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "name": "pause",
                "scope": "instance",
                "memberof": "CanvasSource",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CanvasSource",
                    "kind": "class"
                  },
                  {
                    "name": "pause",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CanvasSource#pause"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Enables animation. The image will be copied from the canvas to the map on each frame."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "method",
                    "description": null,
                    "lineNumber": 2,
                    "name": "play"
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 3
                  },
                  {
                    "title": "memberof",
                    "description": "CanvasSource",
                    "lineNumber": 4
                  }
                ],
                "loc": {
                  "start": {
                    "line": 96,
                    "column": 4
                  },
                  "end": {
                    "line": 101,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 4
                    },
                    "end": {
                      "line": 140,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/canvas_source.ts#L110-L140",
                    "path": "src/source/canvas_source.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "kind": "function",
                "name": "play",
                "scope": "instance",
                "memberof": "CanvasSource",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "CanvasSource",
                    "kind": "class"
                  },
                  {
                    "name": "play",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "CanvasSource#play"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "CanvasSource"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Options to add a canvas source type to the map."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "CanvasSourceOptions"
            },
            {
              "title": "property",
              "description": "Source type. Must be `\"canvas\"`.",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "type"
            },
            {
              "title": "property",
              "description": "Canvas source from which to read pixels. Can be a string representing the ID of the canvas element, or the `HTMLCanvasElement` itself.",
              "lineNumber": 5,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "HTMLCanvasElement"
                  }
                ]
              },
              "name": "canvas"
            },
            {
              "title": "property",
              "description": "Four geographical coordinates denoting where to place the corners of the canvas, specified in `[longitude, latitude]` pairs.",
              "lineNumber": 6,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              },
              "name": "coordinates"
            },
            {
              "title": "property",
              "description": "Whether the canvas source is animated. If the canvas is static (i.e. pixels do not need to be re-read on every frame), `animate` should be set to `false` to improve performance.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "animate",
              "default": "true"
            }
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 235,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/canvas_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/canvas_source.ts#L20-L28",
              "path": "src/source/canvas_source.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "type",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Source type. Must be "
                      },
                      {
                        "type": "inlineCode",
                        "value": "\"canvas\""
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "canvas",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Canvas source from which to read pixels. Can be a string representing the ID of the canvas element, or the "
                      },
                      {
                        "type": "inlineCode",
                        "value": "HTMLCanvasElement"
                      },
                      {
                        "type": "text",
                        "value": " itself."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "HTMLCanvasElement"
                  }
                ]
              }
            },
            {
              "title": "property",
              "name": "coordinates",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Four geographical coordinates denoting where to place the corners of the canvas, specified in "
                      },
                      {
                        "type": "inlineCode",
                        "value": "[longitude, latitude]"
                      },
                      {
                        "type": "text",
                        "value": " pairs."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "number"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "title": "property",
              "name": "animate",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Whether the canvas source is animated. If the canvas is static (i.e. pixels do not need to be re-read on every frame), "
                      },
                      {
                        "type": "inlineCode",
                        "value": "animate"
                      },
                      {
                        "type": "text",
                        "value": " should be set to "
                      },
                      {
                        "type": "inlineCode",
                        "value": "false"
                      },
                      {
                        "type": "text",
                        "value": " to improve performance."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              }
            }
          ],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "CanvasSourceOptions",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "CanvasSourceOptions",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "CanvasSourceOptions"
        }
      ]
    },
    "namespace": "Sources"
  },
  {
    "name": "Events",
    "page": "events",
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The different types of events that MapLibre GL JS can raise."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "You can also find additional event documentation for: "
            },
            {
              "type": "link",
              "title": null,
              "url": "/maplibre-gl-js-docs/api/map/#map-events",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "Map"
                }
              ]
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "link",
              "title": null,
              "url": "/maplibre-gl-js-docs/api/markers/#marker-events",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "Marker"
                }
              ]
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "link",
              "title": null,
              "url": "/maplibre-gl-js-docs/api/markers/#popup-events",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "Popup"
                }
              ]
            },
            {
              "type": "text",
              "value": ", and "
            },
            {
              "type": "link",
              "title": null,
              "url": "/maplibre-gl-js-docs/api/markers/#geolocatecontrol-events",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "GeolocationControl"
                }
              ]
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        }
      ]
    },
    "children": [
      "Evented",
      "MapMouseEvent",
      "MapTouchEvent",
      "MapLibreZoomEvent",
      "MapDataEvent",
      "MapWheelEvent"
    ],
    "kind": "note",
    "path": [
      {
        "name": "Events",
        "kind": "note"
      }
    ],
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Methods mixed in to other classes for event capabilities."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "mixin",
              "description": null,
              "lineNumber": 3,
              "name": "Evented"
            }
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 50,
                "column": 0
              },
              "end": {
                "line": 173,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/evented.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/evented.ts#L50-L173",
              "path": "src/util/evented.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "mixin",
          "name": "Evented",
          "path": [
            {
              "name": "Evented",
              "kind": "mixin"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Removes a previously registered event listener."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type to remove listeners for.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The listener function to remove.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 72,
                    "column": 4
                  },
                  "end": {
                    "line": 78,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 84,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/evented.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/evented.ts#L79-L84",
                    "path": "src/util/evented.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to remove listeners for."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The listener function to remove."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "off",
                "kind": "function",
                "memberof": "Evented",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Evented",
                    "kind": "mixin"
                  },
                  {
                    "name": "off",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Evented#off"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a listener to a specified event type."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type to add a listen for.",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The function to be called when the event is fired.\n  The listener function is called with the data object passed to `fire`,\n  extended with `target` and `type` properties.",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 4
                  },
                  "end": {
                    "line": 64,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 65,
                      "column": 4
                    },
                    "end": {
                      "line": 70,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/evented.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/evented.ts#L65-L70",
                    "path": "src/util/evented.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 3,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to add a listen for."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 4,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function to be called when the event is fired.\nThe listener function is called with the data object passed to "
                            },
                            {
                              "type": "inlineCode",
                              "value": "fire"
                            },
                            {
                              "type": "text",
                              "value": ",\nextended with "
                            },
                            {
                              "type": "inlineCode",
                              "value": "target"
                            },
                            {
                              "type": "text",
                              "value": " and "
                            },
                            {
                              "type": "inlineCode",
                              "value": "type"
                            },
                            {
                              "type": "text",
                              "value": " properties."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "on",
                "kind": "function",
                "memberof": "Evented",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Evented",
                    "kind": "mixin"
                  },
                  {
                    "name": "on",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Evented#on"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Adds a listener that will be called only once to a specified event type."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The listener will be called first time the event fires after the listener is registered."
                        }
                      ]
                    }
                  ]
                },
                "tags": [
                  {
                    "title": "param",
                    "description": "The event type to listen for.",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    "name": "type"
                  },
                  {
                    "title": "param",
                    "description": "The function to be called when the event is fired the first time.",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    },
                    "name": "listener"
                  },
                  {
                    "title": "returns",
                    "description": "`this`",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 4
                  },
                  "end": {
                    "line": 94,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 95,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/evented.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/evented.ts#L95-L100",
                    "path": "src/util/evented.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [
                  {
                    "title": "param",
                    "name": "type",
                    "lineNumber": 5,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The event type to listen for."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "title": "param",
                    "name": "listener",
                    "lineNumber": 6,
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "text",
                              "value": "The function to be called when the event is fired the first time."
                            }
                          ]
                        }
                      ]
                    },
                    "type": {
                      "type": "NameExpression",
                      "name": "Function"
                    }
                  }
                ],
                "properties": [],
                "returns": [
                  {
                    "description": {
                      "type": "root",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "this"
                            }
                          ]
                        }
                      ]
                    },
                    "title": "returns",
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "once",
                "kind": "function",
                "memberof": "Evented",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "Evented",
                    "kind": "mixin"
                  },
                  {
                    "name": "once",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "Evented#once"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "Evented"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "MapMouseEvent"
                  },
                  {
                    "type": "text",
                    "value": " is the event type for mouse-related map events."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "Event"
            },
            {
              "title": "example",
              "description": "// The `click` event is an example of a `MapMouseEvent`.\n// Set up an event listener on the map.\nmap.on('click', function(e) {\n  // The event object (e) contains information like the\n  // coordinates of the point on the map that was clicked.\n  console.log('A click event has occurred at ' + e.lngLat);\n});",
              "lineNumber": 3
            }
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 64,
                "column": 0
              },
              "end": {
                "line": 134,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L64-L134",
              "path": "src/ui/events.ts"
            }
          },
          "augments": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "Event"
            }
          ],
          "examples": [
            {
              "description": "// The `click` event is an example of a `MapMouseEvent`.\n// Set up an event listener on the map.\nmap.on('click', function(e) {\n  // The event object (e) contains information like the\n  // coordinates of the point on the map that was clicked.\n  console.log('A click event has occurred at ' + e.lngLat);\n});"
            }
          ],
          "implements": [
            {
              "title": "implements",
              "name": "MapLibreEvent<MouseEvent>"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "type",
              "lineNumber": 127,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "map",
              "lineNumber": 127,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            },
            {
              "title": "param",
              "name": "originalEvent",
              "lineNumber": 127,
              "type": {
                "type": "NameExpression",
                "name": "MouseEvent"
              }
            },
            {
              "title": "param",
              "name": "data",
              "lineNumber": 127,
              "type": {
                "type": "AllLiteral"
              },
              "default": "{}"
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 124,
                "column": 4
              },
              "end": {
                "line": 126,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 133,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000009!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts:00000011!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts 00000127",
              "code": "{\n    /**\n     * The event type (one of {@link Map.event:mousedown},\n     * {@link Map.event:mouseup},\n     * {@link Map.event:click},\n     * {@link Map.event:dblclick},\n     * {@link Map.event:mousemove},\n     * {@link Map.event:mouseover},\n     * {@link Map.event:mouseenter},\n     * {@link Map.event:mouseleave},\n     * {@link Map.event:mouseout},\n     * {@link Map.event:contextmenu}).\n     */\n    type: 'mousedown' | 'mouseup' | 'click' | 'dblclick' | 'mousemove' | 'mouseover' | 'mouseenter' | 'mouseleave' | 'mouseout' | 'contextmenu';\n\n    /**\n     * The `Map` object that fired the event.\n     */\n    target: Map;\n\n    /**\n     * The DOM event which caused the map event.\n     */\n    originalEvent: MouseEvent;\n\n    /**\n     * The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.\n     */\n    point: Point;\n\n    /**\n     * The geographic location on the map of the mouse cursor.\n     */\n    lngLat: LngLat;\n\n    /**\n     * Prevents subsequent default processing of the event by the map.\n     *\n     * Calling this method will prevent the following default map behaviors:\n     *\n     *   * On `mousedown` events, the behavior of {@link DragPanHandler}\n     *   * On `mousedown` events, the behavior of {@link DragRotateHandler}\n     *   * On `mousedown` events, the behavior of {@link BoxZoomHandler}\n     *   * On `dblclick` events, the behavior of {@link DoubleClickZoomHandler}\n     *\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    /**\n     * `true` if `preventDefault` has been called.\n     * @private\n     */\n    get defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n\n    _defaultPrevented: boolean;\n\n    /**\n     * @private\n     */\n    constructor(type: string, map: Map, originalEvent: MouseEvent, data: any = {}) {\n        const point = DOM.mousePos(map.getCanvasContainer(), originalEvent);\n        const lngLat = map.unproject(point);\n        super(type, extend({point, lngLat, originalEvent}, data));\n        this._defaultPrevented = false;\n        this.target = map;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "MapMouseEvent",
          "kind": "class",
          "path": [
            {
              "name": "MapMouseEvent",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The geographic location on the map of the mouse cursor."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 94,
                    "column": 4
                  },
                  "end": {
                    "line": 96,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 97,
                      "column": 4
                    },
                    "end": {
                      "line": 97,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L97-L97",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "lngLat",
                "kind": "member",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "LngLat"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "lngLat",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#lngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The DOM event which caused the map event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 84,
                    "column": 4
                  },
                  "end": {
                    "line": 86,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 87,
                      "column": 30
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L87-L87",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "originalEvent",
                "kind": "member",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "originalEvent",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#originalEvent"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 89,
                    "column": 4
                  },
                  "end": {
                    "line": 91,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 92,
                      "column": 4
                    },
                    "end": {
                      "line": 92,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L92-L92",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "point",
                "kind": "member",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Point"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "point",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#point"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Prevents subsequent default processing of the event by the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Calling this method will prevent the following default map behaviors:"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "mousedown"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "DragPanHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "DragPanHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "mousedown"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "DragRotateHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "DragRotateHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "mousedown"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "BoxZoomHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "BoxZoomHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "dblclick"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "DoubleClickZoomHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "DoubleClickZoomHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 4
                  },
                  "end": {
                    "line": 109,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 4
                    },
                    "end": {
                      "line": 112,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L110-L112",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "preventDefault",
                "kind": "function",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "preventDefault",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#preventDefault"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map"
                        },
                        {
                          "type": "text",
                          "value": " object that fired the event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 79,
                    "column": 4
                  },
                  "end": {
                    "line": 81,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L82-L82",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "target",
                "kind": "member",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Map"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "target",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#target"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The event type (one of "
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mousedown",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mousedown"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mouseup",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mouseup"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:click",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:click"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:dblclick",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:dblclick"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mousemove",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mousemove"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mouseover",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mouseover"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mouseenter",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mouseenter"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mouseleave",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mouseleave"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:mouseout",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:mouseout"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ",\n"
                        },
                        {
                          "type": "link",
                          "url": "Map.event:contextmenu",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "Map.event:contextmenu"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": ")."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 65,
                    "column": 4
                  },
                  "end": {
                    "line": 76,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 77,
                      "column": 4
                    },
                    "end": {
                      "line": 77,
                      "column": 144
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L77-L77",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "type",
                "kind": "member",
                "memberof": "MapMouseEvent",
                "scope": "instance",
                "type": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "StringLiteralType",
                      "value": "mousedown"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mouseup"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "click"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "dblclick"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mousemove"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mouseover"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mouseenter"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mouseleave"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "mouseout"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "contextmenu"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapMouseEvent",
                    "kind": "class"
                  },
                  {
                    "name": "type",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapMouseEvent#type"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "MapMouseEvent"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "MapTouchEvent"
                  },
                  {
                    "type": "text",
                    "value": " is the event type for touch-related map events."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "Event"
            }
          ],
          "loc": {
            "start": {
              "line": 136,
              "column": 0
            },
            "end": {
              "line": 139,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 140,
                "column": 0
              },
              "end": {
                "line": 216,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L140-L216",
              "path": "src/ui/events.ts"
            }
          },
          "augments": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Event"
              },
              "name": "Event"
            }
          ],
          "examples": [],
          "implements": [
            {
              "title": "implements",
              "name": "MapLibreEvent<TouchEvent>"
            }
          ],
          "params": [
            {
              "title": "param",
              "name": "type",
              "lineNumber": 205,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "map",
              "lineNumber": 205,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            },
            {
              "title": "param",
              "name": "originalEvent",
              "lineNumber": 205,
              "type": {
                "type": "NameExpression",
                "name": "TouchEvent"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 202,
                "column": 4
              },
              "end": {
                "line": 204,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 205,
                  "column": 4
                },
                "end": {
                  "line": 215,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000009!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts:00000011!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts 00000205",
              "code": "{\n    /**\n     * The event type.\n     */\n    type: 'touchstart' | 'touchmove' | 'touchend' | 'touchcancel';\n\n    /**\n     * The `Map` object that fired the event.\n     */\n    target: Map;\n\n    /**\n     * The DOM event which caused the map event.\n     */\n    originalEvent: TouchEvent;\n\n    /**\n     * The geographic location on the map of the center of the touch event points.\n     */\n    lngLat: LngLat;\n\n    /**\n     * The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left\n     * corner.\n     */\n    point: Point;\n\n    /**\n     * The array of pixel coordinates corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    points: Array<Point>;\n\n    /**\n     * The geographical locations on the map corresponding to a\n     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.\n     */\n    lngLats: Array<LngLat>;\n\n    /**\n     * Prevents subsequent default processing of the event by the map.\n     *\n     * Calling this method will prevent the following default map behaviors:\n     *\n     *   * On `touchstart` events, the behavior of {@link DragPanHandler}\n     *   * On `touchstart` events, the behavior of {@link TouchZoomRotateHandler}\n     *\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    /**\n     * `true` if `preventDefault` has been called.\n     * @private\n     */\n    get defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n\n    _defaultPrevented: boolean;\n\n    /**\n     * @private\n     */\n    constructor(type: string, map: Map, originalEvent: TouchEvent) {\n        const touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;\n        const points = DOM.touchPos(map.getCanvasContainer(), touches);\n        const lngLats = points.map((t) => map.unproject(t));\n        const point = points.reduce((prev, curr, i, arr) => {\n            return prev.add(curr.div(arr.length));\n        }, new Point(0, 0));\n        const lngLat = map.unproject(point);\n        super(type, {points, point, lngLats, lngLat, originalEvent});\n        this._defaultPrevented = false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "MapTouchEvent",
          "kind": "class",
          "path": [
            {
              "name": "MapTouchEvent",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The geographic location on the map of the center of the touch event points."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 156,
                    "column": 4
                  },
                  "end": {
                    "line": 158,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 159,
                      "column": 4
                    },
                    "end": {
                      "line": 159,
                      "column": 19
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L159-L159",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "lngLat",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "LngLat"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "lngLat",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#lngLat"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The geographical locations on the map corresponding to a\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches",
                          "children": [
                            {
                              "type": "text",
                              "value": "touch event's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "touches"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " property."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 173,
                    "column": 4
                  },
                  "end": {
                    "line": 176,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 177,
                      "column": 4
                    },
                    "end": {
                      "line": 177,
                      "column": 27
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L177-L177",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "lngLats",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Array"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "LngLat"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "lngLats",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#lngLats"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The DOM event which caused the map event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 151,
                    "column": 4
                  },
                  "end": {
                    "line": 153,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 154,
                      "column": 4
                    },
                    "end": {
                      "line": 154,
                      "column": 30
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L154-L154",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "originalEvent",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "originalEvent",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#originalEvent"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left\ncorner."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 161,
                    "column": 4
                  },
                  "end": {
                    "line": 164,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 165,
                      "column": 4
                    },
                    "end": {
                      "line": 165,
                      "column": 17
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L165-L165",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "point",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Point"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "point",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#point"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The array of pixel coordinates corresponding to a\n"
                        },
                        {
                          "type": "link",
                          "title": null,
                          "url": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches",
                          "children": [
                            {
                              "type": "text",
                              "value": "touch event's "
                            },
                            {
                              "type": "inlineCode",
                              "value": "touches"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " property."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 167,
                    "column": 4
                  },
                  "end": {
                    "line": 170,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 171,
                      "column": 4
                    },
                    "end": {
                      "line": 171,
                      "column": 25
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L171-L171",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "points",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Array"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "Point"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "points",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#points"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Prevents subsequent default processing of the event by the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Calling this method will prevent the following default map behaviors:"
                        }
                      ]
                    },
                    {
                      "type": "list",
                      "ordered": false,
                      "start": null,
                      "spread": false,
                      "children": [
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "touchstart"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "DragPanHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "DragPanHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "spread": false,
                          "checked": null,
                          "children": [
                            {
                              "type": "paragraph",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "On "
                                },
                                {
                                  "type": "inlineCode",
                                  "value": "touchstart"
                                },
                                {
                                  "type": "text",
                                  "value": " events, the behavior of "
                                },
                                {
                                  "type": "link",
                                  "url": "TouchZoomRotateHandler",
                                  "title": null,
                                  "jsdoc": true,
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "TouchZoomRotateHandler"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 179,
                    "column": 4
                  },
                  "end": {
                    "line": 187,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 188,
                      "column": 4
                    },
                    "end": {
                      "line": 190,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L188-L190",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "preventDefault",
                "kind": "function",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "preventDefault",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#preventDefault"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map"
                        },
                        {
                          "type": "text",
                          "value": " object that fired the event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 146,
                    "column": 4
                  },
                  "end": {
                    "line": 148,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 149,
                      "column": 4
                    },
                    "end": {
                      "line": 149,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L149-L149",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "target",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Map"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "target",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#target"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The event type."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 141,
                    "column": 4
                  },
                  "end": {
                    "line": 143,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 144,
                      "column": 4
                    },
                    "end": {
                      "line": 144,
                      "column": 66
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L144-L144",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "type",
                "kind": "member",
                "memberof": "MapTouchEvent",
                "scope": "instance",
                "type": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "StringLiteralType",
                      "value": "touchstart"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "touchmove"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "touchend"
                    },
                    {
                      "type": "StringLiteralType",
                      "value": "touchcancel"
                    }
                  ]
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapTouchEvent",
                    "kind": "class"
                  },
                  {
                    "name": "type",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapTouchEvent#type"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "MapTouchEvent"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "MapLibreZoomEvent"
                  },
                  {
                    "type": "text",
                    "value": " is the event type for the boxzoom-related map events emitted by the "
                  },
                  {
                    "type": "link",
                    "url": "BoxZoomHandler",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "BoxZoomHandler"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "MapLibreZoomEvent"
            },
            {
              "title": "property",
              "description": "The DOM event that triggered the boxzoom event. Can be a `MouseEvent` or `KeyboardEvent`",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "MouseEvent"
              },
              "name": "originalEvent"
            },
            {
              "title": "property",
              "description": "The type of boxzoom event. One of `boxzoomstart`, `boxzoomend` or `boxzoomcancel`",
              "lineNumber": 5,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "type"
            },
            {
              "title": "property",
              "description": "The `Map` instance that triggerred the event",
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              },
              "name": "target"
            }
          ],
          "loc": {
            "start": {
              "line": 266,
              "column": 0
            },
            "end": {
              "line": 273,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 274,
                "column": 0
              },
              "end": {
                "line": 278,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L266-L273",
              "path": "src/ui/events.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "originalEvent",
              "lineNumber": 4,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The DOM event that triggered the boxzoom event. Can be a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "MouseEvent"
                      },
                      {
                        "type": "text",
                        "value": " or "
                      },
                      {
                        "type": "inlineCode",
                        "value": "KeyboardEvent"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "MouseEvent"
              }
            },
            {
              "title": "property",
              "name": "type",
              "lineNumber": 5,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The type of boxzoom event. One of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "boxzoomstart"
                      },
                      {
                        "type": "text",
                        "value": ", "
                      },
                      {
                        "type": "inlineCode",
                        "value": "boxzoomend"
                      },
                      {
                        "type": "text",
                        "value": " or "
                      },
                      {
                        "type": "inlineCode",
                        "value": "boxzoomcancel"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "target",
              "lineNumber": 6,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The "
                      },
                      {
                        "type": "inlineCode",
                        "value": "Map"
                      },
                      {
                        "type": "text",
                        "value": " instance that triggerred the event"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            }
          ],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "MapLibreZoomEvent",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "MapLibreZoomEvent",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "MapLibreZoomEvent"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A "
                  },
                  {
                    "type": "inlineCode",
                    "value": "MapDataEvent"
                  },
                  {
                    "type": "text",
                    "value": " object is emitted with the "
                  },
                  {
                    "type": "link",
                    "url": "Map.event:data",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map.event:data"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nand "
                  },
                  {
                    "type": "link",
                    "url": "Map.event:dataloading",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "Map.event:dataloading"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " events. Possible values for\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "dataType"
                  },
                  {
                    "type": "text",
                    "value": "s are:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "'source'"
                          },
                          {
                            "type": "text",
                            "value": ": The non-tile data associated with any source"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "inlineCode",
                            "value": "'style'"
                          },
                          {
                            "type": "text",
                            "value": ": The "
                          },
                          {
                            "type": "link",
                            "title": null,
                            "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
                            "children": [
                              {
                                "type": "text",
                                "value": "style"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": " used by the map"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "typedef",
              "description": null,
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "MapDataEvent"
            },
            {
              "title": "property",
              "description": "The event type.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "type"
            },
            {
              "title": "property",
              "description": "The type of data that has changed. One of `'source'`, `'style'`.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "dataType"
            },
            {
              "title": "property",
              "description": "True if the event has a `dataType` of `source` and the source has no outstanding network requests.",
              "lineNumber": 11,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              },
              "name": "isSourceLoaded"
            },
            {
              "title": "property",
              "description": "The [style spec representation of the source](https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources) if the event has a `dataType` of `source`.",
              "lineNumber": 12,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "source"
            },
            {
              "title": "property",
              "description": "Included if the event has a `dataType` of `source` and the event signals\nthat internal data has been received or changed. Possible values are `metadata`, `content` and `visibility`.",
              "lineNumber": 13,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "sourceDataType"
            },
            {
              "title": "property",
              "description": "The tile being loaded or changed, if the event has a `dataType` of `source` and\nthe event is related to loading of a tile.",
              "lineNumber": 15,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "tile"
            },
            {
              "title": "property",
              "description": "The coordinate of the tile if the event has a `dataType` of `source` and\nthe event is related to loading of a tile.",
              "lineNumber": 17,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Coordinates"
                }
              },
              "name": "coord"
            },
            {
              "title": "example",
              "description": "// The sourcedata event is an example of MapDataEvent.\n// Set up an event listener on the map.\nmap.on('sourcedata', function(e) {\n   if (e.isSourceLoaded) {\n       // Do something when the source has finished loading\n   }\n});",
              "lineNumber": 19
            }
          ],
          "loc": {
            "start": {
              "line": 280,
              "column": 0
            },
            "end": {
              "line": 307,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 308,
                "column": 0
              },
              "end": {
                "line": 312,
                "column": 2
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L280-L307",
              "path": "src/ui/events.ts"
            }
          },
          "augments": [],
          "examples": [
            {
              "description": "// The sourcedata event is an example of MapDataEvent.\n// Set up an event listener on the map.\nmap.on('sourcedata', function(e) {\n   if (e.isSourceLoaded) {\n       // Do something when the source has finished loading\n   }\n});"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [
            {
              "title": "property",
              "name": "type",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The event type."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "dataType",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The type of data that has changed. One of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "'source'"
                      },
                      {
                        "type": "text",
                        "value": ", "
                      },
                      {
                        "type": "inlineCode",
                        "value": "'style'"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "property",
              "name": "isSourceLoaded",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "True if the event has a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "dataType"
                      },
                      {
                        "type": "text",
                        "value": " of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "source"
                      },
                      {
                        "type": "text",
                        "value": " and the source has no outstanding network requests."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "boolean"
                }
              }
            },
            {
              "title": "property",
              "name": "source",
              "lineNumber": 12,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The "
                      },
                      {
                        "type": "link",
                        "title": null,
                        "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/#sources",
                        "children": [
                          {
                            "type": "text",
                            "value": "style spec representation of the source"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": " if the event has a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "dataType"
                      },
                      {
                        "type": "text",
                        "value": " of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "source"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              }
            },
            {
              "title": "property",
              "name": "sourceDataType",
              "lineNumber": 13,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Included if the event has a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "dataType"
                      },
                      {
                        "type": "text",
                        "value": " of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "source"
                      },
                      {
                        "type": "text",
                        "value": " and the event signals\nthat internal data has been received or changed. Possible values are "
                      },
                      {
                        "type": "inlineCode",
                        "value": "metadata"
                      },
                      {
                        "type": "text",
                        "value": ", "
                      },
                      {
                        "type": "inlineCode",
                        "value": "content"
                      },
                      {
                        "type": "text",
                        "value": " and "
                      },
                      {
                        "type": "inlineCode",
                        "value": "visibility"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              }
            },
            {
              "title": "property",
              "name": "tile",
              "lineNumber": 15,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The tile being loaded or changed, if the event has a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "dataType"
                      },
                      {
                        "type": "text",
                        "value": " of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "source"
                      },
                      {
                        "type": "text",
                        "value": " and\nthe event is related to loading of a tile."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              }
            },
            {
              "title": "property",
              "name": "coord",
              "lineNumber": 17,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The coordinate of the tile if the event has a "
                      },
                      {
                        "type": "inlineCode",
                        "value": "dataType"
                      },
                      {
                        "type": "text",
                        "value": " of "
                      },
                      {
                        "type": "inlineCode",
                        "value": "source"
                      },
                      {
                        "type": "text",
                        "value": " and\nthe event is related to loading of a tile."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Coordinates"
                }
              }
            }
          ],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "kind": "typedef",
          "name": "MapDataEvent",
          "type": {
            "type": "NameExpression",
            "name": "Object"
          },
          "path": [
            {
              "name": "MapDataEvent",
              "kind": "typedef"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "namespace": "MapDataEvent"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "inlineCode",
                    "value": "MapWheelEvent"
                  },
                  {
                    "type": "text",
                    "value": " is the event type for the "
                  },
                  {
                    "type": "inlineCode",
                    "value": "wheel"
                  },
                  {
                    "type": "text",
                    "value": " map event."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "Object"
            }
          ],
          "loc": {
            "start": {
              "line": 218,
              "column": 0
            },
            "end": {
              "line": 221,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 222,
                "column": 0
              },
              "end": {
                "line": 264,
                "column": 1
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L222-L264",
              "path": "src/ui/events.ts"
            }
          },
          "augments": [
            {
              "title": "extends",
              "description": null,
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "Object"
            }
          ],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "type",
              "lineNumber": 260,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "map",
              "lineNumber": 260,
              "type": {
                "type": "NameExpression",
                "name": "Map"
              }
            },
            {
              "title": "param",
              "name": "originalEvent",
              "lineNumber": 260,
              "type": {
                "type": "NameExpression",
                "name": "WheelEvent"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "constructorComment": {
            "description": "",
            "tags": [
              {
                "title": "private",
                "description": null,
                "lineNumber": 1
              }
            ],
            "loc": {
              "start": {
                "line": 257,
                "column": 4
              },
              "end": {
                "line": 259,
                "column": 7
              }
            },
            "context": {
              "loc": {
                "start": {
                  "line": 260,
                  "column": 4
                },
                "end": {
                  "line": 263,
                  "column": 5
                }
              },
              "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
              "sortKey": "!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/index.ts:00000009!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/marker.ts:00000011!/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts 00000260",
              "code": "{\n    /**\n     * The event type.\n     */\n    type: 'wheel';\n\n    /**\n     * The `Map` object that fired the event.\n     */\n    target: Map;\n\n    /**\n     * The DOM event which caused the map event.\n     */\n    originalEvent: WheelEvent;\n\n    /**\n     * Prevents subsequent default processing of the event by the map.\n     *\n     * Calling this method will prevent the the behavior of {@link ScrollZoomHandler}.\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    /**\n     * `true` if `preventDefault` has been called.\n     * @private\n     */\n    get defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n\n    _defaultPrevented: boolean;\n\n    /**\n     * @private\n     */\n    constructor(type: string, map: Map, originalEvent: WheelEvent) {\n        super(type, {originalEvent});\n        this._defaultPrevented = false;\n    }\n}"
            },
            "augments": [],
            "errors": [],
            "examples": [],
            "implements": [],
            "params": [],
            "properties": [],
            "returns": [],
            "sees": [],
            "throws": [],
            "todos": [],
            "yields": [],
            "access": "private"
          },
          "name": "MapWheelEvent",
          "kind": "class",
          "path": [
            {
              "name": "MapWheelEvent",
              "kind": "class"
            }
          ],
          "members": {
            "global": [],
            "inner": [],
            "instance": [
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The DOM event which caused the map event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 233,
                    "column": 4
                  },
                  "end": {
                    "line": 235,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 236,
                      "column": 4
                    },
                    "end": {
                      "line": 236,
                      "column": 30
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L236-L236",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "originalEvent",
                "kind": "member",
                "memberof": "MapWheelEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapWheelEvent",
                    "kind": "class"
                  },
                  {
                    "name": "originalEvent",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapWheelEvent#originalEvent"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Prevents subsequent default processing of the event by the map."
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Calling this method will prevent the the behavior of "
                        },
                        {
                          "type": "link",
                          "url": "ScrollZoomHandler",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "ScrollZoomHandler"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 238,
                    "column": 4
                  },
                  "end": {
                    "line": 242,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 243,
                      "column": 4
                    },
                    "end": {
                      "line": 245,
                      "column": 5
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L243-L245",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "preventDefault",
                "kind": "function",
                "memberof": "MapWheelEvent",
                "scope": "instance",
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapWheelEvent",
                    "kind": "class"
                  },
                  {
                    "name": "preventDefault",
                    "kind": "function",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapWheelEvent#preventDefault"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The "
                        },
                        {
                          "type": "inlineCode",
                          "value": "Map"
                        },
                        {
                          "type": "text",
                          "value": " object that fired the event."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 228,
                    "column": 4
                  },
                  "end": {
                    "line": 230,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 231,
                      "column": 4
                    },
                    "end": {
                      "line": 231,
                      "column": 16
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L231-L231",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "target",
                "kind": "member",
                "memberof": "MapWheelEvent",
                "scope": "instance",
                "type": {
                  "type": "NameExpression",
                  "name": "Map"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapWheelEvent",
                    "kind": "class"
                  },
                  {
                    "name": "target",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapWheelEvent#target"
              },
              {
                "description": {
                  "type": "root",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "The event type."
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "loc": {
                  "start": {
                    "line": 223,
                    "column": 4
                  },
                  "end": {
                    "line": 225,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 226,
                      "column": 4
                    },
                    "end": {
                      "line": 226,
                      "column": 18
                    }
                  },
                  "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
                  "github": {
                    "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L226-L226",
                    "path": "src/ui/events.ts"
                  }
                },
                "augments": [],
                "examples": [],
                "implements": [],
                "params": [],
                "properties": [],
                "returns": [],
                "sees": [],
                "throws": [],
                "todos": [],
                "yields": [],
                "name": "type",
                "kind": "member",
                "memberof": "MapWheelEvent",
                "scope": "instance",
                "type": {
                  "type": "StringLiteralType",
                  "value": "wheel"
                },
                "members": {
                  "global": [],
                  "inner": [],
                  "instance": [],
                  "events": [],
                  "static": []
                },
                "path": [
                  {
                    "name": "MapWheelEvent",
                    "kind": "class"
                  },
                  {
                    "name": "type",
                    "kind": "member",
                    "scope": "instance"
                  }
                ],
                "namespace": "MapWheelEvent#type"
              }
            ],
            "events": [],
            "static": []
          },
          "namespace": "MapWheelEvent"
        }
      ]
    },
    "namespace": "Events"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "An error thrown when a HTTP request results in an error response."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Error"
      },
      {
        "title": "param",
        "description": "The response's HTTP status code.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "status"
      },
      {
        "title": "param",
        "description": "The response's HTTP status text.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "statusText"
      },
      {
        "title": "param",
        "description": "The request's URL.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "url"
      },
      {
        "title": "param",
        "description": "The response's body.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Blob"
        },
        "name": "body"
      }
    ],
    "loc": {
      "start": {
        "line": 83,
        "column": 0
      },
      "end": {
        "line": 90,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 119,
          "column": 1
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L91-L119",
        "path": "src/util/ajax.ts"
      }
    },
    "augments": [
      {
        "title": "extends",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "Error"
      }
    ],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "status",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The response's HTTP status code."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "param",
        "name": "statusText",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The response's HTTP status text."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "url",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The request's URL."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "body",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The response's body."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Blob"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "AJAXError",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The response's body."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 110,
                "column": 4
              },
              "end": {
                "line": 110,
                "column": 15
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L110-L110",
              "path": "src/util/ajax.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "body",
          "kind": "member",
          "memberof": "AJAXError",
          "scope": "instance",
          "type": {
            "type": "NameExpression",
            "name": "Blob"
          },
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "AJAXError",
              "kind": "class"
            },
            {
              "name": "body",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "AJAXError#body"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The response's HTTP status code."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 95,
                "column": 4
              },
              "end": {
                "line": 95,
                "column": 19
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L95-L95",
              "path": "src/util/ajax.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "status",
          "kind": "member",
          "memberof": "AJAXError",
          "scope": "instance",
          "type": {
            "type": "NameExpression",
            "name": "number"
          },
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "AJAXError",
              "kind": "class"
            },
            {
              "name": "status",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "AJAXError#status"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The response's HTTP status text."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 100,
                "column": 4
              },
              "end": {
                "line": 100,
                "column": 23
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L100-L100",
              "path": "src/util/ajax.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "statusText",
          "kind": "member",
          "memberof": "AJAXError",
          "scope": "instance",
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "AJAXError",
              "kind": "class"
            },
            {
              "name": "statusText",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "AJAXError#statusText"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "The request's URL."
                  }
                ]
              }
            ]
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 105,
                "column": 4
              },
              "end": {
                "line": 105,
                "column": 16
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/util/ajax.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/util/ajax.ts#L105-L105",
              "path": "src/util/ajax.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "url",
          "kind": "member",
          "memberof": "AJAXError",
          "scope": "instance",
          "type": {
            "type": "NameExpression",
            "name": "string"
          },
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "AJAXError",
              "kind": "class"
            },
            {
              "name": "url",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "AJAXError#url"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "AJAXError",
        "kind": "class"
      }
    ],
    "namespace": "AJAXError"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Migrate the given style object in place to use expressions. Specifically,\nthis will convert (a) \"stop\" functions, and (b) legacy filters to their\nexpression equivalents."
            }
          ]
        }
      ]
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 1
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style-spec/migrate/expressions.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style-spec/migrate/expressions.ts#L13-L33",
        "path": "src/style-spec/migrate/expressions.ts"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "style",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "StyleSpecification"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "expressions",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "expressions",
        "kind": "function"
      }
    ],
    "namespace": "expressions"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A "
            },
            {
              "type": "inlineCode",
              "value": "LogoControl"
            },
            {
              "type": "text",
              "value": " is a control that adds the watermark."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "implements",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "IControl"
        },
        "name": "IControl"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options"
      },
      {
        "title": "param",
        "description": "If `true`, force a compact logo. If `false`, force the full logo. The default is a responsive logo that collapses when the map is less than 640 pixels wide.\n*",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "options.compact"
      }
    ],
    "loc": {
      "start": {
        "line": 11,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 4
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 77,
          "column": 1
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/control/logo_control.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/control/logo_control.ts#L19-L77",
        "path": "src/ui/control/logo_control.ts"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [
      {
        "title": "implements",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "IControl"
        },
        "name": "IControl"
      }
    ],
    "params": [
      {
        "title": "param",
        "name": "options",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "properties": [
          {
            "title": "param",
            "name": "options.compact",
            "lineNumber": 5,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "true"
                    },
                    {
                      "type": "text",
                      "value": ", force a compact logo. If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "false"
                    },
                    {
                      "type": "text",
                      "value": ", force the full logo. The default is a responsive logo that collapses when the map is less than 640 pixels wide.\n*"
                    }
                  ]
                }
              ]
            },
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          }
        ],
        "default": "{}"
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "LogoControl",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "LogoControl",
        "kind": "class"
      }
    ],
    "namespace": "LogoControl"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "MapEventType - a mapping between the event name and the event value"
            }
          ]
        }
      ]
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 324,
        "column": 0
      },
      "end": {
        "line": 326,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 327,
          "column": 0
        },
        "end": {
          "line": 389,
          "column": 2
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/ui/events.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/ui/events.ts#L324-L326",
        "path": "src/ui/events.ts"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "error",
        "lineNumber": 328,
        "type": {
          "type": "NameExpression",
          "name": "ErrorEvent"
        }
      },
      {
        "title": "property",
        "name": "load",
        "lineNumber": 330,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreEvent"
        }
      },
      {
        "title": "property",
        "name": "idle",
        "lineNumber": 331,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreEvent"
        }
      },
      {
        "title": "property",
        "name": "remove",
        "lineNumber": 332,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreEvent"
        }
      },
      {
        "title": "property",
        "name": "render",
        "lineNumber": 333,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreEvent"
        }
      },
      {
        "title": "property",
        "name": "resize",
        "lineNumber": 334,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreEvent"
        }
      },
      {
        "title": "property",
        "name": "webglcontextlost",
        "lineNumber": 336,
        "type": {
          "type": "NameExpression",
          "name": "MapContextEvent"
        }
      },
      {
        "title": "property",
        "name": "webglcontextrestored",
        "lineNumber": 337,
        "type": {
          "type": "NameExpression",
          "name": "MapContextEvent"
        }
      },
      {
        "title": "property",
        "name": "dataloading",
        "lineNumber": 339,
        "type": {
          "type": "NameExpression",
          "name": "MapDataEvent"
        }
      },
      {
        "title": "property",
        "name": "data",
        "lineNumber": 340,
        "type": {
          "type": "NameExpression",
          "name": "MapDataEvent"
        }
      },
      {
        "title": "property",
        "name": "tiledataloading",
        "lineNumber": 341,
        "type": {
          "type": "NameExpression",
          "name": "MapDataEvent"
        }
      },
      {
        "title": "property",
        "name": "sourcedataloading",
        "lineNumber": 342,
        "type": {
          "type": "NameExpression",
          "name": "MapSourceDataEvent"
        }
      },
      {
        "title": "property",
        "name": "styledataloading",
        "lineNumber": 343,
        "type": {
          "type": "NameExpression",
          "name": "MapStyleDataEvent"
        }
      },
      {
        "title": "property",
        "name": "sourcedata",
        "lineNumber": 344,
        "type": {
          "type": "NameExpression",
          "name": "MapSourceDataEvent"
        }
      },
      {
        "title": "property",
        "name": "styledata",
        "lineNumber": 345,
        "type": {
          "type": "NameExpression",
          "name": "MapStyleDataEvent"
        }
      },
      {
        "title": "property",
        "name": "styleimagemissing",
        "lineNumber": 346,
        "type": {
          "type": "NameExpression",
          "name": "MapStyleImageMissingEvent"
        }
      },
      {
        "title": "property",
        "name": "dataabort",
        "lineNumber": 347,
        "type": {
          "type": "NameExpression",
          "name": "MapDataEvent"
        }
      },
      {
        "title": "property",
        "name": "sourcedataabort",
        "lineNumber": 348,
        "type": {
          "type": "NameExpression",
          "name": "MapSourceDataEvent"
        }
      },
      {
        "title": "property",
        "name": "boxzoomcancel",
        "lineNumber": 350,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreZoomEvent"
        }
      },
      {
        "title": "property",
        "name": "boxzoomstart",
        "lineNumber": 351,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreZoomEvent"
        }
      },
      {
        "title": "property",
        "name": "boxzoomend",
        "lineNumber": 352,
        "type": {
          "type": "NameExpression",
          "name": "MapLibreZoomEvent"
        }
      },
      {
        "title": "property",
        "name": "touchcancel",
        "lineNumber": 354,
        "type": {
          "type": "NameExpression",
          "name": "MapTouchEvent"
        }
      },
      {
        "title": "property",
        "name": "touchmove",
        "lineNumber": 355,
        "type": {
          "type": "NameExpression",
          "name": "MapTouchEvent"
        }
      },
      {
        "title": "property",
        "name": "touchend",
        "lineNumber": 356,
        "type": {
          "type": "NameExpression",
          "name": "MapTouchEvent"
        }
      },
      {
        "title": "property",
        "name": "touchstart",
        "lineNumber": 357,
        "type": {
          "type": "NameExpression",
          "name": "MapTouchEvent"
        }
      },
      {
        "title": "property",
        "name": "click",
        "lineNumber": 359,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "contextmenu",
        "lineNumber": 360,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "dblclick",
        "lineNumber": 361,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "mousemove",
        "lineNumber": 362,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "mouseup",
        "lineNumber": 363,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "mousedown",
        "lineNumber": 364,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "mouseout",
        "lineNumber": 365,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "mouseover",
        "lineNumber": 366,
        "type": {
          "type": "NameExpression",
          "name": "MapMouseEvent"
        }
      },
      {
        "title": "property",
        "name": "movestart",
        "lineNumber": 368,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "move",
        "lineNumber": 369,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "moveend",
        "lineNumber": 370,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "zoomstart",
        "lineNumber": 372,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "zoom",
        "lineNumber": 373,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "zoomend",
        "lineNumber": 374,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "WheelEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "rotatestart",
        "lineNumber": 376,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "rotate",
        "lineNumber": 377,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "rotateend",
        "lineNumber": 378,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "dragstart",
        "lineNumber": 380,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "drag",
        "lineNumber": 381,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "dragend",
        "lineNumber": 382,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "pitchstart",
        "lineNumber": 384,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "pitch",
        "lineNumber": 385,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "pitchend",
        "lineNumber": 386,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          },
          "applications": [
            {
              "type": "UnionType",
              "elements": [
                {
                  "type": "NameExpression",
                  "name": "MouseEvent"
                },
                {
                  "type": "NameExpression",
                  "name": "TouchEvent"
                },
                {
                  "type": "UndefinedLiteral"
                }
              ]
            }
          ]
        }
      },
      {
        "title": "property",
        "name": "wheel",
        "lineNumber": 388,
        "type": {
          "type": "NameExpression",
          "name": "MapWheelEvent"
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "MapEventType",
    "kind": "typedef",
    "type": {
      "type": "RecordType",
      "fields": [
        {
          "type": "FieldType",
          "key": "error",
          "value": {
            "type": "NameExpression",
            "name": "ErrorEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "load",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "idle",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "remove",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "render",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "resize",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "webglcontextlost",
          "value": {
            "type": "NameExpression",
            "name": "MapContextEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "webglcontextrestored",
          "value": {
            "type": "NameExpression",
            "name": "MapContextEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "dataloading",
          "value": {
            "type": "NameExpression",
            "name": "MapDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "data",
          "value": {
            "type": "NameExpression",
            "name": "MapDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "tiledataloading",
          "value": {
            "type": "NameExpression",
            "name": "MapDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "sourcedataloading",
          "value": {
            "type": "NameExpression",
            "name": "MapSourceDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "styledataloading",
          "value": {
            "type": "NameExpression",
            "name": "MapStyleDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "sourcedata",
          "value": {
            "type": "NameExpression",
            "name": "MapSourceDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "styledata",
          "value": {
            "type": "NameExpression",
            "name": "MapStyleDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "styleimagemissing",
          "value": {
            "type": "NameExpression",
            "name": "MapStyleImageMissingEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "dataabort",
          "value": {
            "type": "NameExpression",
            "name": "MapDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "sourcedataabort",
          "value": {
            "type": "NameExpression",
            "name": "MapSourceDataEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "boxzoomcancel",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreZoomEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "boxzoomstart",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreZoomEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "boxzoomend",
          "value": {
            "type": "NameExpression",
            "name": "MapLibreZoomEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "touchcancel",
          "value": {
            "type": "NameExpression",
            "name": "MapTouchEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "touchmove",
          "value": {
            "type": "NameExpression",
            "name": "MapTouchEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "touchend",
          "value": {
            "type": "NameExpression",
            "name": "MapTouchEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "touchstart",
          "value": {
            "type": "NameExpression",
            "name": "MapTouchEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "click",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "contextmenu",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "dblclick",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "mousemove",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "mouseup",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "mousedown",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "mouseout",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "mouseover",
          "value": {
            "type": "NameExpression",
            "name": "MapMouseEvent"
          }
        },
        {
          "type": "FieldType",
          "key": "movestart",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "move",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "moveend",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "zoomstart",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "zoom",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "zoomend",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "WheelEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "rotatestart",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "rotate",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "rotateend",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "dragstart",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "drag",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "dragend",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "pitchstart",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "pitch",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "pitchend",
          "value": {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "MapLibreEvent"
            },
            "applications": [
              {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "MouseEvent"
                  },
                  {
                    "type": "NameExpression",
                    "name": "TouchEvent"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "FieldType",
          "key": "wheel",
          "value": {
            "type": "NameExpression",
            "name": "MapWheelEvent"
          }
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "MapEventType",
        "kind": "typedef"
      }
    ],
    "namespace": "MapEventType"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Statically analyze the expression, attempting to enumerate possible outputs. Returns\nfalse if the complete set of outputs is statically undecidable, otherwise true."
            }
          ]
        }
      ]
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 11,
        "column": 4
      },
      "end": {
        "line": 14,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 15,
          "column": 4
        },
        "end": {
          "line": 15,
          "column": 29
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/style-spec/expression/expression.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/style-spec/expression/expression.ts#L15-L15",
        "path": "src/style-spec/expression/expression.ts"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [
      {
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "outputDefined",
    "kind": "function",
    "memberof": "Expression",
    "scope": "instance",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "outputDefined",
        "kind": "function",
        "scope": "instance"
      }
    ],
    "namespace": "#outputDefined"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A source containing vector tiles in "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://docs.mapbox.com/vector-tiles/reference/",
              "children": [
                {
                  "type": "text",
                  "value": "Mapbox Vector Tile format"
                }
              ]
            },
            {
              "type": "text",
              "value": ".\n(See the "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://maplibre.org/maplibre-gl-js-docs/style-spec/",
              "children": [
                {
                  "type": "text",
                  "value": "Style Specification"
                }
              ]
            },
            {
              "type": "text",
              "value": " for detailed documentation of options.)"
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "example",
        "description": "map.addSource('some id', {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});",
        "lineNumber": 4
      },
      {
        "title": "example",
        "description": "map.addSource('some id', {\n    type: 'vector',\n    tiles: ['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt'],\n    minzoom: 6,\n    maxzoom: 14\n});",
        "lineNumber": 10
      },
      {
        "title": "example",
        "description": "map.getSource('some id').setUrl(\"https://demotiles.maplibre.org/tiles/tiles.json\");",
        "lineNumber": 18
      },
      {
        "title": "example",
        "description": "map.getSource('some id').setTiles(['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt']);",
        "lineNumber": 21
      },
      {
        "title": "see",
        "description": "[Add a vector tile source](https://maplibre.org/maplibre-gl-js-docs/example/vector-source/)",
        "lineNumber": 23
      },
      {
        "title": "see",
        "description": "[Add a third party vector tile source](https://maplibre.org/maplibre-gl-js-docs/example/third-party/)",
        "lineNumber": 24
      }
    ],
    "loc": {
      "start": {
        "line": 18,
        "column": 0
      },
      "end": {
        "line": 43,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 252,
          "column": 1
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/vector_tile_source.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/vector_tile_source.ts#L44-L252",
        "path": "src/source/vector_tile_source.ts"
      }
    },
    "augments": [
      {
        "title": "augments",
        "name": "Evented"
      }
    ],
    "examples": [
      {
        "description": "map.addSource('some id', {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});"
      },
      {
        "description": "map.addSource('some id', {\n    type: 'vector',\n    tiles: ['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt'],\n    minzoom: 6,\n    maxzoom: 14\n});"
      },
      {
        "description": "map.getSource('some id').setUrl(\"https://demotiles.maplibre.org/tiles/tiles.json\");"
      },
      {
        "description": "map.getSource('some id').setTiles(['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt']);"
      }
    ],
    "implements": [
      {
        "title": "implements",
        "name": "Source"
      }
    ],
    "params": [
      {
        "title": "param",
        "name": "id",
        "lineNumber": 66,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "options",
        "lineNumber": 66,
        "type": {
          "type": "AllLiteral"
        }
      },
      {
        "title": "param",
        "name": "dispatcher",
        "lineNumber": 68,
        "type": {
          "type": "NameExpression",
          "name": "Dispatcher"
        }
      },
      {
        "title": "param",
        "name": "eventedParent",
        "lineNumber": 68,
        "type": {
          "type": "NameExpression",
          "name": "Evented"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "link",
                  "title": null,
                  "url": "https://maplibre.org/maplibre-gl-js-docs/example/vector-source/",
                  "children": [
                    {
                      "type": "text",
                      "value": "Add a vector tile source"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "title": "sees"
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "link",
                  "title": null,
                  "url": "https://maplibre.org/maplibre-gl-js-docs/example/third-party/",
                  "children": [
                    {
                      "type": "text",
                      "value": "Add a third party vector tile source"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "title": "sees"
      }
    ],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "VectorTileSource",
    "kind": "class",
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the source "
                  },
                  {
                    "type": "inlineCode",
                    "value": "tiles"
                  },
                  {
                    "type": "text",
                    "value": " property and re-renders the map."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "An array of one or more tile source URLs, as in the TileJSON spec.",
              "lineNumber": 3,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              },
              "name": "tiles"
            },
            {
              "title": "returns",
              "description": "this",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "VectorTileSource"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 139,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 145,
                "column": 4
              },
              "end": {
                "line": 151,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/vector_tile_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/vector_tile_source.ts#L145-L151",
              "path": "src/source/vector_tile_source.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "tiles",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "An array of one or more tile source URLs, as in the TileJSON spec."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "this"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "VectorTileSource"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setTiles",
          "kind": "function",
          "memberof": "VectorTileSource",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "VectorTileSource",
              "kind": "class"
            },
            {
              "name": "setTiles",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "VectorTileSource#setTiles"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Sets the source "
                  },
                  {
                    "type": "inlineCode",
                    "value": "url"
                  },
                  {
                    "type": "text",
                    "value": " property and re-renders the map."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "param",
              "description": "A URL to a TileJSON resource. Supported protocols are `http:` and `https:`.",
              "lineNumber": 3,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "url"
            },
            {
              "title": "returns",
              "description": "this",
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "VectorTileSource"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 159,
                "column": 4
              },
              "end": {
                "line": 166,
                "column": 5
              }
            },
            "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/source/vector_tile_source.ts",
            "github": {
              "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/source/vector_tile_source.ts#L159-L166",
              "path": "src/source/vector_tile_source.ts"
            }
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "url",
              "lineNumber": 3,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A URL to a TileJSON resource. Supported protocols are "
                      },
                      {
                        "type": "inlineCode",
                        "value": "http:"
                      },
                      {
                        "type": "text",
                        "value": " and "
                      },
                      {
                        "type": "inlineCode",
                        "value": "https:"
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "this"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "VectorTileSource"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "name": "setUrl",
          "kind": "function",
          "memberof": "VectorTileSource",
          "scope": "instance",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "VectorTileSource",
              "kind": "class"
            },
            {
              "name": "setUrl",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "VectorTileSource#setUrl"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "VectorTileSource",
        "kind": "class"
      }
    ],
    "namespace": "VectorTileSource"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "TinySDF's \"top\" is the distance from the alphabetic baseline to the top of the glyph.\nServer-generated fonts specify \"top\" relative to an origin above the em box (the origin\ncomes from FreeType, but I'm unclear on exactly how it's derived)\nref: "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://github.com/mapbox/sdf-glyph-foundry",
              "children": [
                {
                  "type": "text",
                  "value": "https://github.com/mapbox/sdf-glyph-foundry"
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Server fonts don't yet include baseline information, so we can't line up exactly with them\n(and they don't line up with each other)\nref: "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://github.com/mapbox/node-fontnik/pull/160",
              "children": [
                {
                  "type": "text",
                  "value": "https://github.com/mapbox/node-fontnik/pull/160"
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "To approximately align TinySDF glyphs with server-provided glyphs, we use this baseline adjustment\nfactor calibrated to be in between DIN Pro and Arial Unicode (but closer to Arial Unicode)"
            }
          ]
        }
      ]
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 200,
        "column": 8
      },
      "end": {
        "line": 212,
        "column": 11
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 213,
          "column": 8
        },
        "end": {
          "line": 213,
          "column": 33
        }
      },
      "file": "/Users/bogdan.simon/Work/MaplibreDocs/maplibre-gl-js/src/render/glyph_manager.ts",
      "github": {
        "url": "https://github.com/maplibre/maplibre-gl-js/blob/2aa1ca35ed4dd3a81a4a18bda51f1a784062dd4e/src/render/glyph_manager.ts#L213-L213",
        "path": "src/render/glyph_manager.ts"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "topAdjustment",
    "kind": "constant",
    "type": {
      "type": "NameExpression",
      "name": "number"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "topAdjustment",
        "kind": "constant"
      }
    ],
    "namespace": "topAdjustment"
  }
]
